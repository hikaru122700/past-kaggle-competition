{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29714,"status":"ok","timestamp":1732086115727,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"1PbtAG4aODsy","outputId":"ec176482-b19a-4ea6-c9b7-aedf3c93e2ed"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25807,"status":"ok","timestamp":1732086141521,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"CgU8KzAiP47t","outputId":"d4b66275-d8cd-454f-d42d-1766dc3bc470"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pygeohash\n","  Downloading pygeohash-1.2.0.tar.gz (5.0 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: pygeohash\n","  Building wheel for pygeohash (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pygeohash: filename=pygeohash-1.2.0-py2.py3-none-any.whl size=6153 sha256=3870fdc87eaab0f6e267ddfcf0a6040f69f5516d0256566a38d13b6d7bc961b0\n","  Stored in directory: /root/.cache/pip/wheels/28/ec/b6/beadf7295a623f528507691fb0d471b50d064ae9bbad420b8f\n","Successfully built pygeohash\n","Installing collected packages: pygeohash\n","Successfully installed pygeohash-1.2.0\n","Collecting catboost\n","  Downloading catboost-1.2.7-cp310-cp310-manylinux2014_x86_64.whl.metadata (1.2 kB)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.8.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.26.4)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.13.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.24.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.54.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (11.0.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.2.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n","Downloading catboost-1.2.7-cp310-cp310-manylinux2014_x86_64.whl (98.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: catboost\n","Successfully installed catboost-1.2.7\n","Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.5.0)\n","Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.13.1)\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.26.4)\n","Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost) (2.23.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.13.1)\n","Collecting optuna\n","  Downloading optuna-4.1.0-py3-none-any.whl.metadata (16 kB)\n","Collecting alembic>=1.5.0 (from optuna)\n","  Downloading alembic-1.14.0-py3-none-any.whl.metadata (7.4 kB)\n","Collecting colorlog (from optuna)\n","  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.2)\n","Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.36)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.6)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.2)\n","Collecting Mako (from alembic>=1.5.0->optuna)\n","  Downloading Mako-1.3.6-py3-none-any.whl.metadata (2.9 kB)\n","Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.12.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.1.1)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (3.0.2)\n","Downloading optuna-4.1.0-py3-none-any.whl (364 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m364.4/364.4 kB\u001b[0m \u001b[31m29.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading alembic-1.14.0-py3-none-any.whl (233 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m233.5/233.5 kB\u001b[0m \u001b[31m18.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\n","Downloading Mako-1.3.6-py3-none-any.whl (78 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.6/78.6 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: Mako, colorlog, alembic, optuna\n","Successfully installed Mako-1.3.6 alembic-1.14.0 colorlog-6.9.0 optuna-4.1.0\n"]}],"source":["!pip install pygeohash\n","!pip install catboost\n","!pip install lightgbm\n","!pip install xgboost\n","!pip install optuna"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":6068,"status":"ok","timestamp":1732086147570,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"rgYfzA2kOMC5"},"outputs":[],"source":["import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","import numpy as np\n","import pandas as pd\n","from tqdm import tqdm\n","import joblib\n","import math\n","\n","# import pygeohash as pgh\n","\n","from concurrent.futures import ThreadPoolExecutor\n","\n","from lightgbm import LGBMRegressor\n","from catboost import CatBoostRegressor\n","from xgboost import XGBRegressor\n","from sklearn.ensemble import HistGradientBoostingRegressor\n","from sklearn.linear_model import LinearRegression\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import *\n","from sklearn.preprocessing import LabelEncoder\n","\n","import gc\n","gc.collect()\n","import optuna\n","import matplotlib.pyplot as plt\n","\n","\n","import os\n","from catboost import CatBoostClassifier\n"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":2332,"status":"ok","timestamp":1732086149895,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"HmJ_Z08LOOst"},"outputs":[],"source":["path  = \"/content/drive/My Drive/signate/SMBC Group GREEN×DATA Challenge 2024/\"\n","# 予測モデルを訓練するためのデータセット\n","train_df = pd.read_csv(path+'train.csv', index_col=0)\n","\n","# 予測モデルに推論（予測)させるデータセット\n","test_df = pd.read_csv(path+'test.csv', index_col=0)"]},{"cell_type":"code","source":["test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":860},"id":"Z5Kxgwoh6x06","executionInfo":{"status":"ok","timestamp":1732086149899,"user_tz":-540,"elapsed":69,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"f6e3f63c-dceb-4b87-86e5-1d7a9ba03e25"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                     FacilityName   Latitude   Longitude  \\\n","4655                           ROGER AOTSCHEGAROW  38.033040  -97.973170   \n","4656                  EPNG STATION 6543 LORDSBURG  32.316030 -108.606800   \n","4657  OWENS-BROCKWAY GLASS CONTAINER INC PLANT 19  41.251500  -78.742440   \n","4658                  WALDORF CORP (DBA ROCKTENN)  44.959660  -93.193410   \n","4659               SOLAR TURBINES INC KEARNY MESA  32.818720 -117.125800   \n","...                                           ...        ...         ...   \n","7158                     BEULAH SANITARY LANDFILL  38.651945  -75.914445   \n","7159                             SONORA GAS PLANT  31.361795 -101.776403   \n","7160                          ASH GROVE CEMENT CO  41.005565  -96.154917   \n","7161                          SHOW ME ETHANOL LLC  39.364417  -93.449361   \n","7162                       XTO - NEW TEAGUE PLANT  31.591369  -96.216360   \n","\n","                        LocationAddress        City State        ZIP  \\\n","4655         1910 SOUTH BROADACRES ROAD  HUTCHINSON    KS      67501   \n","4656                                NaN   LORDSBURG    NM      88045   \n","4657                     3831 ROUTE 219   BROCKPORT    PA      15823   \n","4658                    2250 WABASH AVE  SAINT PAUL    MN  551141895   \n","4659              4200 RUFFIN RD MZ T-2   SAN DIEGO    CA      92123   \n","...                                 ...         ...   ...        ...   \n","7158  ROUTE 331 & ROUTE 16- BEULAH ROAD     HURLOCK    MD      21643   \n","7159                                NaN      RANKIN    TX      79778   \n","7160                       16215 HWY 50  LOUISVILLE    NE  680372881   \n","7161                     26530 E HWY 24  CARROLLTON    MO      64633   \n","7162                        230 FCR 640      TEAGUE    TX      75860   \n","\n","          County  FIPScode  PrimaryNAICS  SecondPrimaryNAICS  \\\n","4655        RENO   20155.0        211112                 NaN   \n","4656     HIDALGO   35023.0        486210                 NaN   \n","4657   JEFFERSON   42065.0        327213                 NaN   \n","4658      RAMSEY   27123.0        322130                 NaN   \n","4659   SAN DIEGO    6073.0        333611                 NaN   \n","...          ...       ...           ...                 ...   \n","7158  DORCHESTER   24019.0        562212                 NaN   \n","7159       UPTON   48461.0        211112                 NaN   \n","7160        CASS   31025.0        327310                 NaN   \n","7161     CARROLL   29033.0        325193                 NaN   \n","7162   FREESTONE   48161.0        211111                 NaN   \n","\n","                                           IndustryType  \\\n","4655  Natural Gas and Natural Gas Liquids Suppliers,...   \n","4656                  Petroleum and Natural Gas Systems   \n","4657                                           Minerals   \n","4658                                     Pulp and Paper   \n","4659                                              Other   \n","...                                                 ...   \n","7158                                              Waste   \n","7159                  Petroleum and Natural Gas Systems   \n","7160                                           Minerals   \n","7161                                        Other,Waste   \n","7162                  Petroleum and Natural Gas Systems   \n","\n","      TRI_Air_Emissions_10_in_lbs  TRI_Air_Emissions_11_in_lbs  \\\n","4655                          NaN                          NaN   \n","4656                          NaN                          NaN   \n","4657                 28275.061385                 32075.140635   \n","4658                 37330.205714                 42503.897432   \n","4659                 45310.722699                 39897.800897   \n","...                           ...                          ...   \n","7158                          NaN                          NaN   \n","7159                          NaN                          NaN   \n","7160                 22956.125554                 23592.402994   \n","7161                124460.895022                140816.449347   \n","7162                          NaN                          NaN   \n","\n","      TRI_Air_Emissions_12_in_lbs  TRI_Air_Emissions_13_in_lbs  \\\n","4655                          NaN                          NaN   \n","4656                          NaN                          NaN   \n","4657                 26445.792090                 23385.161510   \n","4658                 43906.102080                 42958.306538   \n","4659                 40203.428231                 39437.099224   \n","...                           ...                          ...   \n","7158                          NaN                          NaN   \n","7159                          NaN                          NaN   \n","7160                 25069.498286                 24560.172725   \n","7161                 93118.705227                130326.946431   \n","7162                          NaN                          NaN   \n","\n","      GHG_Direct_Emissions_10_in_metric_tons  \\\n","4655                            88951.390376   \n","4656                                     NaN   \n","4657                            84908.372871   \n","4658                            49004.603631   \n","4659                            84959.769922   \n","...                                      ...   \n","7158                           110523.066755   \n","7159                                     NaN   \n","7160                           166520.232511   \n","7161                            71773.803649   \n","7162                                     NaN   \n","\n","      GHG_Direct_Emissions_11_in_metric_tons  \\\n","4655                            65803.021457   \n","4656                                     NaN   \n","4657                             6212.899604   \n","4658                               52.038452   \n","4659                            15351.359676   \n","...                                      ...   \n","7158                            98954.793233   \n","7159                                     NaN   \n","7160                           469732.826538   \n","7161                           936031.894142   \n","7162                           841773.060989   \n","\n","      GHG_Direct_Emissions_12_in_metric_tons  \\\n","4655                            2.899329e+04   \n","4656                            3.119260e+05   \n","4657                            3.473291e+04   \n","4658                            1.426237e+04   \n","4659                            4.000654e+04   \n","...                                      ...   \n","7158                            3.467008e+06   \n","7159                                     NaN   \n","7160                            8.255855e+04   \n","7161                            3.369613e+05   \n","7162                            4.082144e+06   \n","\n","      GHG_Direct_Emissions_13_in_metric_tons  \n","4655                            32965.487915  \n","4656                           268668.069110  \n","4657                            39045.247387  \n","4658                            20204.924986  \n","4659                            63935.249120  \n","...                                      ...  \n","7158                           147802.356027  \n","7159                                     NaN  \n","7160                            85775.307153  \n","7161                           156640.371706  \n","7162                           350096.803939  \n","\n","[2508 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-cd2a6617-9243-49d0-9acc-4831ceb755ff\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FacilityName</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>LocationAddress</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>ZIP</th>\n","      <th>County</th>\n","      <th>FIPScode</th>\n","      <th>PrimaryNAICS</th>\n","      <th>SecondPrimaryNAICS</th>\n","      <th>IndustryType</th>\n","      <th>TRI_Air_Emissions_10_in_lbs</th>\n","      <th>TRI_Air_Emissions_11_in_lbs</th>\n","      <th>TRI_Air_Emissions_12_in_lbs</th>\n","      <th>TRI_Air_Emissions_13_in_lbs</th>\n","      <th>GHG_Direct_Emissions_10_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_11_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_12_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_13_in_metric_tons</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4655</th>\n","      <td>ROGER AOTSCHEGAROW</td>\n","      <td>38.033040</td>\n","      <td>-97.973170</td>\n","      <td>1910 SOUTH BROADACRES ROAD</td>\n","      <td>HUTCHINSON</td>\n","      <td>KS</td>\n","      <td>67501</td>\n","      <td>RENO</td>\n","      <td>20155.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>Natural Gas and Natural Gas Liquids Suppliers,...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>88951.390376</td>\n","      <td>65803.021457</td>\n","      <td>2.899329e+04</td>\n","      <td>32965.487915</td>\n","    </tr>\n","    <tr>\n","      <th>4656</th>\n","      <td>EPNG STATION 6543 LORDSBURG</td>\n","      <td>32.316030</td>\n","      <td>-108.606800</td>\n","      <td>NaN</td>\n","      <td>LORDSBURG</td>\n","      <td>NM</td>\n","      <td>88045</td>\n","      <td>HIDALGO</td>\n","      <td>35023.0</td>\n","      <td>486210</td>\n","      <td>NaN</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.119260e+05</td>\n","      <td>268668.069110</td>\n","    </tr>\n","    <tr>\n","      <th>4657</th>\n","      <td>OWENS-BROCKWAY GLASS CONTAINER INC PLANT 19</td>\n","      <td>41.251500</td>\n","      <td>-78.742440</td>\n","      <td>3831 ROUTE 219</td>\n","      <td>BROCKPORT</td>\n","      <td>PA</td>\n","      <td>15823</td>\n","      <td>JEFFERSON</td>\n","      <td>42065.0</td>\n","      <td>327213</td>\n","      <td>NaN</td>\n","      <td>Minerals</td>\n","      <td>28275.061385</td>\n","      <td>32075.140635</td>\n","      <td>26445.792090</td>\n","      <td>23385.161510</td>\n","      <td>84908.372871</td>\n","      <td>6212.899604</td>\n","      <td>3.473291e+04</td>\n","      <td>39045.247387</td>\n","    </tr>\n","    <tr>\n","      <th>4658</th>\n","      <td>WALDORF CORP (DBA ROCKTENN)</td>\n","      <td>44.959660</td>\n","      <td>-93.193410</td>\n","      <td>2250 WABASH AVE</td>\n","      <td>SAINT PAUL</td>\n","      <td>MN</td>\n","      <td>551141895</td>\n","      <td>RAMSEY</td>\n","      <td>27123.0</td>\n","      <td>322130</td>\n","      <td>NaN</td>\n","      <td>Pulp and Paper</td>\n","      <td>37330.205714</td>\n","      <td>42503.897432</td>\n","      <td>43906.102080</td>\n","      <td>42958.306538</td>\n","      <td>49004.603631</td>\n","      <td>52.038452</td>\n","      <td>1.426237e+04</td>\n","      <td>20204.924986</td>\n","    </tr>\n","    <tr>\n","      <th>4659</th>\n","      <td>SOLAR TURBINES INC KEARNY MESA</td>\n","      <td>32.818720</td>\n","      <td>-117.125800</td>\n","      <td>4200 RUFFIN RD MZ T-2</td>\n","      <td>SAN DIEGO</td>\n","      <td>CA</td>\n","      <td>92123</td>\n","      <td>SAN DIEGO</td>\n","      <td>6073.0</td>\n","      <td>333611</td>\n","      <td>NaN</td>\n","      <td>Other</td>\n","      <td>45310.722699</td>\n","      <td>39897.800897</td>\n","      <td>40203.428231</td>\n","      <td>39437.099224</td>\n","      <td>84959.769922</td>\n","      <td>15351.359676</td>\n","      <td>4.000654e+04</td>\n","      <td>63935.249120</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7158</th>\n","      <td>BEULAH SANITARY LANDFILL</td>\n","      <td>38.651945</td>\n","      <td>-75.914445</td>\n","      <td>ROUTE 331 &amp; ROUTE 16- BEULAH ROAD</td>\n","      <td>HURLOCK</td>\n","      <td>MD</td>\n","      <td>21643</td>\n","      <td>DORCHESTER</td>\n","      <td>24019.0</td>\n","      <td>562212</td>\n","      <td>NaN</td>\n","      <td>Waste</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>110523.066755</td>\n","      <td>98954.793233</td>\n","      <td>3.467008e+06</td>\n","      <td>147802.356027</td>\n","    </tr>\n","    <tr>\n","      <th>7159</th>\n","      <td>SONORA GAS PLANT</td>\n","      <td>31.361795</td>\n","      <td>-101.776403</td>\n","      <td>NaN</td>\n","      <td>RANKIN</td>\n","      <td>TX</td>\n","      <td>79778</td>\n","      <td>UPTON</td>\n","      <td>48461.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7160</th>\n","      <td>ASH GROVE CEMENT CO</td>\n","      <td>41.005565</td>\n","      <td>-96.154917</td>\n","      <td>16215 HWY 50</td>\n","      <td>LOUISVILLE</td>\n","      <td>NE</td>\n","      <td>680372881</td>\n","      <td>CASS</td>\n","      <td>31025.0</td>\n","      <td>327310</td>\n","      <td>NaN</td>\n","      <td>Minerals</td>\n","      <td>22956.125554</td>\n","      <td>23592.402994</td>\n","      <td>25069.498286</td>\n","      <td>24560.172725</td>\n","      <td>166520.232511</td>\n","      <td>469732.826538</td>\n","      <td>8.255855e+04</td>\n","      <td>85775.307153</td>\n","    </tr>\n","    <tr>\n","      <th>7161</th>\n","      <td>SHOW ME ETHANOL LLC</td>\n","      <td>39.364417</td>\n","      <td>-93.449361</td>\n","      <td>26530 E HWY 24</td>\n","      <td>CARROLLTON</td>\n","      <td>MO</td>\n","      <td>64633</td>\n","      <td>CARROLL</td>\n","      <td>29033.0</td>\n","      <td>325193</td>\n","      <td>NaN</td>\n","      <td>Other,Waste</td>\n","      <td>124460.895022</td>\n","      <td>140816.449347</td>\n","      <td>93118.705227</td>\n","      <td>130326.946431</td>\n","      <td>71773.803649</td>\n","      <td>936031.894142</td>\n","      <td>3.369613e+05</td>\n","      <td>156640.371706</td>\n","    </tr>\n","    <tr>\n","      <th>7162</th>\n","      <td>XTO - NEW TEAGUE PLANT</td>\n","      <td>31.591369</td>\n","      <td>-96.216360</td>\n","      <td>230 FCR 640</td>\n","      <td>TEAGUE</td>\n","      <td>TX</td>\n","      <td>75860</td>\n","      <td>FREESTONE</td>\n","      <td>48161.0</td>\n","      <td>211111</td>\n","      <td>NaN</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>841773.060989</td>\n","      <td>4.082144e+06</td>\n","      <td>350096.803939</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd2a6617-9243-49d0-9acc-4831ceb755ff')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cd2a6617-9243-49d0-9acc-4831ceb755ff button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cd2a6617-9243-49d0-9acc-4831ceb755ff');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a44d60f0-21a9-41cc-b083-7542b1d5fac2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a44d60f0-21a9-41cc-b083-7542b1d5fac2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a44d60f0-21a9-41cc-b083-7542b1d5fac2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8a360fa4-cd55-48b5-983a-15b28a7543bc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8a360fa4-cd55-48b5-983a-15b28a7543bc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_df","summary":"{\n  \"name\": \"test_df\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"FacilityName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2462,\n        \"samples\": [\n          \"CD MCINTOSH JR POWER PLANT\",\n          \"MODERN LANDFILL INC\",\n          \"NICOR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.758664967537397,\n        \"min\": 13.463579,\n        \"max\": 71.292071,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          36.1491,\n          29.682045,\n          25.85784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.263441645665505,\n        \"min\": -158.125764,\n        \"max\": 144.678216,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          -96.96397,\n          -84.483991,\n          -98.31008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LocationAddress\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2386,\n        \"samples\": [\n          \"3901 DONNA STREET\",\n          \"1134 MANOR ST\",\n          \"2090 SOUTH CR 280 EAST\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1647,\n        \"samples\": [\n          \"GALVESTON\",\n          \"BOISE\",\n          \"SAN ARDO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"GA\",\n          \"DE\",\n          \"SD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZIP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2152,\n        \"samples\": [\n          \"827188202\",\n          \"82431\",\n          \"1801\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"County\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 865,\n        \"samples\": [\n          \"KANAWHA\",\n          \"HANCOCK\",\n          \"MAYAGUEZ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FIPScode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16241.454601706124,\n        \"min\": 1001.0,\n        \"max\": 78030.0,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          39173.0,\n          26163.0,\n          27127.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147092,\n        \"min\": 211111,\n        \"max\": 928110,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          213112,\n          311611,\n          331210\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SecondPrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48626.377424967715,\n        \"min\": 115114.0,\n        \"max\": 562910.0,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          325211.0,\n          331111.0,\n          331423.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IndustryType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"Chemicals,Power Plants,Waste\",\n          \"Petroleum and Natural Gas Systems,Power Plants\",\n          \"Injection of CO2,Natural Gas and Natural Gas Liquids Suppliers,Petroleum and Natural Gas Systems\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_10_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153260.8934282091,\n        \"min\": 4405.828910812044,\n        \"max\": 1374502.9266120757,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          15151.19740345126,\n          46183.68918687044,\n          21078.80697763863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_11_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50742.80939795908,\n        \"min\": 5343.548841848329,\n        \"max\": 481505.852809956,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          21461.32437823258,\n          48995.95349964959,\n          24962.37197178924\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_12_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96607.92544572477,\n        \"min\": 3144.5571408761243,\n        \"max\": 898432.732338988,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          17311.855440674823,\n          44777.45490159112,\n          16595.45802089126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_13_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109221.25710756132,\n        \"min\": 1221.4376824539213,\n        \"max\": 1010901.828389014,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          11371.572489848208,\n          40829.582779592645,\n          23703.26616989767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_10_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 523900.6905247671,\n        \"min\": 134.22630653291708,\n        \"max\": 3927869.397368078,\n        \"num_unique_values\": 2130,\n        \"samples\": [\n          68182.52126620257,\n          882894.9220059533,\n          278999.1032526391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_11_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275363.2669497924,\n        \"min\": 52.03845177487528,\n        \"max\": 2120410.8562870584,\n        \"num_unique_values\": 2297,\n        \"samples\": [\n          100899.59307034814,\n          36649.895737462415,\n          21552.90524045979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_12_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 744804.5468121156,\n        \"min\": 3003.9516055817003,\n        \"max\": 6112087.345974441,\n        \"num_unique_values\": 2371,\n        \"samples\": [\n          285044.4940147917,\n          101373.609689835,\n          1410650.0982454163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_13_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 428452.149925799,\n        \"min\": 222.6384210366596,\n        \"max\": 4292471.519790898,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          68263.16109033479,\n          4316.304107072552,\n          48128.59588285932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55,"status":"ok","timestamp":1732086149900,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"QQ5sKJOROQZf","outputId":"7abf22a2-a2c9-4e89-969a-d40f73987f1e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['FacilityName', 'Latitude', 'Longitude', 'LocationAddress', 'City',\n","       'State', 'ZIP', 'County', 'FIPScode', 'PrimaryNAICS',\n","       'SecondPrimaryNAICS', 'IndustryType', 'TRI_Air_Emissions_10_in_lbs',\n","       'TRI_Air_Emissions_11_in_lbs', 'TRI_Air_Emissions_12_in_lbs',\n","       'TRI_Air_Emissions_13_in_lbs', 'GHG_Direct_Emissions_10_in_metric_tons',\n","       'GHG_Direct_Emissions_11_in_metric_tons',\n","       'GHG_Direct_Emissions_12_in_metric_tons',\n","       'GHG_Direct_Emissions_13_in_metric_tons',\n","       'GHG_Direct_Emissions_14_in_metric_tons'],\n","      dtype='object')"]},"metadata":{},"execution_count":6}],"source":["# すべての列を表示するように設定\n","pd.set_option('display.max_columns', None)\n","train_df.columns"]},{"cell_type":"code","source":["train_df = train_df.reset_index(drop=True)\n","test_df  = test_df.reset_index(drop=True)"],"metadata":{"id":"tB_P3XnDDNaY","executionInfo":{"status":"ok","timestamp":1732086149900,"user_tz":-540,"elapsed":43,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":43,"status":"ok","timestamp":1732086149901,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"km3M9TFVOcE4"},"outputs":[],"source":["# del train_df['Unnamed: 0'], test_df['Unnamed: 0']\n","del train_df['FacilityName'], test_df['FacilityName']\n","del train_df['LocationAddress'], test_df['LocationAddress']\n","del train_df['ZIP'], test_df['ZIP']\n","del train_df['IndustryType'], test_df['IndustryType']\n","del train_df['SecondPrimaryNAICS'], test_df['SecondPrimaryNAICS']"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":41,"status":"ok","timestamp":1732086149901,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"xVTTGCKTOf7p"},"outputs":[],"source":["\n","two_digit_map     = {11: 'Agriculture, Forestry, Fishing and Hunting',\n","                    21: 'Mining, Quarrying, and Oil and Gas Extraction',\n","                    22: 'Utilities',\n","                    23: 'Construction',\n","                    31: 'Manufacturing',\n","                    32: 'Manufacturing',\n","                    33: 'Manufacturing',\n","                    42: 'Wholesale Trade',\n","                    44: 'Retail Trade',\n","                    45: 'Retail Trade',\n","                    48: 'Transportation and Warehousing',\n","                    49: 'Transportation and Warehousing',\n","                    51: 'Information',\n","                    52: 'Finance and Insurance',\n","                    53: 'Real Estate and Rental and Leasing',\n","                    54: 'Professional, Scientific, and Technical Services',\n","                    55: 'Management of Companies and Enterprises',\n","                    56: 'Administrative and Support and Waste Management and Remediation Services',\n","                    61: 'Educational Services',\n","                    62: 'Health Care and Social Assistance',\n","                    71: 'Arts, Entertainment, and Recreation',\n","                    72: 'Accommodation and Food Services',\n","                    81: 'Other Services (except Public Administration)',\n","                    92: 'Public Administration'}"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":40,"status":"ok","timestamp":1732086149902,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"1ssTu5yPOgeu"},"outputs":[],"source":["train_df['first_two_digit_primary_naics'] = train_df['PrimaryNAICS'].apply(lambda z: str(z)[:2]).astype(int)\n","test_df['first_two_digit_primary_naics']  = test_df['PrimaryNAICS'].apply(lambda z: str(z)[:2]).astype(int)\n","\n","train_df['Economic_Sector']               = train_df['first_two_digit_primary_naics'].map(two_digit_map)\n","test_df['Economic_Sector']                = test_df['first_two_digit_primary_naics'].map(two_digit_map)\n","\n","del train_df['first_two_digit_primary_naics'], test_df['first_two_digit_primary_naics']\n","\n","econ_sector_train                         = train_df['Economic_Sector'].values\n","econ_sector_test                          = test_df['Economic_Sector'].values"]},{"cell_type":"code","source":["test_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5arkcc74UQYH","executionInfo":{"status":"ok","timestamp":1732086149902,"user_tz":-540,"elapsed":39,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"369a7ee5-83db-4b14-f829-f6609c33ac41"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2508, 16)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":34,"status":"ok","timestamp":1732086149903,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"fMLlNdnHOmBz"},"outputs":[],"source":["\n","\n","\n","def haversine(lat1, lon1, lat2, lon2):\n","    # Convert latitude and longitude from degrees to radians\n","    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n","\n","    # Haversine formula\n","    dlat = lat2 - lat1\n","    dlon = lon2 - lon1\n","    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n","    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n","\n","    # Radius of Earth in kilometers (mean radius)\n","    R = 6371.0\n","\n","    # Calculate the distance\n","    distance = R * c\n","    return distance"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":32,"status":"ok","timestamp":1732086149903,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"63GeF6dqOoq6"},"outputs":[],"source":["def calculate_distance(lat1, lon1, lat2, lon2):\n","    return haversine(lat1, lon1, lat2, lon2)\n","\n","def get_nearest_distance(lat1, lon1, econ_sector_ref, neighbours=5, train_point=False):\n","    # Extract the required columns once to NumPy arrays\n","    latitudes = train_df['Latitude'].values\n","    longitudes = train_df['Longitude'].values\n","    ghg_emissions = train_df['GHG_Direct_Emissions_14_in_metric_tons'].values\n","    econ_sectors = train_df['Economic_Sector'].values\n","\n","    # Filter NaN emissions directly\n","    valid_indices = ~np.isnan(ghg_emissions)\n","\n","    latitudes = latitudes[valid_indices]\n","    longitudes = longitudes[valid_indices]\n","    ghg_emissions = ghg_emissions[valid_indices]\n","    econ_sectors = econ_sectors[valid_indices]\n","\n","    # Parallelize distance calculation using ThreadPoolExecutor\n","    with ThreadPoolExecutor() as executor:\n","        distances = list(executor.map(calculate_distance,\n","                                     [lat1]*len(latitudes),\n","                                     [lon1]*len(longitudes),\n","                                     latitudes,\n","                                     longitudes))\n","\n","    # Combine the results into a DataFrame\n","    near_df = pd.DataFrame({\n","        'Distance': distances,\n","        'GHG_emission_14': ghg_emissions,\n","        'Economic_Sector': econ_sectors\n","    })\n","\n","\n","    if train_point:\n","        near_df.sort_values(by='Distance', inplace=True)\n","        near_df = near_df.dropna()\n","        near_df = near_df.iloc[1:].reset_index(drop=True)\n","    else:\n","        # Sort distances by 'Distance'\n","        near_df.sort_values(by='Distance', inplace=True)\n","        near_df = near_df.dropna()\n","\n","    # Filter by economic sector\n","    nearest_locations_econ_sector = near_df[near_df['Economic_Sector'] == econ_sector_ref]\n","\n","    # Get the top N nearest for both economic sector and overall\n","    sub_near_econ = nearest_locations_econ_sector.head(neighbours)\n","    sub_nearest_locations = near_df.head(neighbours)\n","\n","    # Compute weighted averages\n","    econ_weighted_average = (sub_near_econ['GHG_emission_14'] / np.where(sub_near_econ['Distance'] == 0, 1, sub_near_econ['Distance']) ).sum()\n","    near_weighted_average = (sub_nearest_locations['GHG_emission_14'] / np.where(sub_nearest_locations['Distance']==0,1,sub_nearest_locations['Distance'])).sum()\n","\n","    # Compute regular averages\n","    econ_average = sub_near_econ['GHG_emission_14'].mean()\n","    near_average = sub_nearest_locations['GHG_emission_14'].mean()\n","\n","    return [econ_weighted_average, econ_average, near_weighted_average, near_average]"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"B-BewDlQOq8R","executionInfo":{"status":"ok","timestamp":1732086152435,"user_tz":-540,"elapsed":2562,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["# neighbours = 5\n","\n","# # テストデータの距離計算または読み込み\n","# file_path = f\"test_distance_{neighbours}nbrs.csv\"\n","# if os.path.exists(file_path):\n","#     print(f\"{file_path} exists.\")\n","#     test_distance = pd.read_csv(file_path)\n","# else:\n","#     output = []\n","#     for index in tqdm(range(test_df.shape[0])):\n","#         lat1 = test_df.iloc[index]['Latitude']\n","#         lon1 = test_df.iloc[index]['Longitude']\n","#         econ_sector_ref = test_df.iloc[index]['Economic_Sector']\n","#         x = get_nearest_distance(lat1, lon1, econ_sector_ref, neighbours=neighbours, train_point=False)\n","#         output.append(x)\n","\n","#     test_distance = pd.DataFrame(output, columns=['Economy_Sector_Weighted_Avg', 'Economic_Sector_Average', 'Nearest_Weighted_Average', 'Nearest_Average'])\n","#     test_distance.to_csv(file_path, index=False)\n","\n","# # トレーニングデータの距離計算または読み込み\n","# file_path = f\"train_distance_{neighbours}nbrs.csv\"  # f-string を正しく使用\n","# if os.path.exists(file_path):\n","#     print(f\"{file_path} exists.\")\n","#     train_distance = pd.read_csv(file_path)\n","# else:\n","#     output = []\n","#     for index in tqdm(range(train_df.shape[0])):\n","#         lat1 = train_df.iloc[index]['Latitude']\n","#         lon1 = train_df.iloc[index]['Longitude']\n","#         econ_sector_ref = train_df.iloc[index]['Economic_Sector']\n","#         x = get_nearest_distance(lat1, lon1, econ_sector_ref, neighbours=neighbours, train_point=True)\n","#         output.append(x)\n","\n","#     train_distance = pd.DataFrame(output, columns=['Economy_Sector_Weighted_Avg', 'Economic_Sector_Average', 'Nearest_Weighted_Average', 'Nearest_Average'])\n","#     train_distance.to_csv(file_path, index=False)\n","\n","train_distance = pd.read_csv(path+\"train_distance_5nbrs.csv\")\n","test_distance  = pd.read_csv(path+\"test_distance_5nbrs.csv\")"]},{"cell_type":"code","source":[],"metadata":{"id":"A21xdE0MriS3","executionInfo":{"status":"ok","timestamp":1732086152440,"user_tz":-540,"elapsed":109,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"dz7oAHi9BzbO","executionInfo":{"status":"ok","timestamp":1732086152441,"user_tz":-540,"elapsed":107,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"d8d6f3d5-0dd1-4f1e-faa1-a330719083b5"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Latitude   Longitude        City State      County  FIPScode  \\\n","0     38.033040  -97.973170  HUTCHINSON    KS        RENO   20155.0   \n","1     32.316030 -108.606800   LORDSBURG    NM     HIDALGO   35023.0   \n","2     41.251500  -78.742440   BROCKPORT    PA   JEFFERSON   42065.0   \n","3     44.959660  -93.193410  SAINT PAUL    MN      RAMSEY   27123.0   \n","4     32.818720 -117.125800   SAN DIEGO    CA   SAN DIEGO    6073.0   \n","...         ...         ...         ...   ...         ...       ...   \n","2503  38.651945  -75.914445     HURLOCK    MD  DORCHESTER   24019.0   \n","2504  31.361795 -101.776403      RANKIN    TX       UPTON   48461.0   \n","2505  41.005565  -96.154917  LOUISVILLE    NE        CASS   31025.0   \n","2506  39.364417  -93.449361  CARROLLTON    MO     CARROLL   29033.0   \n","2507  31.591369  -96.216360      TEAGUE    TX   FREESTONE   48161.0   \n","\n","      PrimaryNAICS  TRI_Air_Emissions_10_in_lbs  TRI_Air_Emissions_11_in_lbs  \\\n","0           211112                          NaN                          NaN   \n","1           486210                          NaN                          NaN   \n","2           327213                 28275.061385                 32075.140635   \n","3           322130                 37330.205714                 42503.897432   \n","4           333611                 45310.722699                 39897.800897   \n","...            ...                          ...                          ...   \n","2503        562212                          NaN                          NaN   \n","2504        211112                          NaN                          NaN   \n","2505        327310                 22956.125554                 23592.402994   \n","2506        325193                124460.895022                140816.449347   \n","2507        211111                          NaN                          NaN   \n","\n","      TRI_Air_Emissions_12_in_lbs  TRI_Air_Emissions_13_in_lbs  \\\n","0                             NaN                          NaN   \n","1                             NaN                          NaN   \n","2                    26445.792090                 23385.161510   \n","3                    43906.102080                 42958.306538   \n","4                    40203.428231                 39437.099224   \n","...                           ...                          ...   \n","2503                          NaN                          NaN   \n","2504                          NaN                          NaN   \n","2505                 25069.498286                 24560.172725   \n","2506                 93118.705227                130326.946431   \n","2507                          NaN                          NaN   \n","\n","      GHG_Direct_Emissions_10_in_metric_tons  \\\n","0                               88951.390376   \n","1                                        NaN   \n","2                               84908.372871   \n","3                               49004.603631   \n","4                               84959.769922   \n","...                                      ...   \n","2503                           110523.066755   \n","2504                                     NaN   \n","2505                           166520.232511   \n","2506                            71773.803649   \n","2507                                     NaN   \n","\n","      GHG_Direct_Emissions_11_in_metric_tons  \\\n","0                               65803.021457   \n","1                                        NaN   \n","2                                6212.899604   \n","3                                  52.038452   \n","4                               15351.359676   \n","...                                      ...   \n","2503                            98954.793233   \n","2504                                     NaN   \n","2505                           469732.826538   \n","2506                           936031.894142   \n","2507                           841773.060989   \n","\n","      GHG_Direct_Emissions_12_in_metric_tons  \\\n","0                               2.899329e+04   \n","1                               3.119260e+05   \n","2                               3.473291e+04   \n","3                               1.426237e+04   \n","4                               4.000654e+04   \n","...                                      ...   \n","2503                            3.467008e+06   \n","2504                                     NaN   \n","2505                            8.255855e+04   \n","2506                            3.369613e+05   \n","2507                            4.082144e+06   \n","\n","      GHG_Direct_Emissions_13_in_metric_tons  \\\n","0                               32965.487915   \n","1                              268668.069110   \n","2                               39045.247387   \n","3                               20204.924986   \n","4                               63935.249120   \n","...                                      ...   \n","2503                           147802.356027   \n","2504                                     NaN   \n","2505                            85775.307153   \n","2506                           156640.371706   \n","2507                           350096.803939   \n","\n","                                        Economic_Sector  \n","0         Mining, Quarrying, and Oil and Gas Extraction  \n","1                        Transportation and Warehousing  \n","2                                         Manufacturing  \n","3                                         Manufacturing  \n","4                                         Manufacturing  \n","...                                                 ...  \n","2503  Administrative and Support and Waste Managemen...  \n","2504      Mining, Quarrying, and Oil and Gas Extraction  \n","2505                                      Manufacturing  \n","2506                                      Manufacturing  \n","2507      Mining, Quarrying, and Oil and Gas Extraction  \n","\n","[2508 rows x 16 columns]"],"text/html":["\n","  <div id=\"df-7d19b257-f115-4031-83d2-ff82835abeb6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>County</th>\n","      <th>FIPScode</th>\n","      <th>PrimaryNAICS</th>\n","      <th>TRI_Air_Emissions_10_in_lbs</th>\n","      <th>TRI_Air_Emissions_11_in_lbs</th>\n","      <th>TRI_Air_Emissions_12_in_lbs</th>\n","      <th>TRI_Air_Emissions_13_in_lbs</th>\n","      <th>GHG_Direct_Emissions_10_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_11_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_12_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_13_in_metric_tons</th>\n","      <th>Economic_Sector</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>38.033040</td>\n","      <td>-97.973170</td>\n","      <td>HUTCHINSON</td>\n","      <td>KS</td>\n","      <td>RENO</td>\n","      <td>20155.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>88951.390376</td>\n","      <td>65803.021457</td>\n","      <td>2.899329e+04</td>\n","      <td>32965.487915</td>\n","      <td>Mining, Quarrying, and Oil and Gas Extraction</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>32.316030</td>\n","      <td>-108.606800</td>\n","      <td>LORDSBURG</td>\n","      <td>NM</td>\n","      <td>HIDALGO</td>\n","      <td>35023.0</td>\n","      <td>486210</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.119260e+05</td>\n","      <td>268668.069110</td>\n","      <td>Transportation and Warehousing</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>41.251500</td>\n","      <td>-78.742440</td>\n","      <td>BROCKPORT</td>\n","      <td>PA</td>\n","      <td>JEFFERSON</td>\n","      <td>42065.0</td>\n","      <td>327213</td>\n","      <td>28275.061385</td>\n","      <td>32075.140635</td>\n","      <td>26445.792090</td>\n","      <td>23385.161510</td>\n","      <td>84908.372871</td>\n","      <td>6212.899604</td>\n","      <td>3.473291e+04</td>\n","      <td>39045.247387</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>44.959660</td>\n","      <td>-93.193410</td>\n","      <td>SAINT PAUL</td>\n","      <td>MN</td>\n","      <td>RAMSEY</td>\n","      <td>27123.0</td>\n","      <td>322130</td>\n","      <td>37330.205714</td>\n","      <td>42503.897432</td>\n","      <td>43906.102080</td>\n","      <td>42958.306538</td>\n","      <td>49004.603631</td>\n","      <td>52.038452</td>\n","      <td>1.426237e+04</td>\n","      <td>20204.924986</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32.818720</td>\n","      <td>-117.125800</td>\n","      <td>SAN DIEGO</td>\n","      <td>CA</td>\n","      <td>SAN DIEGO</td>\n","      <td>6073.0</td>\n","      <td>333611</td>\n","      <td>45310.722699</td>\n","      <td>39897.800897</td>\n","      <td>40203.428231</td>\n","      <td>39437.099224</td>\n","      <td>84959.769922</td>\n","      <td>15351.359676</td>\n","      <td>4.000654e+04</td>\n","      <td>63935.249120</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>38.651945</td>\n","      <td>-75.914445</td>\n","      <td>HURLOCK</td>\n","      <td>MD</td>\n","      <td>DORCHESTER</td>\n","      <td>24019.0</td>\n","      <td>562212</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>110523.066755</td>\n","      <td>98954.793233</td>\n","      <td>3.467008e+06</td>\n","      <td>147802.356027</td>\n","      <td>Administrative and Support and Waste Managemen...</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>31.361795</td>\n","      <td>-101.776403</td>\n","      <td>RANKIN</td>\n","      <td>TX</td>\n","      <td>UPTON</td>\n","      <td>48461.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Mining, Quarrying, and Oil and Gas Extraction</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>41.005565</td>\n","      <td>-96.154917</td>\n","      <td>LOUISVILLE</td>\n","      <td>NE</td>\n","      <td>CASS</td>\n","      <td>31025.0</td>\n","      <td>327310</td>\n","      <td>22956.125554</td>\n","      <td>23592.402994</td>\n","      <td>25069.498286</td>\n","      <td>24560.172725</td>\n","      <td>166520.232511</td>\n","      <td>469732.826538</td>\n","      <td>8.255855e+04</td>\n","      <td>85775.307153</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>39.364417</td>\n","      <td>-93.449361</td>\n","      <td>CARROLLTON</td>\n","      <td>MO</td>\n","      <td>CARROLL</td>\n","      <td>29033.0</td>\n","      <td>325193</td>\n","      <td>124460.895022</td>\n","      <td>140816.449347</td>\n","      <td>93118.705227</td>\n","      <td>130326.946431</td>\n","      <td>71773.803649</td>\n","      <td>936031.894142</td>\n","      <td>3.369613e+05</td>\n","      <td>156640.371706</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>31.591369</td>\n","      <td>-96.216360</td>\n","      <td>TEAGUE</td>\n","      <td>TX</td>\n","      <td>FREESTONE</td>\n","      <td>48161.0</td>\n","      <td>211111</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>841773.060989</td>\n","      <td>4.082144e+06</td>\n","      <td>350096.803939</td>\n","      <td>Mining, Quarrying, and Oil and Gas Extraction</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 16 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d19b257-f115-4031-83d2-ff82835abeb6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7d19b257-f115-4031-83d2-ff82835abeb6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7d19b257-f115-4031-83d2-ff82835abeb6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-35a6e873-1ac5-4936-80cd-9d5431cf6060\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35a6e873-1ac5-4936-80cd-9d5431cf6060')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-35a6e873-1ac5-4936-80cd-9d5431cf6060 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_daf63ac7-24af-4810-9783-b5b03cfd435e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_daf63ac7-24af-4810-9783-b5b03cfd435e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_df","summary":"{\n  \"name\": \"test_df\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.758664967537397,\n        \"min\": 13.463579,\n        \"max\": 71.292071,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          36.1491,\n          29.682045,\n          25.85784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.263441645665505,\n        \"min\": -158.125764,\n        \"max\": 144.678216,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          -96.96397,\n          -84.483991,\n          -98.31008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1647,\n        \"samples\": [\n          \"GALVESTON\",\n          \"BOISE\",\n          \"SAN ARDO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"GA\",\n          \"DE\",\n          \"SD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"County\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 865,\n        \"samples\": [\n          \"KANAWHA\",\n          \"HANCOCK\",\n          \"MAYAGUEZ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FIPScode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16241.454601706124,\n        \"min\": 1001.0,\n        \"max\": 78030.0,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          39173.0,\n          26163.0,\n          27127.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147092,\n        \"min\": 211111,\n        \"max\": 928110,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          213112,\n          311611,\n          331210\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_10_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153260.8934282091,\n        \"min\": 4405.828910812044,\n        \"max\": 1374502.9266120757,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          15151.19740345126,\n          46183.68918687044,\n          21078.80697763863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_11_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50742.80939795908,\n        \"min\": 5343.548841848329,\n        \"max\": 481505.852809956,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          21461.32437823258,\n          48995.95349964959,\n          24962.37197178924\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_12_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96607.92544572477,\n        \"min\": 3144.5571408761243,\n        \"max\": 898432.732338988,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          17311.855440674823,\n          44777.45490159112,\n          16595.45802089126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_13_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109221.25710756132,\n        \"min\": 1221.4376824539213,\n        \"max\": 1010901.828389014,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          11371.572489848208,\n          40829.582779592645,\n          23703.26616989767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_10_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 523900.6905247671,\n        \"min\": 134.22630653291708,\n        \"max\": 3927869.397368078,\n        \"num_unique_values\": 2130,\n        \"samples\": [\n          68182.52126620257,\n          882894.9220059533,\n          278999.1032526391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_11_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275363.2669497924,\n        \"min\": 52.03845177487528,\n        \"max\": 2120410.8562870584,\n        \"num_unique_values\": 2297,\n        \"samples\": [\n          100899.59307034814,\n          36649.895737462415,\n          21552.90524045979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_12_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 744804.5468121156,\n        \"min\": 3003.9516055817003,\n        \"max\": 6112087.345974441,\n        \"num_unique_values\": 2371,\n        \"samples\": [\n          285044.4940147917,\n          101373.609689835,\n          1410650.0982454163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_13_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 428452.149925799,\n        \"min\": 222.6384210366596,\n        \"max\": 4292471.519790898,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          68263.16109033479,\n          4316.304107072552,\n          48128.59588285932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Economic_Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"Professional, Scientific, and Technical Services\",\n          \"Other Services (except Public Administration)\",\n          \"Mining, Quarrying, and Oil and Gas Extraction\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["test_distance"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"cFQijI-T7Hz-","executionInfo":{"status":"ok","timestamp":1732086152441,"user_tz":-540,"elapsed":103,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"e645d59e-54ed-4207-c58e-d6dabc424fdb"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Economy_Sector_Weighted_Avg  Economic_Sector_Average  \\\n","0                    28019.568906            369614.866259   \n","1                     1296.575343             75372.922188   \n","2                    59857.420688             44340.597367   \n","3                    45265.635701            127292.222361   \n","4                     8838.742950             70847.235694   \n","...                           ...                      ...   \n","2503                 46677.018970            344616.752313   \n","2504                290186.877822            544751.143291   \n","2505                102525.917615            658668.333532   \n","2506                  3259.275220             58047.779667   \n","2507                109681.299454             48269.136655   \n","\n","      Nearest_Weighted_Average  Nearest_Average  \n","0                454847.563793    606222.120889  \n","1                 26392.933789    299096.231937  \n","2                 81533.914173    203831.976280  \n","3                297072.418525    405635.394345  \n","4                617665.034364    290001.288780  \n","...                        ...              ...  \n","2503              45282.942220    309317.094507  \n","2504             290186.877822    544751.143291  \n","2505             100759.314574    598531.117832  \n","2506               8262.408868     91773.030660  \n","2507             119664.619667     72463.524436  \n","\n","[2508 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-04cb989f-3b41-4a9a-b2a0-01da1ca750aa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Economy_Sector_Weighted_Avg</th>\n","      <th>Economic_Sector_Average</th>\n","      <th>Nearest_Weighted_Average</th>\n","      <th>Nearest_Average</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>28019.568906</td>\n","      <td>369614.866259</td>\n","      <td>454847.563793</td>\n","      <td>606222.120889</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1296.575343</td>\n","      <td>75372.922188</td>\n","      <td>26392.933789</td>\n","      <td>299096.231937</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>59857.420688</td>\n","      <td>44340.597367</td>\n","      <td>81533.914173</td>\n","      <td>203831.976280</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>45265.635701</td>\n","      <td>127292.222361</td>\n","      <td>297072.418525</td>\n","      <td>405635.394345</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8838.742950</td>\n","      <td>70847.235694</td>\n","      <td>617665.034364</td>\n","      <td>290001.288780</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>46677.018970</td>\n","      <td>344616.752313</td>\n","      <td>45282.942220</td>\n","      <td>309317.094507</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>290186.877822</td>\n","      <td>544751.143291</td>\n","      <td>290186.877822</td>\n","      <td>544751.143291</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>102525.917615</td>\n","      <td>658668.333532</td>\n","      <td>100759.314574</td>\n","      <td>598531.117832</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>3259.275220</td>\n","      <td>58047.779667</td>\n","      <td>8262.408868</td>\n","      <td>91773.030660</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>109681.299454</td>\n","      <td>48269.136655</td>\n","      <td>119664.619667</td>\n","      <td>72463.524436</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04cb989f-3b41-4a9a-b2a0-01da1ca750aa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-04cb989f-3b41-4a9a-b2a0-01da1ca750aa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-04cb989f-3b41-4a9a-b2a0-01da1ca750aa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a0cf5ad-fc7f-4c20-b465-ee00f38b4fbf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a0cf5ad-fc7f-4c20-b465-ee00f38b4fbf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a0cf5ad-fc7f-4c20-b465-ee00f38b4fbf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ff27993b-dc2e-4473-a171-403b23e6cddb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_distance')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ff27993b-dc2e-4473-a171-403b23e6cddb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_distance');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_distance","summary":"{\n  \"name\": \"test_distance\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"Economy_Sector_Weighted_Avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 747743.4007737286,\n        \"min\": 0.0,\n        \"max\": 28798681.499843683,\n        \"num_unique_values\": 2440,\n        \"samples\": [\n          9241.699412577524,\n          53953.32286908812,\n          73060.86380770168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Economic_Sector_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 220654.0847202713,\n        \"min\": 21511.937733780047,\n        \"max\": 1497479.6523419195,\n        \"num_unique_values\": 1942,\n        \"samples\": [\n          66700.71621416649,\n          110183.04314309386,\n          150909.70651325549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nearest_Weighted_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 897491.7777571155,\n        \"min\": 0.0,\n        \"max\": 28826451.48041248,\n        \"num_unique_values\": 2438,\n        \"samples\": [\n          19779.95805247306,\n          1628122.6416674675,\n          19059.37945828492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nearest_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 217658.4362816865,\n        \"min\": 23179.279306972345,\n        \"max\": 1445969.2834505166,\n        \"num_unique_values\": 1925,\n        \"samples\": [\n          142198.1623205142,\n          75915.38534270627,\n          793511.7266328961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["train_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"loGZ5kF2H0TJ","executionInfo":{"status":"ok","timestamp":1732086152441,"user_tz":-540,"elapsed":98,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"4c5a5c6d-3761-47dd-cd7f-e4b88c2d3013"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4655, 17)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["train_df = pd.concat([train_df, train_distance], axis=1)\n","test_df = pd.concat([test_df, test_distance], axis=1)\n"],"metadata":{"id":"anllSwP8CVY3","executionInfo":{"status":"ok","timestamp":1732086152441,"user_tz":-540,"elapsed":89,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","execution_count":19,"metadata":{"id":"QlqCT2oYOtW5","executionInfo":{"status":"ok","timestamp":1732086152441,"user_tz":-540,"elapsed":88,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["def create_features1(df):\n","\n","\n","    # Year-over-year difference\n","    df['TRI_Air_Emissions_YoY_Change_11'] = df['TRI_Air_Emissions_11_in_lbs'] - df['TRI_Air_Emissions_10_in_lbs']\n","    df['TRI_Air_Emissions_YoY_Change_12'] = df['TRI_Air_Emissions_12_in_lbs'] - df['TRI_Air_Emissions_11_in_lbs']\n","    df['TRI_Air_Emissions_YoY_Change_13'] = df['TRI_Air_Emissions_13_in_lbs'] - df['TRI_Air_Emissions_12_in_lbs']\n","\n","   # Year-over-year growth rate with NaN protection\n","    df['TRI_Air_Emissions_Growth_Rate_11'] = np.where(\n","        df['TRI_Air_Emissions_10_in_lbs'].notna() & (df['TRI_Air_Emissions_10_in_lbs'] != 0),\n","        (df['TRI_Air_Emissions_11_in_lbs'] - df['TRI_Air_Emissions_10_in_lbs']) / df['TRI_Air_Emissions_10_in_lbs'],\n","        np.nan\n","    )\n","\n","    df['TRI_Air_Emissions_Growth_Rate_12'] = np.where(\n","        df['TRI_Air_Emissions_11_in_lbs'].notna() & (df['TRI_Air_Emissions_11_in_lbs'] != 0),\n","        (df['TRI_Air_Emissions_12_in_lbs'] - df['TRI_Air_Emissions_11_in_lbs']) / df['TRI_Air_Emissions_11_in_lbs'],\n","        np.nan\n","    )\n","\n","    df['TRI_Air_Emissions_Growth_Rate_13'] = np.where(\n","        df['TRI_Air_Emissions_12_in_lbs'].notna() & (df['TRI_Air_Emissions_12_in_lbs'] != 0),\n","        (df['TRI_Air_Emissions_13_in_lbs'] - df['TRI_Air_Emissions_12_in_lbs']) / df['TRI_Air_Emissions_12_in_lbs'],\n","        np.nan\n","    )\n","\n","    return df\n","\n","train_df      = create_features1(train_df)\n","test_df       = create_features1(test_df)\n","new_features1 = ['TRI_Air_Emissions_YoY_Change_11','TRI_Air_Emissions_YoY_Change_12','TRI_Air_Emissions_YoY_Change_13',\n","                 'TRI_Air_Emissions_Growth_Rate_11','TRI_Air_Emissions_Growth_Rate_12','TRI_Air_Emissions_Growth_Rate_13']"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"h6ZgQHqQOv4x","executionInfo":{"status":"ok","timestamp":1732086152441,"user_tz":-540,"elapsed":87,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["def create_features2(df):\n","\n","\n","    # Year-over-year difference\n","    df['GHG_Direct_Emissions_YoY_Change_11'] = df['GHG_Direct_Emissions_11_in_metric_tons'] - df['GHG_Direct_Emissions_10_in_metric_tons']\n","    df['GHG_Direct_Emissions_YoY_Change_12'] = df['GHG_Direct_Emissions_12_in_metric_tons'] - df['GHG_Direct_Emissions_11_in_metric_tons']\n","    df['GHG_Direct_Emissions_YoY_Change_13'] = df['GHG_Direct_Emissions_13_in_metric_tons'] - df['GHG_Direct_Emissions_12_in_metric_tons']\n","\n","    # Year-over-year growth rate for GHG Direct Emissions with NaN protection\n","    df['GHG_Direct_Emissions_Growth_Rate_11'] = np.where(\n","        df['GHG_Direct_Emissions_10_in_metric_tons'].notna() & (df['GHG_Direct_Emissions_10_in_metric_tons'] != 0),\n","        (df['GHG_Direct_Emissions_11_in_metric_tons'] - df['GHG_Direct_Emissions_10_in_metric_tons']) / df['GHG_Direct_Emissions_10_in_metric_tons'],\n","        np.nan\n","    )\n","\n","    df['GHG_Direct_Emissions_Growth_Rate_12'] = np.where(\n","        df['GHG_Direct_Emissions_11_in_metric_tons'].notna() & (df['GHG_Direct_Emissions_11_in_metric_tons'] != 0),\n","        (df['GHG_Direct_Emissions_12_in_metric_tons'] - df['GHG_Direct_Emissions_11_in_metric_tons']) / df['GHG_Direct_Emissions_11_in_metric_tons'],\n","        np.nan\n","    )\n","\n","    df['GHG_Direct_Emissions_Growth_Rate_13'] = np.where(\n","        df['GHG_Direct_Emissions_12_in_metric_tons'].notna() & (df['GHG_Direct_Emissions_12_in_metric_tons'] != 0),\n","        (df['GHG_Direct_Emissions_13_in_metric_tons'] - df['GHG_Direct_Emissions_12_in_metric_tons']) / df['GHG_Direct_Emissions_12_in_metric_tons'],\n","        np.nan\n","    )\n","\n","    return df\n","\n","\n","new_features2 = ['GHG_Direct_Emissions_YoY_Change_11','GHG_Direct_Emissions_YoY_Change_12','GHG_Direct_Emissions_YoY_Change_13',\n","                 'GHG_Direct_Emissions_Growth_Rate_11','GHG_Direct_Emissions_Growth_Rate_12','GHG_Direct_Emissions_Growth_Rate_13'\n","                 ]\n","train_df      = create_features2(train_df)\n","test_df       = create_features2(test_df)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"c-zhP_P2OyLx","executionInfo":{"status":"ok","timestamp":1732086152442,"user_tz":-540,"elapsed":85,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["def create_features3(df):\n","    df['TRI_to_GHG_Ratio_10'] = np.where(df['GHG_Direct_Emissions_10_in_metric_tons'].notna(),\n","                                     df['TRI_Air_Emissions_10_in_lbs'] / df['GHG_Direct_Emissions_10_in_metric_tons'],\n","                                     np.nan)\n","\n","    df['TRI_to_GHG_Ratio_11'] = np.where(df['GHG_Direct_Emissions_11_in_metric_tons'].notna(),\n","                                        df['TRI_Air_Emissions_11_in_lbs'] / df['GHG_Direct_Emissions_11_in_metric_tons'],\n","                                        np.nan)\n","\n","    df['TRI_to_GHG_Ratio_12'] = np.where(df['GHG_Direct_Emissions_12_in_metric_tons'].notna(),\n","                                        df['TRI_Air_Emissions_12_in_lbs'] / df['GHG_Direct_Emissions_12_in_metric_tons'],\n","                                        np.nan)\n","\n","    df['TRI_to_GHG_Ratio_13'] = np.where(df['GHG_Direct_Emissions_13_in_metric_tons'].notna(),\n","                                        df['TRI_Air_Emissions_13_in_lbs'] / df['GHG_Direct_Emissions_13_in_metric_tons'],\n","                                        np.nan)\n","    return df\n","\n","\n","\n","train_df      = create_features3(train_df)\n","test_df       = create_features3(test_df)\n","new_features3 = ['TRI_to_GHG_Ratio_10','TRI_to_GHG_Ratio_11','TRI_to_GHG_Ratio_12','TRI_to_GHG_Ratio_13']"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"AxttPGFgO0xh","executionInfo":{"status":"ok","timestamp":1732086152442,"user_tz":-540,"elapsed":84,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["summary_df = train_df.groupby(['Economic_Sector', 'State']).agg({'GHG_Direct_Emissions_14_in_metric_tons': ['mean', 'median', 'max', 'min','count']})\n","\n","summary_df.columns = [\n","                        'GHG_Direct_Emissions_14_in_metric_tons_mean',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_median',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_max',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_min',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_count'\n","                     ]\n","\n","summary_df = summary_df.reset_index()\n","\n","train_df = train_df.merge(summary_df, on=['Economic_Sector', 'State'], how='left')\n","test_df  = test_df.merge(summary_df,  on=['Economic_Sector', 'State'], how='left')"]},{"cell_type":"code","source":["test_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dh8UdsT2MPP3","executionInfo":{"status":"ok","timestamp":1732086152442,"user_tz":-540,"elapsed":83,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"acd016e2-5461-4160-87c5-b62a020b929b"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2508, 41)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["train_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QLLrWBh795MU","executionInfo":{"status":"ok","timestamp":1732086152442,"user_tz":-540,"elapsed":79,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"10d24396-7521-4a46-818f-282c69f6be6a"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4655, 42)"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LotXamPyO3Ve","executionInfo":{"status":"ok","timestamp":1732086152442,"user_tz":-540,"elapsed":76,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"0ef7d7c6-2432-4d56-c24e-37f8733a4a93"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((4655, 42), (2508, 42))"]},"metadata":{},"execution_count":25}],"source":["merged_df = pd.concat((train_df,test_df),axis=0)\n","for cols in ['City','State','County','FIPScode','PrimaryNAICS','Economic_Sector']:\n","    le              = LabelEncoder()\n","    merged_df[cols] = le.fit_transform(merged_df[cols].values.reshape(-1,1))\n","\n","train_df = merged_df.iloc[:train_df.shape[0],:]\n","test_df  = merged_df.iloc[train_df.shape[0]:,:]\n","train_df.shape,test_df.shape"]},{"cell_type":"code","source":["train_df[\"num_missing\"] = train_df.iloc[:, 5:9].isna().any(axis=1).astype(int)\n","test_df[\"num_missing\"] = test_df.iloc[:, 5:9].isna().any(axis=1).astype(int)\n","train_df[\"num_missing\"]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"qRLiaf0PmYtQ","executionInfo":{"status":"ok","timestamp":1732086152442,"user_tz":-540,"elapsed":72,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"b91bfa1d-486c-483d-dba7-5a1426ba8fa0"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       0\n","1       1\n","2       1\n","3       1\n","4       0\n","       ..\n","4650    1\n","4651    1\n","4652    1\n","4653    1\n","4654    1\n","Name: num_missing, Length: 4655, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>num_missing</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4650</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4651</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4652</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4653</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4654</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4655 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["### ここでもうtest_dfの形が違う"],"metadata":{"id":"hIWfVg98LXaY"}},{"cell_type":"code","execution_count":27,"metadata":{"id":"iANX4YJaO58C","executionInfo":{"status":"ok","timestamp":1732086152443,"user_tz":-540,"elapsed":68,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["numerical_columns = [\n","                    'TRI_Air_Emissions_10_in_lbs', 'TRI_Air_Emissions_11_in_lbs',\n","                    'TRI_Air_Emissions_12_in_lbs', 'TRI_Air_Emissions_13_in_lbs','PrimaryNAICS',\n","                    'GHG_Direct_Emissions_10_in_metric_tons', 'GHG_Direct_Emissions_11_in_metric_tons',\n","                    'GHG_Direct_Emissions_12_in_metric_tons', 'GHG_Direct_Emissions_13_in_metric_tons',\n","                    ]\n","lat_lon_columns   = ['Latitude','Longitude']\n","target_columns    = ['GHG_Direct_Emissions_14_in_metric_tons']\n","categorical_columns = ['City','State','County','FIPScode','PrimaryNAICS','Economic_Sector']\n","train_aggregations  =  [\n","                        'GHG_Direct_Emissions_14_in_metric_tons_mean',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_median',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_max',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_min',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_count'\n","                     ]\n","new_features1  = ['TRI_Air_Emissions_YoY_Change_11','TRI_Air_Emissions_YoY_Change_12','TRI_Air_Emissions_YoY_Change_13',\n","                    'TRI_Air_Emissions_Growth_Rate_11','TRI_Air_Emissions_Growth_Rate_12','TRI_Air_Emissions_Growth_Rate_13']\n","\n","new_features2   = ['GHG_Direct_Emissions_YoY_Change_11','GHG_Direct_Emissions_YoY_Change_12','GHG_Direct_Emissions_YoY_Change_13',\n","                  'GHG_Direct_Emissions_Growth_Rate_11','GHG_Direct_Emissions_Growth_Rate_12','GHG_Direct_Emissions_Growth_Rate_13'\n","                  ]\n","new_features3   = ['TRI_to_GHG_Ratio_10','TRI_to_GHG_Ratio_11','TRI_to_GHG_Ratio_12','TRI_to_GHG_Ratio_13']\n","neighbour_feats = ['Economy_Sector_Weighted_Avg','Economic_Sector_Average','Nearest_Weighted_Average','Nearest_Average']\n","\n","\n","train = train_df[numerical_columns+\n","                 lat_lon_columns+\n","                #  categorical_columns+\n","                 new_features1+['Economic_Sector']\n","                #  new_features2\n","               #   new_features3+\n","                #  train_aggregations+\n","               #   neighbour_feats\n","                #  +[\"num_missing\"]\n","                 ].values\n","test  = test_df[numerical_columns+\n","                 lat_lon_columns+\n","                #  categorical_columns+\n","                 new_features1+['Economic_Sector']\n","                #  new_features2\n","               #   new_features3+\n","                #  train_aggregations+\n","               #   neighbour_feats\n","                # +[\"num_missing\"]\n","                 ].values\n","target = train_df[target_columns].values\n"]},{"cell_type":"code","source":["test_df[numerical_columns+\n","                 lat_lon_columns+\n","                #  categorical_columns+\n","                 new_features1+['Economic_Sector']\n","                #  new_features2\n","               #   new_features3+\n","                #  train_aggregations+\n","               #   neighbour_feats\n","        # +[\"num_missing\"]\n","                 ]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"UJ7WlfBikkmS","executionInfo":{"status":"ok","timestamp":1732086152443,"user_tz":-540,"elapsed":60,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"f098f727-e620-46ee-a058-0e02b1a766da"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      TRI_Air_Emissions_10_in_lbs  TRI_Air_Emissions_11_in_lbs  \\\n","0                             NaN                          NaN   \n","1                             NaN                          NaN   \n","2                    28275.061385                 32075.140635   \n","3                    37330.205714                 42503.897432   \n","4                    45310.722699                 39897.800897   \n","...                           ...                          ...   \n","2503                          NaN                          NaN   \n","2504                          NaN                          NaN   \n","2505                 22956.125554                 23592.402994   \n","2506                124460.895022                140816.449347   \n","2507                          NaN                          NaN   \n","\n","      TRI_Air_Emissions_12_in_lbs  TRI_Air_Emissions_13_in_lbs  PrimaryNAICS  \\\n","0                             NaN                          NaN             4   \n","1                             NaN                          NaN           221   \n","2                    26445.792090                 23385.161510           130   \n","3                    43906.102080                 42958.306538            82   \n","4                    40203.428231                 39437.099224           181   \n","...                           ...                          ...           ...   \n","2503                          NaN                          NaN           240   \n","2504                          NaN                          NaN             4   \n","2505                 25069.498286                 24560.172725           132   \n","2506                 93118.705227                130326.946431            98   \n","2507                          NaN                          NaN             3   \n","\n","      GHG_Direct_Emissions_10_in_metric_tons  \\\n","0                               88951.390376   \n","1                                        NaN   \n","2                               84908.372871   \n","3                               49004.603631   \n","4                               84959.769922   \n","...                                      ...   \n","2503                           110523.066755   \n","2504                                     NaN   \n","2505                           166520.232511   \n","2506                            71773.803649   \n","2507                                     NaN   \n","\n","      GHG_Direct_Emissions_11_in_metric_tons  \\\n","0                               65803.021457   \n","1                                        NaN   \n","2                                6212.899604   \n","3                                  52.038452   \n","4                               15351.359676   \n","...                                      ...   \n","2503                            98954.793233   \n","2504                                     NaN   \n","2505                           469732.826538   \n","2506                           936031.894142   \n","2507                           841773.060989   \n","\n","      GHG_Direct_Emissions_12_in_metric_tons  \\\n","0                               2.899329e+04   \n","1                               3.119260e+05   \n","2                               3.473291e+04   \n","3                               1.426237e+04   \n","4                               4.000654e+04   \n","...                                      ...   \n","2503                            3.467008e+06   \n","2504                                     NaN   \n","2505                            8.255855e+04   \n","2506                            3.369613e+05   \n","2507                            4.082144e+06   \n","\n","      GHG_Direct_Emissions_13_in_metric_tons   Latitude   Longitude  \\\n","0                               32965.487915  38.033040  -97.973170   \n","1                              268668.069110  32.316030 -108.606800   \n","2                               39045.247387  41.251500  -78.742440   \n","3                               20204.924986  44.959660  -93.193410   \n","4                               63935.249120  32.818720 -117.125800   \n","...                                      ...        ...         ...   \n","2503                           147802.356027  38.651945  -75.914445   \n","2504                                     NaN  31.361795 -101.776403   \n","2505                            85775.307153  41.005565  -96.154917   \n","2506                           156640.371706  39.364417  -93.449361   \n","2507                           350096.803939  31.591369  -96.216360   \n","\n","      TRI_Air_Emissions_YoY_Change_11  TRI_Air_Emissions_YoY_Change_12  \\\n","0                                 NaN                              NaN   \n","1                                 NaN                              NaN   \n","2                         3800.079250                     -5629.348545   \n","3                         5173.691718                      1402.204648   \n","4                        -5412.921803                       305.627335   \n","...                               ...                              ...   \n","2503                              NaN                              NaN   \n","2504                              NaN                              NaN   \n","2505                       636.277440                      1477.095292   \n","2506                     16355.554326                    -47697.744120   \n","2507                              NaN                              NaN   \n","\n","      TRI_Air_Emissions_YoY_Change_13  TRI_Air_Emissions_Growth_Rate_11  \\\n","0                                 NaN                               NaN   \n","1                                 NaN                               NaN   \n","2                        -3060.630580                          0.134397   \n","3                         -947.795542                          0.138593   \n","4                         -766.329007                         -0.119462   \n","...                               ...                               ...   \n","2503                              NaN                               NaN   \n","2504                              NaN                               NaN   \n","2505                      -509.325561                          0.027717   \n","2506                     37208.241204                          0.131411   \n","2507                              NaN                               NaN   \n","\n","      TRI_Air_Emissions_Growth_Rate_12  TRI_Air_Emissions_Growth_Rate_13  \\\n","0                                  NaN                               NaN   \n","1                                  NaN                               NaN   \n","2                            -0.175505                         -0.115732   \n","3                             0.032990                         -0.021587   \n","4                             0.007660                         -0.019061   \n","...                                ...                               ...   \n","2503                               NaN                               NaN   \n","2504                               NaN                               NaN   \n","2505                          0.062609                         -0.020317   \n","2506                         -0.338723                          0.399579   \n","2507                               NaN                               NaN   \n","\n","      Economic_Sector  \n","0                   9  \n","1                  14  \n","2                   8  \n","3                   8  \n","4                   8  \n","...               ...  \n","2503                1  \n","2504                9  \n","2505                8  \n","2506                8  \n","2507                9  \n","\n","[2508 rows x 18 columns]"],"text/html":["\n","  <div id=\"df-6d831934-2616-43a9-9a2d-5f61d70214c4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TRI_Air_Emissions_10_in_lbs</th>\n","      <th>TRI_Air_Emissions_11_in_lbs</th>\n","      <th>TRI_Air_Emissions_12_in_lbs</th>\n","      <th>TRI_Air_Emissions_13_in_lbs</th>\n","      <th>PrimaryNAICS</th>\n","      <th>GHG_Direct_Emissions_10_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_11_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_12_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_13_in_metric_tons</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>TRI_Air_Emissions_YoY_Change_11</th>\n","      <th>TRI_Air_Emissions_YoY_Change_12</th>\n","      <th>TRI_Air_Emissions_YoY_Change_13</th>\n","      <th>TRI_Air_Emissions_Growth_Rate_11</th>\n","      <th>TRI_Air_Emissions_Growth_Rate_12</th>\n","      <th>TRI_Air_Emissions_Growth_Rate_13</th>\n","      <th>Economic_Sector</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4</td>\n","      <td>88951.390376</td>\n","      <td>65803.021457</td>\n","      <td>2.899329e+04</td>\n","      <td>32965.487915</td>\n","      <td>38.033040</td>\n","      <td>-97.973170</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>221</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.119260e+05</td>\n","      <td>268668.069110</td>\n","      <td>32.316030</td>\n","      <td>-108.606800</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28275.061385</td>\n","      <td>32075.140635</td>\n","      <td>26445.792090</td>\n","      <td>23385.161510</td>\n","      <td>130</td>\n","      <td>84908.372871</td>\n","      <td>6212.899604</td>\n","      <td>3.473291e+04</td>\n","      <td>39045.247387</td>\n","      <td>41.251500</td>\n","      <td>-78.742440</td>\n","      <td>3800.079250</td>\n","      <td>-5629.348545</td>\n","      <td>-3060.630580</td>\n","      <td>0.134397</td>\n","      <td>-0.175505</td>\n","      <td>-0.115732</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>37330.205714</td>\n","      <td>42503.897432</td>\n","      <td>43906.102080</td>\n","      <td>42958.306538</td>\n","      <td>82</td>\n","      <td>49004.603631</td>\n","      <td>52.038452</td>\n","      <td>1.426237e+04</td>\n","      <td>20204.924986</td>\n","      <td>44.959660</td>\n","      <td>-93.193410</td>\n","      <td>5173.691718</td>\n","      <td>1402.204648</td>\n","      <td>-947.795542</td>\n","      <td>0.138593</td>\n","      <td>0.032990</td>\n","      <td>-0.021587</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>45310.722699</td>\n","      <td>39897.800897</td>\n","      <td>40203.428231</td>\n","      <td>39437.099224</td>\n","      <td>181</td>\n","      <td>84959.769922</td>\n","      <td>15351.359676</td>\n","      <td>4.000654e+04</td>\n","      <td>63935.249120</td>\n","      <td>32.818720</td>\n","      <td>-117.125800</td>\n","      <td>-5412.921803</td>\n","      <td>305.627335</td>\n","      <td>-766.329007</td>\n","      <td>-0.119462</td>\n","      <td>0.007660</td>\n","      <td>-0.019061</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>240</td>\n","      <td>110523.066755</td>\n","      <td>98954.793233</td>\n","      <td>3.467008e+06</td>\n","      <td>147802.356027</td>\n","      <td>38.651945</td>\n","      <td>-75.914445</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>31.361795</td>\n","      <td>-101.776403</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>22956.125554</td>\n","      <td>23592.402994</td>\n","      <td>25069.498286</td>\n","      <td>24560.172725</td>\n","      <td>132</td>\n","      <td>166520.232511</td>\n","      <td>469732.826538</td>\n","      <td>8.255855e+04</td>\n","      <td>85775.307153</td>\n","      <td>41.005565</td>\n","      <td>-96.154917</td>\n","      <td>636.277440</td>\n","      <td>1477.095292</td>\n","      <td>-509.325561</td>\n","      <td>0.027717</td>\n","      <td>0.062609</td>\n","      <td>-0.020317</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>124460.895022</td>\n","      <td>140816.449347</td>\n","      <td>93118.705227</td>\n","      <td>130326.946431</td>\n","      <td>98</td>\n","      <td>71773.803649</td>\n","      <td>936031.894142</td>\n","      <td>3.369613e+05</td>\n","      <td>156640.371706</td>\n","      <td>39.364417</td>\n","      <td>-93.449361</td>\n","      <td>16355.554326</td>\n","      <td>-47697.744120</td>\n","      <td>37208.241204</td>\n","      <td>0.131411</td>\n","      <td>-0.338723</td>\n","      <td>0.399579</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>841773.060989</td>\n","      <td>4.082144e+06</td>\n","      <td>350096.803939</td>\n","      <td>31.591369</td>\n","      <td>-96.216360</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 18 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d831934-2616-43a9-9a2d-5f61d70214c4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d831934-2616-43a9-9a2d-5f61d70214c4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d831934-2616-43a9-9a2d-5f61d70214c4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1f8c5706-b8d5-493c-8476-61cf962cd03c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f8c5706-b8d5-493c-8476-61cf962cd03c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1f8c5706-b8d5-493c-8476-61cf962cd03c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"                 ]\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"TRI_Air_Emissions_10_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153260.8934282091,\n        \"min\": 4405.828910812044,\n        \"max\": 1374502.9266120757,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          15151.19740345126,\n          46183.68918687044,\n          21078.80697763863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_11_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50742.80939795908,\n        \"min\": 5343.548841848329,\n        \"max\": 481505.852809956,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          21461.32437823258,\n          48995.95349964959,\n          24962.37197178924\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_12_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96607.92544572477,\n        \"min\": 3144.5571408761243,\n        \"max\": 898432.732338988,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          17311.855440674823,\n          44777.45490159112,\n          16595.45802089126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_13_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109221.25710756132,\n        \"min\": 1221.4376824539213,\n        \"max\": 1010901.828389014,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          11371.572489848208,\n          40829.582779592645,\n          23703.26616989767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93,\n        \"min\": 3,\n        \"max\": 256,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          19,\n          54,\n          144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_10_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 523900.6905247671,\n        \"min\": 134.22630653291708,\n        \"max\": 3927869.397368078,\n        \"num_unique_values\": 2130,\n        \"samples\": [\n          68182.52126620257,\n          882894.9220059533,\n          278999.1032526391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_11_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275363.2669497924,\n        \"min\": 52.03845177487528,\n        \"max\": 2120410.8562870584,\n        \"num_unique_values\": 2297,\n        \"samples\": [\n          100899.59307034814,\n          36649.895737462415,\n          21552.90524045979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_12_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 744804.5468121156,\n        \"min\": 3003.9516055817003,\n        \"max\": 6112087.345974441,\n        \"num_unique_values\": 2371,\n        \"samples\": [\n          285044.4940147917,\n          101373.609689835,\n          1410650.0982454163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_13_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 428452.149925799,\n        \"min\": 222.6384210366596,\n        \"max\": 4292471.519790898,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          68263.16109033479,\n          4316.304107072552,\n          48128.59588285932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.758664967537397,\n        \"min\": 13.463579,\n        \"max\": 71.292071,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          36.1491,\n          29.682045,\n          25.85784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.263441645665505,\n        \"min\": -158.125764,\n        \"max\": 144.678216,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          -96.96397,\n          -84.483991,\n          -98.31008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_YoY_Change_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132183.67237342487,\n        \"min\": -1329969.5777061915,\n        \"max\": 333952.5115859514,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          6310.12697478132,\n          2812.2643127791525,\n          3883.5649941506126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_YoY_Change_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 80618.64993354872,\n        \"min\": -336623.44272716943,\n        \"max\": 850871.4759790034,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          -4149.468937557758,\n          -4218.498598058475,\n          -8366.913950897982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_YoY_Change_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 74884.67231106515,\n        \"min\": -601221.4206468181,\n        \"max\": 545411.1787582343,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          -5940.282950826615,\n          -3947.8721219984727,\n          7107.8081490064105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_Growth_Rate_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7207579109783308,\n        \"min\": -0.977024751458347,\n        \"max\": 12.297084057812512,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          0.4164771144321537,\n          0.060893020074685826,\n          0.18424026550793304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_Growth_Rate_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9090463928764156,\n        \"min\": -0.9148187213807685,\n        \"max\": 26.194933893417353,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          -0.19334635945237422,\n          -0.08609891831350205,\n          -0.3351810461102692\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_Growth_Rate_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.968127330157452,\n        \"min\": -0.9577302233135523,\n        \"max\": 16.365172114519346,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          -0.3431338120389862,\n          -0.088166514391558,\n          0.4282984018915728\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Economic_Sector\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          11,\n          10,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["train_df[\"less_10^4\"] = train_df[\"GHG_Direct_Emissions_14_in_metric_tons\"].apply(lambda x: 1 if x < 10**4 else 0)\n","target_less_10_4 = train_df[\"less_10^4\"].values\n","\n"],"metadata":{"id":"i68OjkDcHrE0","executionInfo":{"status":"ok","timestamp":1732086152443,"user_tz":-540,"elapsed":55,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# def objective_cat(trial, X, y):\n","#     learning_rate = trial.suggest_float(\"learning_rate\", 0.01, 0.1)\n","#     depth = trial.suggest_int(\"depth\", 2, 10)\n","#     l2_leaf_reg = trial.suggest_float(\"l2_leaf_reg\", 1, 10)\n","#     iterations = trial.suggest_int(\"iterations\", 100, 1000)\n","\n","\n","\n","#     model = CatBoostClassifier(\n","#         learning_rate=learning_rate,\n","#         depth=depth,\n","#         l2_leaf_reg=l2_leaf_reg,\n","#         random_state=42,\n","#         iterations=iterations,\n","#         verbose=0\n","#     )\n","\n","\n","#     # K-Fold クロスバリデーションの設定\n","#     kf = KFold(n_splits=15, shuffle=True, random_state=42)\n","#     oof_predictions = np.zeros(len(X))\n","\n","\n","#     # 各Foldでの学習と予測\n","#     for train_idx, valid_idx in kf.split(X, y):\n","#         X_tr, X_val = X[train_idx], X[valid_idx]\n","#         y_tr, y_val = y[train_idx], y[valid_idx]\n","\n","#         # モデルの訓練\n","#         model.fit(X_tr, y_tr)\n","\n","#         # バリデーションデータでの予測\n","#         oof_predictions[valid_idx] = model.predict(X_val)\n","\n","#     # 正解率の計算\n","#     accuracy = accuracy_score(y, oof_predictions)\n","\n","#     return accuracy  # Optuna はこの値を最大化します"],"metadata":{"id":"96s4iFxFIcR0","executionInfo":{"status":"ok","timestamp":1732086152443,"user_tz":-540,"elapsed":54,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# # Create an Optuna study\n","# study = optuna.create_study(\n","#     direction='maximize',\n","# )\n","\n","# # Optimize the study\n","# study.optimize(lambda trial: objective_cat(trial, train, target_less_10_4), n_trials=10)\n","\n","# # Display the best results\n","# print(f\"Best objective value (Accuracy): {study.best_value}\")\n","# print(f\"Best parameters: {study.best_params}\")\n","# print(\"-\" * 50)\n","\n","# # Retrieve the best parameters\n","# best_params = study.best_params\n","# best_params['random_state'] = 0  # For reproducibility\n","\n","# # Initialize the final model with the best parameters\n","# cat0 = CatBoostClassifier(**best_params)\n","# # Fit the final model on the entire dataset\n","# cat0.fit(train, target_less_10_4)\n","# print(f\"Best objective value (Accuracy): {study.best_value}\")\n","\n","# oof_preds = cat0.predict_proba(train)\n","# cat0_pred = cat0.predict_proba(test)\n"],"metadata":{"collapsed":true,"id":"W4gyQimKIziU","executionInfo":{"status":"ok","timestamp":1732086152443,"user_tz":-540,"elapsed":53,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["cat0 = CatBoostClassifier(\n","    iterations=864,\n","    depth=4,\n","    learning_rate=0.02,\n","    l2_leaf_reg=1.2322248317139508,\n","    border_count=254,\n","    bagging_temperature=0.1\n",")\n","\n","cat0.fit(train, target_less_10_4, verbose=0)\n","oof_preds = cat0.predict_proba(train)\n","cat0_pred = cat0.predict_proba(test)"],"metadata":{"id":"XsqEKJiLRKpL","executionInfo":{"status":"ok","timestamp":1732086154835,"user_tz":-540,"elapsed":2444,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["sum(cat0_pred[:, 1] > 0.16)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BKdxQ3IkNyms","executionInfo":{"status":"ok","timestamp":1732086154837,"user_tz":-540,"elapsed":33,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"245d7faa-09a5-4546-bb09-f3f0dccb234f"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["44"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["target"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MI0EOAZDRvGl","executionInfo":{"status":"ok","timestamp":1732086154838,"user_tz":-540,"elapsed":30,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"13848e90-4249-485d-969a-6fb9f45a79f8"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 52973.13994629],\n","       [ 55910.06661677],\n","       [ 55679.54321391],\n","       ...,\n","       [978359.18321926],\n","       [ 27234.34120387],\n","       [194822.07077126]])"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["tmp = 0\n","ave_less_10_4_log = 0\n","max(oof_preds[:, 1])\n","for i in range(len(oof_preds)):\n","    if oof_preds[i, 1] > 0.16 and target[i] < 10**4:\n","        ave_less_10_4_log += np.log1p(target[i])\n","        tmp += 1\n","\n","ave_less_10_4_log /= tmp\n","print(ave_less_10_4_log)\n","ave_less_10_4 = np.expm1(ave_less_10_4_log)[0]\n","ave_less_10_4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oqfTbuz5Mnyq","executionInfo":{"status":"ok","timestamp":1732086154838,"user_tz":-540,"elapsed":26,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"dd670e9e-e1e9-4710-f9a9-384965bdaaa4","collapsed":true},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["[8.49717312]\n"]},{"output_type":"execute_result","data":{"text/plain":["4899.894988873572"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["def show_plot(test_preds, target):\n","# 共通のビンエッジを定義するため、両方のデータの範囲を取得\n","    min_val = min(test_preds.min(), target.min())\n","    max_val = max(test_preds.max(), target.max())\n","\n","# ビンエッジを共通化（例えば、100ビン）\n","    bins = np.logspace(np.log10(min_val), np.log10(max_val), 100)\n","\n","# ヒストグラムを正規化してプロット\n","    plt.figure(figsize=(10, 7))\n","\n","# test_preds のヒストグラム\n","    sns.histplot(test_preds, bins=bins, stat='density', kde=True, color='blue', label='Test Predictions', alpha=0.6)\n","\n","# target のヒストグラム\n","    sns.histplot(target, bins=bins, stat='density', kde=True, color='orange', label='Target', alpha=0.6)\n","\n","# ログスケールを適用\n","    plt.xscale('log')\n","\n","# ラベルとタイトルの設定\n","    plt.xlabel('Values (Log Scale)')\n","    plt.ylabel('Density')\n","    plt.title('Comparison of Test Predictions and Target (Log Scale)')\n","\n","# 凡例の表示\n","    plt.legend()\n","\n","# グリッドの追加（オプション）\n","    plt.grid(True, which=\"both\", ls=\"--\", linewidth=0.5)\n","\n","# プロットの表示\n","    plt.show()"],"metadata":{"id":"p6oBLbtsiGAe","executionInfo":{"status":"ok","timestamp":1732086154839,"user_tz":-540,"elapsed":21,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","execution_count":37,"metadata":{"id":"uMBZvRoDO8EX","executionInfo":{"status":"ok","timestamp":1732086154839,"user_tz":-540,"elapsed":19,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["\n","# def get_models_trained(train, test, target, num_folds):\n","#     kf = KFold(n_splits=num_folds, shuffle=True, random_state=13)\n","\n","#     oof_predictions = np.zeros(len(train))\n","#     test_predictions = np.zeros(len(test))\n","#     sum_model1_error = 0\n","#     sum_model2_error = 0\n","#     sum_model3_error = 0\n","#     sum_model4_error = 0\n","#     goodest_model = {\n","#         \"model1\": 0,\n","#         \"model2\": 0,\n","#         \"model3\": 0,\n","#         \"model4\": 0,\n","#     }\n","\n","#     for fold, (train_index, valid_index) in enumerate(kf.split(train, target)):\n","#         print(f\"Starting Fold {fold + 1}\")\n","#         X_train, X_valid = train[train_index], train[valid_index]\n","#         y_train, y_valid = target[train_index], target[valid_index]\n","\n","#         # モデルと損失の初期化\n","#         model_dict = {}\n","#         loss_dict = {}\n","#         valid_pred_dict = {}\n","\n","#         # モデル1: XGBRegressor\n","#         params1 = {\n","#             \"n_estimators\": 626,\n","#             \"max_depth\": 3,\n","#             \"random_state\": 13,\n","#             \"min_child_weight\": 0.001190123543553736,\n","#             \"learning_rate\": 0.010519736270936835,\n","#             \"subsample\": 0.7304788478701394,\n","#             \"colsample_bylevel\": 0.604447278915981,\n","#             \"colsample_bytree\": 0.7616852136157319,\n","#             \"reg_alpha\": 0.115175569924065,\n","#             \"reg_lambda\": 0.07155347824929895\n","#         }\n","#         model1 = XGBRegressor(**params1)\n","\n","#         # モデル2: catboost\n","#         params2 = {'iterations': 864,\n","#                    'depth': 4,\n","#                    'learning_rate': 0.02896173229206305,\n","#                    'l2_leaf_reg': 1.2322248317139508,\n","#                    'border_count': 254,\n","#                    'bagging_temperature': 0.14851401382294827,\n","#                    'random_strength': 0.9638662135548094,\n","#                    'random_state': 42}\n","#         model2 = CatBoostRegressor(**params2)\n","\n","#         # モデル3: LGBMRegressor\n","#         # params3 = {\n","#         #     \"n_estimators\": 56,\n","#         #     \"random_state\": 13,\n","#         #     \"verbose\": -1,\n","#         # }\n","#         params3 ={\n","#             \"n_estimators\": 897,\n","#             \"max_depth\": 4,\n","#             \"min_child_weight\": 1.9636282677053687,\n","#             \"learning_rate\": 0.006151391207761763,\n","#             \"subsample\": 0.8251910979922186,\n","#             \"colsample_bylevel\": 0.6454805596196158,\n","#             \"colsample_bytree\": 0.598042694363472,\n","#             \"reg_alpha\": 2.1719824223479005,\n","#             \"reg_lambda\": 0.009192236594241635,\n","#         }\n","#         model3 = XGBRegressor(**params3)\n","\n","#         params4 = {\n","#             \"iterations\": 940,\n","#             \"depth\": 3,\n","#             \"learning_rate\": 0.019908189422344794,\n","#             \"l2_leaf_reg\": 1,\n","#             \"bagging_temperature\": 0.5063893392618839,\n","#             \"min_data_in_leaf\": 1,\n","#         }\n","#         model4 = CatBoostRegressor(**params4)\n","#         # モデル1の訓練と予測\n","#         model1.fit(X_train, np.log1p(y_train), verbose=0)\n","#         valid_preds1 = np.expm1(model1.predict(X_valid))\n","#         rmsle1 = np.sqrt(mean_squared_log_error(y_valid, valid_preds1))\n","#         print(f\"Fold {fold + 1} RMSLE for model1 = {rmsle1}\")\n","\n","#         # モデル2の訓練と予測\n","#         model2.fit(X_train, np.log1p(y_train), verbose=0)\n","#         valid_preds2 = np.expm1(model2.predict(X_valid))\n","#         rmsle2 = np.sqrt(mean_squared_log_error(y_valid, valid_preds2))\n","#         print(f\"Fold {fold + 1} RMSLE for model2 = {rmsle2}\")\n","\n","#         # モデル3の訓練と予測\n","#         model3.fit(X_train, np.log1p(y_train), verbose=0)\n","#         valid_preds3 = np.expm1(model3.predict(X_valid))\n","#         rmsle3 = np.sqrt(mean_squared_log_error(y_valid, valid_preds3))\n","#         print(f\"Fold {fold + 1} RMSLE for model3 = {rmsle3}\")\n","\n","#         # モデル４\n","#         model4.fit(X_train, np.log1p(y_train), verbose=0)\n","#         valid_preds4 = np.expm1(model4.predict(X_valid))\n","#         rmsle4 = np.sqrt(mean_squared_log_error(y_valid, valid_preds4))\n","#         print(f\"Fold {fold + 1} RMSLE for model4 = {rmsle4}\")\n","\n","\n","#         # 損失とモデルの保存\n","#         loss_dict['model1'] = rmsle1\n","#         loss_dict['model2'] = rmsle2\n","#         loss_dict['model3'] = rmsle3\n","#         loss_dict['model4'] = rmsle4\n","\n","#         sum_model1_error += rmsle1\n","#         sum_model2_error += rmsle2\n","#         sum_model3_error += rmsle3\n","#         sum_model4_error += rmsle4\n","\n","#         model_dict['model1'] = model1\n","#         model_dict['model2'] = model2\n","#         model_dict['model3'] = model3\n","#         model_dict['model4'] = model4\n","\n","#         # バリデーション予測の保存\n","#         valid_pred_dict['model1'] = valid_preds1\n","#         valid_pred_dict['model2'] = valid_preds2\n","#         valid_pred_dict['model3'] = valid_preds3\n","#         valid_pred_dict['model4'] = valid_preds4\n","\n","#         # 平均予測と損失の計算\n","#         valid_preds_mean = np.mean(list(valid_pred_dict.values()), axis=0)\n","#         rmsle_mean = np.sqrt(mean_squared_log_error(y_valid, valid_preds_mean))\n","#         print(f\"Fold {fold + 1} Average RMSLE = {rmsle_mean}\")\n","\n","#         # 最も損失が小さいモデルの選択\n","#         min_loss_model = min(loss_dict, key=loss_dict.get)\n","#         best_model = model_dict[min_loss_model]\n","#         valid_preds_best_model = np.expm1(best_model.predict(X_valid))\n","#         rmsle_best = np.sqrt(mean_squared_log_error(y_valid, valid_preds_best_model))\n","\n","#         goodest_model[min_loss_model] += 1\n","#         print(\"best_model:\", best_model)\n","#         print(\"min_loss_model:\", min_loss_model)\n","#         print(f\"Fold {fold + 1} RMSLE for the best model = {rmsle_best}\")\n","\n","\n","#         # 平均損失と最良損失の比較\n","#         if rmsle_mean > rmsle_best:\n","#             print(f\"The average RMSLE is {rmsle_mean} while the best RMSLE is {rmsle_best} and we proceed with the model with best RMSLE\")\n","#             oof_predictions[valid_index] = valid_preds_best_model\n","#             test_preds = best_model.predict(test)\n","#             test_predictions += (test_preds) / kf.n_splits\n","#         else:\n","#             print(f\"The average RMSLE is {rmsle_mean} while the best RMSLE is {rmsle_best} and we proceed with averaging of all models\")\n","#             output_predictions = [model.predict(test) for model in model_dict.values()]\n","#             output_preds = np.mean(output_predictions, axis=0)\n","#             test_predictions += output_preds / kf.n_splits\n","#             oof_predictions[valid_index] = valid_preds_mean\n","\n","#         # メモリの解放\n","#         del X_train, X_valid, y_train, y_valid, model1, model2, model3, model4\n","#         gc.collect()\n","\n","#         print('---------------\\n')\n","\n","#     # 最終的なOOF RMSLEの計算\n","#     final_RMSLE = np.sqrt(mean_squared_log_error(target, oof_predictions))\n","#     print(f\"OOF RMSLE = {final_RMSLE}\")\n","\n","#     # テスト予測の逆変換\n","#     final_test_predictions = np.expm1(test_predictions)\n","\n","#     print(f\"sum_model1_error: {sum_model1_error}\")\n","#     print(f\"sum_model2_error: {sum_model2_error}\")\n","#     print(f\"sum_model3_error: {sum_model3_error}\")\n","#     print(f\"sum_model4_error: {sum_model4_error}\")\n","#     print(\"goodest_model;\", goodest_model)\n","#     return oof_predictions, final_test_predictions"]},{"cell_type":"code","source":["from itertools import combinations\n","\n","def get_models_trained(train, test, target, num_folds):\n","    kf = KFold(n_splits=num_folds, shuffle=True, random_state=13)\n","\n","    oof_predictions = np.zeros(len(train))\n","    test_predictions = np.zeros(len(test))\n","\n","    # エラーの累計を保持する辞書\n","    sum_error = {}\n","    # 各組み合わせの選択回数を保持する辞書\n","    combination_count = {}\n","\n","    # 個別モデルの名前リスト\n","    model_names = [\"model1\", \"model2\", \"model3\", \"model4\"]\n","\n","    # 全ての組み合わせを生成（1, 2, 3, 4モデル）\n","    all_combinations = []\n","    for r in range(1, 5):\n","        all_combinations.extend(combinations(model_names, r))\n","\n","    # 初期化\n","    for comb in all_combinations:\n","        sum_error[comb] = 0\n","        combination_count[comb] = 0\n","\n","    for fold, (train_index, valid_index) in enumerate(kf.split(train, target)):\n","        print(f\"Starting Fold {fold + 1}\")\n","        X_train, X_valid = train[train_index], train[valid_index]\n","        y_train, y_valid = target[train_index], target[valid_index]\n","\n","        # モデルと損失の初期化\n","        model_dict = {}\n","        loss_dict = {}\n","        valid_pred_dict = {}\n","\n","        # モデル1: XGBRegressor\n","        params1 = {\n","            \"n_estimators\": 626,\n","            \"max_depth\": 3,\n","            \"random_state\": 13,\n","            \"min_child_weight\": 0.001190123543553736,\n","            \"learning_rate\": 0.010519736270936835,\n","            \"subsample\": 0.7304788478701394,\n","            \"colsample_bylevel\": 0.604447278915981,\n","            \"colsample_bytree\": 0.7616852136157319,\n","            \"reg_alpha\": 0.115175569924065,\n","            \"reg_lambda\": 0.07155347824929895\n","        }\n","        model1 = XGBRegressor(**params1)\n","\n","        # モデル2: CatBoostRegressor\n","        params2 = {'iterations': 864,\n","                   'depth': 4,\n","                   'learning_rate': 0.02896173229206305,\n","                   'l2_leaf_reg': 1.2322248317139508,\n","                   'border_count': 254,\n","                   'bagging_temperature': 0.14851401382294827,\n","                   'random_strength': 0.9638662135548094,\n","                   'random_state': 13}\n","        model2 = CatBoostRegressor(**params2, verbose=0)\n","\n","        # モデル3: XGBRegressor\n","        params3 ={\n","            \"n_estimators\": 897,\n","            \"max_depth\": 4,\n","            \"min_child_weight\": 1.9636282677053687,\n","            \"learning_rate\": 0.006151391207761763,\n","            \"subsample\": 0.8251910979922186,\n","            \"colsample_bylevel\": 0.6454805596196158,\n","            \"colsample_bytree\": 0.598042694363472,\n","            \"reg_alpha\": 2.1719824223479005,\n","            \"reg_lambda\": 0.009192236594241635,\n","        }\n","        model3 = XGBRegressor(**params3)\n","\n","        # モデル4: CatBoostRegressor\n","        params4 = {\n","            \"iterations\": 940,\n","            \"depth\": 3,\n","            \"learning_rate\": 0.019908189422344794,\n","            \"l2_leaf_reg\": 1,\n","            \"bagging_temperature\": 0.5063893392618839,\n","            \"min_data_in_leaf\": 1,\n","            'random_state': 42\n","        }\n","        model4 = CatBoostRegressor(**params4, verbose=0)\n","\n","        # 各モデルの訓練と予測\n","        models = {\n","            \"model1\": model1,\n","            \"model2\": model2,\n","            \"model3\": model3,\n","            \"model4\": model4\n","        }\n","\n","        for name, model in models.items():\n","            model.fit(X_train, np.log1p(y_train))\n","            preds = np.expm1(model.predict(X_valid))\n","            rmsle = np.sqrt(mean_squared_log_error(y_valid, preds))\n","            print(f\"Fold {fold + 1} RMSLE for {name} = {rmsle}\")\n","            loss_dict[name] = rmsle\n","            valid_pred_dict[name] = preds\n","            sum_error[(name,)] += rmsle\n","\n","        # すべての2モデルおよび3モデルの組み合わせを評価\n","        for r in [2, 3]:\n","            for comb in combinations(model_names, r):\n","                # 平均予測\n","                preds_comb = np.mean([valid_pred_dict[model] for model in comb], axis=0)\n","                rmsle_comb = np.sqrt(mean_squared_log_error(y_valid, preds_comb))\n","                print(f\"Fold {fold + 1} RMSLE for {comb} = {rmsle_comb}\")\n","                loss_dict[comb] = rmsle_comb\n","                valid_pred_dict[comb] = preds_comb\n","                sum_error[comb] += rmsle_comb\n","\n","        # 全モデルのアンサンブル\n","        preds_all = np.mean([valid_pred_dict[model] for model in model_names], axis=0)\n","        rmsle_all = np.sqrt(mean_squared_log_error(y_valid, preds_all))\n","        print(f\"Fold {fold + 1} RMSLE for all models ensemble = {rmsle_all}\")\n","        loss_dict[tuple(model_names)] = rmsle_all\n","        valid_pred_dict[tuple(model_names)] = preds_all\n","        sum_error[tuple(model_names)] += rmsle_all\n","\n","        # 最適な組み合わせを選択\n","        best_combination = min(loss_dict, key=loss_dict.get)\n","        best_rmsle = loss_dict[best_combination]\n","        print(f\"Fold {fold + 1} best combination: {best_combination} with RMSLE = {best_rmsle}\")\n","\n","\n","        # OOF予測とテスト予測の更新\n","        if isinstance(best_combination, tuple):\n","            # 複数モデルのアンサンブル\n","            oof_predictions[valid_index] = valid_pred_dict[best_combination]\n","            test_preds = np.mean([models[model].predict(test) for model in best_combination], axis=0)\n","        else:\n","            # 単一モデル\n","            oof_predictions[valid_index] = valid_pred_dict[best_combination]\n","            test_preds = models[best_combination].predict(test)\n","\n","        test_predictions += test_preds / kf.n_splits\n","\n","        # メモリの解放\n","        del X_train, X_valid, y_train, y_valid, model1, model2, model3, model4\n","        gc.collect()\n","\n","        print('---------------\\n')\n","\n","    # 最終的なOOF RMSLEの計算\n","    final_RMSLE = np.sqrt(mean_squared_log_error(target, oof_predictions))\n","    print(f\"OOF RMSLE = {final_RMSLE}\")\n","\n","    # テスト予測の逆変換\n","    final_test_predictions = np.expm1(test_predictions)\n","\n","    # 各組み合わせの累積エラーと選択回数を表示\n","    print(\"Sum of RMSLE for each combination:\")\n","    for comb, error in sum_error.items():\n","        print(f\"{comb}: {error}\")\n","\n","    # print(\"\\nNumber of times each combination was selected:\")\n","    # for comb, count in combination_count.items():\n","    #     print(f\"{comb}: {count}\")\n","\n","    return oof_predictions, final_test_predictions"],"metadata":{"id":"npY-9s7IJgmA","executionInfo":{"status":"ok","timestamp":1732086154839,"user_tz":-540,"elapsed":18,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["oof_predictions,test_preds = get_models_trained(train,test,target,30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CX_-2Jn2uocX","executionInfo":{"status":"ok","timestamp":1732086356636,"user_tz":-540,"elapsed":201814,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"0127ba4a-d165-4f7b-b002-ff444083f7c1"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting Fold 1\n","Fold 1 RMSLE for model1 = 0.6784038334722061\n","Fold 1 RMSLE for model2 = 0.6767784754194875\n","Fold 1 RMSLE for model3 = 0.6715262552466449\n","Fold 1 RMSLE for model4 = 0.679357894809126\n","Fold 1 RMSLE for ('model1', 'model2') = 0.6752056515565378\n","Fold 1 RMSLE for ('model1', 'model3') = 0.6747116258817866\n","Fold 1 RMSLE for ('model1', 'model4') = 0.6770529557231997\n","Fold 1 RMSLE for ('model2', 'model3') = 0.6719978031425304\n","Fold 1 RMSLE for ('model2', 'model4') = 0.67731006645696\n","Fold 1 RMSLE for ('model3', 'model4') = 0.6736443760361027\n","Fold 1 RMSLE for ('model1', 'model2', 'model3') = 0.6734750449436062\n","Fold 1 RMSLE for ('model1', 'model2', 'model4') = 0.6759189006092295\n","Fold 1 RMSLE for ('model1', 'model3', 'model4') = 0.6747553454606018\n","Fold 1 RMSLE for ('model2', 'model3', 'model4') = 0.6737544583396881\n","Fold 1 RMSLE for all models ensemble = 0.6742256933771278\n","Fold 1 best combination: model3 with RMSLE = 0.6715262552466449\n","---------------\n","\n","Starting Fold 2\n","Fold 2 RMSLE for model1 = 0.7420926269029038\n","Fold 2 RMSLE for model2 = 0.7534279379669989\n","Fold 2 RMSLE for model3 = 0.746758951797034\n","Fold 2 RMSLE for model4 = 0.7497956390856354\n","Fold 2 RMSLE for ('model1', 'model2') = 0.7457212822034291\n","Fold 2 RMSLE for ('model1', 'model3') = 0.7440916222532664\n","Fold 2 RMSLE for ('model1', 'model4') = 0.744768173737117\n","Fold 2 RMSLE for ('model2', 'model3') = 0.7477071906325787\n","Fold 2 RMSLE for ('model2', 'model4') = 0.7510260553087428\n","Fold 2 RMSLE for ('model3', 'model4') = 0.7466055913316941\n","Fold 2 RMSLE for ('model1', 'model2', 'model3') = 0.7452907856561068\n","Fold 2 RMSLE for ('model1', 'model2', 'model4') = 0.7467490248377949\n","Fold 2 RMSLE for ('model1', 'model3', 'model4') = 0.744789430781482\n","Fold 2 RMSLE for ('model2', 'model3', 'model4') = 0.7479403480172104\n","Fold 2 RMSLE for all models ensemble = 0.7459622774595656\n","Fold 2 best combination: model1 with RMSLE = 0.7420926269029038\n","---------------\n","\n","Starting Fold 3\n","Fold 3 RMSLE for model1 = 0.621770042843018\n","Fold 3 RMSLE for model2 = 0.6350182084465013\n","Fold 3 RMSLE for model3 = 0.6252502891650868\n","Fold 3 RMSLE for model4 = 0.6328483213727026\n","Fold 3 RMSLE for ('model1', 'model2') = 0.6253268950603571\n","Fold 3 RMSLE for ('model1', 'model3') = 0.6232599076046\n","Fold 3 RMSLE for ('model1', 'model4') = 0.625317391042561\n","Fold 3 RMSLE for ('model2', 'model3') = 0.6273056556196801\n","Fold 3 RMSLE for ('model2', 'model4') = 0.632869272565781\n","Fold 3 RMSLE for ('model3', 'model4') = 0.6272213462879854\n","Fold 3 RMSLE for ('model1', 'model2', 'model3') = 0.6244371649002435\n","Fold 3 RMSLE for ('model1', 'model2', 'model4') = 0.6272095910012706\n","Fold 3 RMSLE for ('model1', 'model3', 'model4') = 0.6247512146710548\n","Fold 3 RMSLE for ('model2', 'model3', 'model4') = 0.6285322002383773\n","Fold 3 RMSLE for all models ensemble = 0.6259106179742481\n","Fold 3 best combination: model1 with RMSLE = 0.621770042843018\n","---------------\n","\n","Starting Fold 4\n","Fold 4 RMSLE for model1 = 0.7216578366377243\n","Fold 4 RMSLE for model2 = 0.7287943379688201\n","Fold 4 RMSLE for model3 = 0.7237829051313501\n","Fold 4 RMSLE for model4 = 0.7237909914332836\n","Fold 4 RMSLE for ('model1', 'model2') = 0.7230121407814527\n","Fold 4 RMSLE for ('model1', 'model3') = 0.7223449700351936\n","Fold 4 RMSLE for ('model1', 'model4') = 0.7214072798587501\n","Fold 4 RMSLE for ('model2', 'model3') = 0.7242265298826621\n","Fold 4 RMSLE for ('model2', 'model4') = 0.7256881403879082\n","Fold 4 RMSLE for ('model3', 'model4') = 0.7222852337617316\n","Fold 4 RMSLE for ('model1', 'model2', 'model3') = 0.7226685472802307\n","Fold 4 RMSLE for ('model1', 'model2', 'model4') = 0.7229319459940068\n","Fold 4 RMSLE for ('model1', 'model3', 'model4') = 0.7216498720403094\n","Fold 4 RMSLE for ('model2', 'model3', 'model4') = 0.7236265605006283\n","Fold 4 RMSLE for all models ensemble = 0.7225036702460937\n","Fold 4 best combination: ('model1', 'model4') with RMSLE = 0.7214072798587501\n","---------------\n","\n","Starting Fold 5\n","Fold 5 RMSLE for model1 = 0.8362554007920471\n","Fold 5 RMSLE for model2 = 0.8312495303846146\n","Fold 5 RMSLE for model3 = 0.8306862727069091\n","Fold 5 RMSLE for model4 = 0.8284814094121378\n","Fold 5 RMSLE for ('model1', 'model2') = 0.8326964952096033\n","Fold 5 RMSLE for ('model1', 'model3') = 0.833131045164704\n","Fold 5 RMSLE for ('model1', 'model4') = 0.831359470133164\n","Fold 5 RMSLE for ('model2', 'model3') = 0.8296110247273791\n","Fold 5 RMSLE for ('model2', 'model4') = 0.8291264225094773\n","Fold 5 RMSLE for ('model3', 'model4') = 0.8279399575994054\n","Fold 5 RMSLE for ('model1', 'model2', 'model3') = 0.8314704178970773\n","Fold 5 RMSLE for ('model1', 'model2', 'model4') = 0.8307667708352697\n","Fold 5 RMSLE for ('model1', 'model3', 'model4') = 0.8304349026074695\n","Fold 5 RMSLE for ('model2', 'model3', 'model4') = 0.8285056868235326\n","Fold 5 RMSLE for all models ensemble = 0.8301229610275275\n","Fold 5 best combination: ('model3', 'model4') with RMSLE = 0.8279399575994054\n","---------------\n","\n","Starting Fold 6\n","Fold 6 RMSLE for model1 = 0.7974768186521537\n","Fold 6 RMSLE for model2 = 0.8125807469175039\n","Fold 6 RMSLE for model3 = 0.7919462044203496\n","Fold 6 RMSLE for model4 = 0.8022894984759071\n","Fold 6 RMSLE for ('model1', 'model2') = 0.8023151529421958\n","Fold 6 RMSLE for ('model1', 'model3') = 0.7944056779262473\n","Fold 6 RMSLE for ('model1', 'model4') = 0.7985728366979115\n","Fold 6 RMSLE for ('model2', 'model3') = 0.7995222456062431\n","Fold 6 RMSLE for ('model2', 'model4') = 0.806540632855364\n","Fold 6 RMSLE for ('model3', 'model4') = 0.7956639618500199\n","Fold 6 RMSLE for ('model1', 'model2', 'model3') = 0.7981540221261639\n","Fold 6 RMSLE for ('model1', 'model2', 'model4') = 0.8019322154239177\n","Fold 6 RMSLE for ('model1', 'model3', 'model4') = 0.7958834471393572\n","Fold 6 RMSLE for ('model2', 'model3', 'model4') = 0.7999943564332154\n","Fold 6 RMSLE for all models ensemble = 0.798740053621454\n","Fold 6 best combination: model3 with RMSLE = 0.7919462044203496\n","---------------\n","\n","Starting Fold 7\n","Fold 7 RMSLE for model1 = 0.7372797043150328\n","Fold 7 RMSLE for model2 = 0.7393063246810462\n","Fold 7 RMSLE for model3 = 0.7349761251054828\n","Fold 7 RMSLE for model4 = 0.731663402164834\n","Fold 7 RMSLE for ('model1', 'model2') = 0.7368663127953325\n","Fold 7 RMSLE for ('model1', 'model3') = 0.7358510336722073\n","Fold 7 RMSLE for ('model1', 'model4') = 0.7333503974305591\n","Fold 7 RMSLE for ('model2', 'model3') = 0.735670505417809\n","Fold 7 RMSLE for ('model2', 'model4') = 0.7347037727426406\n","Fold 7 RMSLE for ('model3', 'model4') = 0.7319977101460218\n","Fold 7 RMSLE for ('model1', 'model2', 'model3') = 0.7357787248230635\n","Fold 7 RMSLE for ('model1', 'model2', 'model4') = 0.734600712990598\n","Fold 7 RMSLE for ('model1', 'model3', 'model4') = 0.7334349898761093\n","Fold 7 RMSLE for ('model2', 'model3', 'model4') = 0.7337236412859331\n","Fold 7 RMSLE for all models ensemble = 0.7342098883680894\n","Fold 7 best combination: model4 with RMSLE = 0.731663402164834\n","---------------\n","\n","Starting Fold 8\n","Fold 8 RMSLE for model1 = 0.7198559883796454\n","Fold 8 RMSLE for model2 = 0.7371628373067364\n","Fold 8 RMSLE for model3 = 0.730435559769375\n","Fold 8 RMSLE for model4 = 0.726209727079667\n","Fold 8 RMSLE for ('model1', 'model2') = 0.7263483013712874\n","Fold 8 RMSLE for ('model1', 'model3') = 0.7244626915575699\n","Fold 8 RMSLE for ('model1', 'model4') = 0.7217309901012341\n","Fold 8 RMSLE for ('model2', 'model3') = 0.7311287582248693\n","Fold 8 RMSLE for ('model2', 'model4') = 0.7308271524797724\n","Fold 8 RMSLE for ('model3', 'model4') = 0.726308681471785\n","Fold 8 RMSLE for ('model1', 'model2', 'model3') = 0.7268152155489692\n","Fold 8 RMSLE for ('model1', 'model2', 'model4') = 0.7258104577272677\n","Fold 8 RMSLE for ('model1', 'model3', 'model4') = 0.7237517354132008\n","Fold 8 RMSLE for ('model2', 'model3', 'model4') = 0.7288195024461727\n","Fold 8 RMSLE for all models ensemble = 0.726058147220714\n","Fold 8 best combination: model1 with RMSLE = 0.7198559883796454\n","---------------\n","\n","Starting Fold 9\n","Fold 9 RMSLE for model1 = 0.8187851493347977\n","Fold 9 RMSLE for model2 = 0.8333912261783811\n","Fold 9 RMSLE for model3 = 0.8145620509847936\n","Fold 9 RMSLE for model4 = 0.8279124593304676\n","Fold 9 RMSLE for ('model1', 'model2') = 0.8244964181869217\n","Fold 9 RMSLE for ('model1', 'model3') = 0.8164524646900639\n","Fold 9 RMSLE for ('model1', 'model4') = 0.8221686222990884\n","Fold 9 RMSLE for ('model2', 'model3') = 0.8223987448686918\n","Fold 9 RMSLE for ('model2', 'model4') = 0.8301262278410655\n","Fold 9 RMSLE for ('model3', 'model4') = 0.8200848877789333\n","Fold 9 RMSLE for ('model1', 'model2', 'model3') = 0.8207523259819282\n","Fold 9 RMSLE for ('model1', 'model2', 'model4') = 0.8252074039480304\n","Fold 9 RMSLE for ('model1', 'model3', 'model4') = 0.8192972296640771\n","Fold 9 RMSLE for ('model2', 'model3', 'model4') = 0.8238216075265352\n","Fold 9 RMSLE for all models ensemble = 0.8220943042971266\n","Fold 9 best combination: model3 with RMSLE = 0.8145620509847936\n","---------------\n","\n","Starting Fold 10\n","Fold 10 RMSLE for model1 = 0.8544164163004332\n","Fold 10 RMSLE for model2 = 0.8547586053229296\n","Fold 10 RMSLE for model3 = 0.8461976952144079\n","Fold 10 RMSLE for model4 = 0.8469435633203777\n","Fold 10 RMSLE for ('model1', 'model2') = 0.8530259127789457\n","Fold 10 RMSLE for ('model1', 'model3') = 0.8499817412820145\n","Fold 10 RMSLE for ('model1', 'model4') = 0.8499451294045984\n","Fold 10 RMSLE for ('model2', 'model3') = 0.8488539461498478\n","Fold 10 RMSLE for ('model2', 'model4') = 0.8501054134562\n","Fold 10 RMSLE for ('model3', 'model4') = 0.8455343149458235\n","Fold 10 RMSLE for ('model1', 'model2', 'model3') = 0.8502381355547739\n","Fold 10 RMSLE for ('model1', 'model2', 'model4') = 0.850683906586641\n","Fold 10 RMSLE for ('model1', 'model3', 'model4') = 0.8482599112371274\n","Fold 10 RMSLE for ('model2', 'model3', 'model4') = 0.8477796023914234\n","Fold 10 RMSLE for all models ensemble = 0.8490741181172388\n","Fold 10 best combination: ('model3', 'model4') with RMSLE = 0.8455343149458235\n","---------------\n","\n","Starting Fold 11\n","Fold 11 RMSLE for model1 = 0.7286782888318745\n","Fold 11 RMSLE for model2 = 0.7426047854680201\n","Fold 11 RMSLE for model3 = 0.7359569394694737\n","Fold 11 RMSLE for model4 = 0.727616048397684\n","Fold 11 RMSLE for ('model1', 'model2') = 0.7330189559552197\n","Fold 11 RMSLE for ('model1', 'model3') = 0.7319098086986239\n","Fold 11 RMSLE for ('model1', 'model4') = 0.7262711893296842\n","Fold 11 RMSLE for ('model2', 'model3') = 0.7362267289577054\n","Fold 11 RMSLE for ('model2', 'model4') = 0.7337916166323157\n","Fold 11 RMSLE for ('model3', 'model4') = 0.7292237923784499\n","Fold 11 RMSLE for ('model1', 'model2', 'model3') = 0.7329733313538097\n","Fold 11 RMSLE for ('model1', 'model2', 'model4') = 0.7303899881353858\n","Fold 11 RMSLE for ('model1', 'model3', 'model4') = 0.7285577742239407\n","Fold 11 RMSLE for ('model2', 'model3', 'model4') = 0.732343695416678\n","Fold 11 RMSLE for all models ensemble = 0.7307271935958202\n","Fold 11 best combination: ('model1', 'model4') with RMSLE = 0.7262711893296842\n","---------------\n","\n","Starting Fold 12\n","Fold 12 RMSLE for model1 = 0.8472367867945148\n","Fold 12 RMSLE for model2 = 0.8455053528899659\n","Fold 12 RMSLE for model3 = 0.8434514336918321\n","Fold 12 RMSLE for model4 = 0.834864052291283\n","Fold 12 RMSLE for ('model1', 'model2') = 0.8451247304859005\n","Fold 12 RMSLE for ('model1', 'model3') = 0.8449473733141813\n","Fold 12 RMSLE for ('model1', 'model4') = 0.839971748918783\n","Fold 12 RMSLE for ('model2', 'model3') = 0.843074984582582\n","Fold 12 RMSLE for ('model2', 'model4') = 0.8395825923916187\n","Fold 12 RMSLE for ('model3', 'model4') = 0.837683152417391\n","Fold 12 RMSLE for ('model1', 'model2', 'model3') = 0.8440291086344508\n","Fold 12 RMSLE for ('model1', 'model2', 'model4') = 0.8412389414693773\n","Fold 12 RMSLE for ('model1', 'model3', 'model4') = 0.840531807800439\n","Fold 12 RMSLE for ('model2', 'model3', 'model4') = 0.8397340699442989\n","Fold 12 RMSLE for all models ensemble = 0.8412097989682242\n","Fold 12 best combination: model4 with RMSLE = 0.834864052291283\n","---------------\n","\n","Starting Fold 13\n","Fold 13 RMSLE for model1 = 0.7014934991701399\n","Fold 13 RMSLE for model2 = 0.7094987275144542\n","Fold 13 RMSLE for model3 = 0.6990876391913358\n","Fold 13 RMSLE for model4 = 0.6977093545148986\n","Fold 13 RMSLE for ('model1', 'model2') = 0.7022130038361122\n","Fold 13 RMSLE for ('model1', 'model3') = 0.6998375480928214\n","Fold 13 RMSLE for ('model1', 'model4') = 0.6979853255783122\n","Fold 13 RMSLE for ('model2', 'model3') = 0.7004051957862472\n","Fold 13 RMSLE for ('model2', 'model4') = 0.7022213448841564\n","Fold 13 RMSLE for ('model3', 'model4') = 0.6963947437477579\n","Fold 13 RMSLE for ('model1', 'model2', 'model3') = 0.6999377034077714\n","Fold 13 RMSLE for ('model1', 'model2', 'model4') = 0.7001309531910203\n","Fold 13 RMSLE for ('model1', 'model3', 'model4') = 0.6976015258205058\n","Fold 13 RMSLE for ('model2', 'model3', 'model4') = 0.6988820649987375\n","Fold 13 RMSLE for all models ensemble = 0.6987871622828642\n","Fold 13 best combination: ('model3', 'model4') with RMSLE = 0.6963947437477579\n","---------------\n","\n","Starting Fold 14\n","Fold 14 RMSLE for model1 = 0.8560263347426316\n","Fold 14 RMSLE for model2 = 0.8529430342666775\n","Fold 14 RMSLE for model3 = 0.858670796372206\n","Fold 14 RMSLE for model4 = 0.8502871864631124\n","Fold 14 RMSLE for ('model1', 'model2') = 0.8523157970789315\n","Fold 14 RMSLE for ('model1', 'model3') = 0.8570126369589237\n","Fold 14 RMSLE for ('model1', 'model4') = 0.8513952951489017\n","Fold 14 RMSLE for ('model2', 'model3') = 0.8528870826050992\n","Fold 14 RMSLE for ('model2', 'model4') = 0.8507667000380742\n","Fold 14 RMSLE for ('model3', 'model4') = 0.8520779658989756\n","Fold 14 RMSLE for ('model1', 'model2', 'model3') = 0.8533654282079672\n","Fold 14 RMSLE for ('model1', 'model2', 'model4') = 0.8509924496698251\n","Fold 14 RMSLE for ('model1', 'model3', 'model4') = 0.852963816891065\n","Fold 14 RMSLE for ('model2', 'model3', 'model4') = 0.8512875964766163\n","Fold 14 RMSLE for all models ensemble = 0.8518613731047476\n","Fold 14 best combination: model4 with RMSLE = 0.8502871864631124\n","---------------\n","\n","Starting Fold 15\n","Fold 15 RMSLE for model1 = 0.6568057269157318\n","Fold 15 RMSLE for model2 = 0.6711071930959135\n","Fold 15 RMSLE for model3 = 0.6565127940055163\n","Fold 15 RMSLE for model4 = 0.6576426697269212\n","Fold 15 RMSLE for ('model1', 'model2') = 0.6618975398190443\n","Fold 15 RMSLE for ('model1', 'model3') = 0.6564214399562032\n","Fold 15 RMSLE for ('model1', 'model4') = 0.6556546955670245\n","Fold 15 RMSLE for ('model2', 'model3') = 0.6620152592760252\n","Fold 15 RMSLE for ('model2', 'model4') = 0.6636333934241189\n","Fold 15 RMSLE for ('model3', 'model4') = 0.6555329760941834\n","Fold 15 RMSLE for ('model1', 'model2', 'model3') = 0.6596150728575199\n","Fold 15 RMSLE for ('model1', 'model2', 'model4') = 0.6599446603089163\n","Fold 15 RMSLE for ('model1', 'model3', 'model4') = 0.6554615402690795\n","Fold 15 RMSLE for ('model2', 'model3', 'model4') = 0.6599678920076577\n","Fold 15 RMSLE for all models ensemble = 0.6585263551171671\n","Fold 15 best combination: ('model1', 'model3', 'model4') with RMSLE = 0.6554615402690795\n","---------------\n","\n","Starting Fold 16\n","Fold 16 RMSLE for model1 = 0.6619282735483076\n","Fold 16 RMSLE for model2 = 0.6566436126954652\n","Fold 16 RMSLE for model3 = 0.6678112987146456\n","Fold 16 RMSLE for model4 = 0.6389928127399319\n","Fold 16 RMSLE for ('model1', 'model2') = 0.6563154874315386\n","Fold 16 RMSLE for ('model1', 'model3') = 0.6642312641873198\n","Fold 16 RMSLE for ('model1', 'model4') = 0.6477849348568093\n","Fold 16 RMSLE for ('model2', 'model3') = 0.6587049543113743\n","Fold 16 RMSLE for ('model2', 'model4') = 0.6466603423286011\n","Fold 16 RMSLE for ('model3', 'model4') = 0.6495527486525866\n","Fold 16 RMSLE for ('model1', 'model2', 'model3') = 0.6589284739045752\n","Fold 16 RMSLE for ('model1', 'model2', 'model4') = 0.6495104385434178\n","Fold 16 RMSLE for ('model1', 'model3', 'model4') = 0.6529925752215426\n","Fold 16 RMSLE for ('model2', 'model3', 'model4') = 0.6507424037090759\n","Fold 16 RMSLE for all models ensemble = 0.6526368880912512\n","Fold 16 best combination: model4 with RMSLE = 0.6389928127399319\n","---------------\n","\n","Starting Fold 17\n","Fold 17 RMSLE for model1 = 0.7973855904752328\n","Fold 17 RMSLE for model2 = 0.797139345788401\n","Fold 17 RMSLE for model3 = 0.7896219482928327\n","Fold 17 RMSLE for model4 = 0.8120076591038163\n","Fold 17 RMSLE for ('model1', 'model2') = 0.7959985097937461\n","Fold 17 RMSLE for ('model1', 'model3') = 0.7930421899271313\n","Fold 17 RMSLE for ('model1', 'model4') = 0.8036232433149738\n","Fold 17 RMSLE for ('model2', 'model3') = 0.7910266559673287\n","Fold 17 RMSLE for ('model2', 'model4') = 0.8042199561171945\n","Fold 17 RMSLE for ('model3', 'model4') = 0.7987044573230437\n","Fold 17 RMSLE for ('model1', 'model2', 'model3') = 0.792886645762842\n","Fold 17 RMSLE for ('model1', 'model2', 'model4') = 0.8009966756673194\n","Fold 17 RMSLE for ('model1', 'model3', 'model4') = 0.7980416667828116\n","Fold 17 RMSLE for ('model2', 'model3', 'model4') = 0.7975266655519924\n","Fold 17 RMSLE for all models ensemble = 0.7971664400827209\n","Fold 17 best combination: model3 with RMSLE = 0.7896219482928327\n","---------------\n","\n","Starting Fold 18\n","Fold 18 RMSLE for model1 = 0.7319668741593235\n","Fold 18 RMSLE for model2 = 0.7369668703492951\n","Fold 18 RMSLE for model3 = 0.7366144605027689\n","Fold 18 RMSLE for model4 = 0.7318683460913346\n","Fold 18 RMSLE for ('model1', 'model2') = 0.7333671120298308\n","Fold 18 RMSLE for ('model1', 'model3') = 0.7339911663761559\n","Fold 18 RMSLE for ('model1', 'model4') = 0.7313101816526935\n","Fold 18 RMSLE for ('model2', 'model3') = 0.7357124866233836\n","Fold 18 RMSLE for ('model2', 'model4') = 0.7336895422707136\n","Fold 18 RMSLE for ('model3', 'model4') = 0.733373679914192\n","Fold 18 RMSLE for ('model1', 'model2', 'model3') = 0.7340818061344745\n","Fold 18 RMSLE for ('model1', 'model2', 'model4') = 0.732514118391227\n","Fold 18 RMSLE for ('model1', 'model3', 'model4') = 0.7326867800790311\n","Fold 18 RMSLE for ('model2', 'model3', 'model4') = 0.733957908965\n","Fold 18 RMSLE for all models ensemble = 0.7331773603269608\n","Fold 18 best combination: ('model1', 'model4') with RMSLE = 0.7313101816526935\n","---------------\n","\n","Starting Fold 19\n","Fold 19 RMSLE for model1 = 0.7714686343188604\n","Fold 19 RMSLE for model2 = 0.7608831509426386\n","Fold 19 RMSLE for model3 = 0.7547393461595393\n","Fold 19 RMSLE for model4 = 0.7542705931035192\n","Fold 19 RMSLE for ('model1', 'model2') = 0.7629356212640611\n","Fold 19 RMSLE for ('model1', 'model3') = 0.7630670967431026\n","Fold 19 RMSLE for ('model1', 'model4') = 0.7608697230910394\n","Fold 19 RMSLE for ('model2', 'model3') = 0.7549372722091228\n","Fold 19 RMSLE for ('model2', 'model4') = 0.756552573982903\n","Fold 19 RMSLE for ('model3', 'model4') = 0.7526712457860084\n","Fold 19 RMSLE for ('model1', 'model2', 'model3') = 0.7595931323008596\n","Fold 19 RMSLE for ('model1', 'model2', 'model4') = 0.7594531801712493\n","Fold 19 RMSLE for ('model1', 'model3', 'model4') = 0.7584012400104195\n","Fold 19 RMSLE for ('model2', 'model3', 'model4') = 0.7541075852973899\n","Fold 19 RMSLE for all models ensemble = 0.7575888615339323\n","Fold 19 best combination: ('model3', 'model4') with RMSLE = 0.7526712457860084\n","---------------\n","\n","Starting Fold 20\n","Fold 20 RMSLE for model1 = 0.7824571707328865\n","Fold 20 RMSLE for model2 = 0.8135790539382284\n","Fold 20 RMSLE for model3 = 0.7918137825275753\n","Fold 20 RMSLE for model4 = 0.8013919847431065\n","Fold 20 RMSLE for ('model1', 'model2') = 0.7950121536933391\n","Fold 20 RMSLE for ('model1', 'model3') = 0.7866063528783245\n","Fold 20 RMSLE for ('model1', 'model4') = 0.7896824739549085\n","Fold 20 RMSLE for ('model2', 'model3') = 0.80034016486618\n","Fold 20 RMSLE for ('model2', 'model4') = 0.8066689724310709\n","Fold 20 RMSLE for ('model3', 'model4') = 0.7946417371088764\n","Fold 20 RMSLE for ('model1', 'model2', 'model3') = 0.7933325899830166\n","Fold 20 RMSLE for ('model1', 'model2', 'model4') = 0.7963561911067378\n","Fold 20 RMSLE for ('model1', 'model3', 'model4') = 0.7897874685240031\n","Fold 20 RMSLE for ('model2', 'model3', 'model4') = 0.7999596095396502\n","Fold 20 RMSLE for all models ensemble = 0.7945412010235479\n","Fold 20 best combination: model1 with RMSLE = 0.7824571707328865\n","---------------\n","\n","Starting Fold 21\n","Fold 21 RMSLE for model1 = 0.7872602061111746\n","Fold 21 RMSLE for model2 = 0.7857433537488595\n","Fold 21 RMSLE for model3 = 0.7887734562952505\n","Fold 21 RMSLE for model4 = 0.7802229699014044\n","Fold 21 RMSLE for ('model1', 'model2') = 0.7843124042469392\n","Fold 21 RMSLE for ('model1', 'model3') = 0.7874509567916015\n","Fold 21 RMSLE for ('model1', 'model4') = 0.7824647582815524\n","Fold 21 RMSLE for ('model2', 'model3') = 0.7840702291538889\n","Fold 21 RMSLE for ('model2', 'model4') = 0.7814130819905977\n","Fold 21 RMSLE for ('model3', 'model4') = 0.7826772532014303\n","Fold 21 RMSLE for ('model1', 'model2', 'model3') = 0.7846281864904178\n","Fold 21 RMSLE for ('model1', 'model2', 'model4') = 0.7822079676260482\n","Fold 21 RMSLE for ('model1', 'model3', 'model4') = 0.7837714032394216\n","Fold 21 RMSLE for ('model2', 'model3', 'model4') = 0.7820944777818749\n","Fold 21 RMSLE for all models ensemble = 0.7829029246759672\n","Fold 21 best combination: model4 with RMSLE = 0.7802229699014044\n","---------------\n","\n","Starting Fold 22\n","Fold 22 RMSLE for model1 = 0.7326934444444053\n","Fold 22 RMSLE for model2 = 0.7301864634058549\n","Fold 22 RMSLE for model3 = 0.7358079189134165\n","Fold 22 RMSLE for model4 = 0.7361146075714625\n","Fold 22 RMSLE for ('model1', 'model2') = 0.7291171737809411\n","Fold 22 RMSLE for ('model1', 'model3') = 0.7339066432577913\n","Fold 22 RMSLE for ('model1', 'model4') = 0.7322754342461084\n","Fold 22 RMSLE for ('model2', 'model3') = 0.7309763560704104\n","Fold 22 RMSLE for ('model2', 'model4') = 0.7324726566800448\n","Fold 22 RMSLE for ('model3', 'model4') = 0.7340242474097716\n","Fold 22 RMSLE for ('model1', 'model2', 'model3') = 0.7308432806533953\n","Fold 22 RMSLE for ('model1', 'model2', 'model4') = 0.7306648136949065\n","Fold 22 RMSLE for ('model1', 'model3', 'model4') = 0.7329406036890816\n","Fold 22 RMSLE for ('model2', 'model3', 'model4') = 0.7319498435646665\n","Fold 22 RMSLE for all models ensemble = 0.7313409877387603\n","Fold 22 best combination: ('model1', 'model2') with RMSLE = 0.7291171737809411\n","---------------\n","\n","Starting Fold 23\n","Fold 23 RMSLE for model1 = 0.8285707968458688\n","Fold 23 RMSLE for model2 = 0.8215349525899763\n","Fold 23 RMSLE for model3 = 0.8258312679888865\n","Fold 23 RMSLE for model4 = 0.8127285351628334\n","Fold 23 RMSLE for ('model1', 'model2') = 0.8220089386675625\n","Fold 23 RMSLE for ('model1', 'model3') = 0.8268968822656296\n","Fold 23 RMSLE for ('model1', 'model4') = 0.8188058954315766\n","Fold 23 RMSLE for ('model2', 'model3') = 0.820501535956688\n","Fold 23 RMSLE for ('model2', 'model4') = 0.8159277347445653\n","Fold 23 RMSLE for ('model3', 'model4') = 0.8171728360954271\n","Fold 23 RMSLE for ('model1', 'model2', 'model3') = 0.8223936245712651\n","Fold 23 RMSLE for ('model1', 'model2', 'model4') = 0.8182754510022627\n","Fold 23 RMSLE for ('model1', 'model3', 'model4') = 0.8204515759222583\n","Fold 23 RMSLE for ('model2', 'model3', 'model4') = 0.8171978993315586\n","Fold 23 RMSLE for all models ensemble = 0.8192644424678437\n","Fold 23 best combination: model4 with RMSLE = 0.8127285351628334\n","---------------\n","\n","Starting Fold 24\n","Fold 24 RMSLE for model1 = 0.6736014556451715\n","Fold 24 RMSLE for model2 = 0.692502110415362\n","Fold 24 RMSLE for model3 = 0.6757405534020672\n","Fold 24 RMSLE for model4 = 0.6850975098347243\n","Fold 24 RMSLE for ('model1', 'model2') = 0.6804576336772094\n","Fold 24 RMSLE for ('model1', 'model3') = 0.6743552237735057\n","Fold 24 RMSLE for ('model1', 'model4') = 0.6771696749117565\n","Fold 24 RMSLE for ('model2', 'model3') = 0.6817161331678786\n","Fold 24 RMSLE for ('model2', 'model4') = 0.6880001065805375\n","Fold 24 RMSLE for ('model3', 'model4') = 0.6783389549140295\n","Fold 24 RMSLE for ('model1', 'model2', 'model3') = 0.6782617503816062\n","Fold 24 RMSLE for ('model1', 'model2', 'model4') = 0.6812141974214196\n","Fold 24 RMSLE for ('model1', 'model3', 'model4') = 0.6761133204920036\n","Fold 24 RMSLE for ('model2', 'model3', 'model4') = 0.6820791582038093\n","Fold 24 RMSLE for all models ensemble = 0.6791254178651189\n","Fold 24 best combination: model1 with RMSLE = 0.6736014556451715\n","---------------\n","\n","Starting Fold 25\n","Fold 25 RMSLE for model1 = 0.7625274323478481\n","Fold 25 RMSLE for model2 = 0.7722325973747145\n","Fold 25 RMSLE for model3 = 0.7607553109138309\n","Fold 25 RMSLE for model4 = 0.7688758772359\n","Fold 25 RMSLE for ('model1', 'model2') = 0.7645986951466279\n","Fold 25 RMSLE for ('model1', 'model3') = 0.7613656447707794\n","Fold 25 RMSLE for ('model1', 'model4') = 0.764189312675002\n","Fold 25 RMSLE for ('model2', 'model3') = 0.7642121615507157\n","Fold 25 RMSLE for ('model2', 'model4') = 0.7695155860140351\n","Fold 25 RMSLE for ('model3', 'model4') = 0.7635184876693036\n","Fold 25 RMSLE for ('model1', 'model2', 'model3') = 0.7628009120625631\n","Fold 25 RMSLE for ('model1', 'model2', 'model4') = 0.76547373156585\n","Fold 25 RMSLE for ('model1', 'model3', 'model4') = 0.7626900927877673\n","Fold 25 RMSLE for ('model2', 'model3', 'model4') = 0.7652127029178561\n","Fold 25 RMSLE for all models ensemble = 0.7637819596433477\n","Fold 25 best combination: model3 with RMSLE = 0.7607553109138309\n","---------------\n","\n","Starting Fold 26\n","Fold 26 RMSLE for model1 = 0.786477244036003\n","Fold 26 RMSLE for model2 = 0.8023292707270294\n","Fold 26 RMSLE for model3 = 0.7853939463871736\n","Fold 26 RMSLE for model4 = 0.7885350757230261\n","Fold 26 RMSLE for ('model1', 'model2') = 0.7934371869216338\n","Fold 26 RMSLE for ('model1', 'model3') = 0.7857310849548997\n","Fold 26 RMSLE for ('model1', 'model4') = 0.7866562895720908\n","Fold 26 RMSLE for ('model2', 'model3') = 0.79293200105127\n","Fold 26 RMSLE for ('model2', 'model4') = 0.7952850324296025\n","Fold 26 RMSLE for ('model3', 'model4') = 0.7860081603873572\n","Fold 26 RMSLE for ('model1', 'model2', 'model3') = 0.7904867584978128\n","Fold 26 RMSLE for ('model1', 'model2', 'model4') = 0.7916145777091538\n","Fold 26 RMSLE for ('model1', 'model3', 'model4') = 0.78589784990482\n","Fold 26 RMSLE for ('model2', 'model3', 'model4') = 0.791220130145995\n","Fold 26 RMSLE for all models ensemble = 0.7897087944332678\n","Fold 26 best combination: model3 with RMSLE = 0.7853939463871736\n","---------------\n","\n","Starting Fold 27\n","Fold 27 RMSLE for model1 = 0.7352666480278904\n","Fold 27 RMSLE for model2 = 0.7306442197217334\n","Fold 27 RMSLE for model3 = 0.7392158657291732\n","Fold 27 RMSLE for model4 = 0.7306980103717338\n","Fold 27 RMSLE for ('model1', 'model2') = 0.7313703480867838\n","Fold 27 RMSLE for ('model1', 'model3') = 0.7367204557731161\n","Fold 27 RMSLE for ('model1', 'model4') = 0.732089239612123\n","Fold 27 RMSLE for ('model2', 'model3') = 0.7335298024301402\n","Fold 27 RMSLE for ('model2', 'model4') = 0.7299958209443607\n","Fold 27 RMSLE for ('model3', 'model4') = 0.7336848097546471\n","Fold 27 RMSLE for ('model1', 'model2', 'model3') = 0.7334636428843748\n","Fold 27 RMSLE for ('model1', 'model2', 'model4') = 0.7308031449756246\n","Fold 27 RMSLE for ('model1', 'model3', 'model4') = 0.7338618588256066\n","Fold 27 RMSLE for ('model2', 'model3', 'model4') = 0.7320393461799763\n","Fold 27 RMSLE for all models ensemble = 0.732363916032844\n","Fold 27 best combination: ('model2', 'model4') with RMSLE = 0.7299958209443607\n","---------------\n","\n","Starting Fold 28\n","Fold 28 RMSLE for model1 = 0.7396797208817563\n","Fold 28 RMSLE for model2 = 0.7461310576781267\n","Fold 28 RMSLE for model3 = 0.7369400880270104\n","Fold 28 RMSLE for model4 = 0.7407468933159982\n","Fold 28 RMSLE for ('model1', 'model2') = 0.7404212841237522\n","Fold 28 RMSLE for ('model1', 'model3') = 0.737953884105492\n","Fold 28 RMSLE for ('model1', 'model4') = 0.7383901020771633\n","Fold 28 RMSLE for ('model2', 'model3') = 0.7391848945749592\n","Fold 28 RMSLE for ('model2', 'model4') = 0.7425729223043175\n","Fold 28 RMSLE for ('model3', 'model4') = 0.7370884679714328\n","Fold 28 RMSLE for ('model1', 'model2', 'model3') = 0.7385754885011814\n","Fold 28 RMSLE for ('model1', 'model2', 'model4') = 0.739906909775727\n","Fold 28 RMSLE for ('model1', 'model3', 'model4') = 0.7373572919293414\n","Fold 28 RMSLE for ('model2', 'model3', 'model4') = 0.7390978138644243\n","Fold 28 RMSLE for all models ensemble = 0.7384704136404254\n","Fold 28 best combination: model3 with RMSLE = 0.7369400880270104\n","---------------\n","\n","Starting Fold 29\n","Fold 29 RMSLE for model1 = 0.7772006850377814\n","Fold 29 RMSLE for model2 = 0.7825554391919949\n","Fold 29 RMSLE for model3 = 0.7686716132731531\n","Fold 29 RMSLE for model4 = 0.7819281735871149\n","Fold 29 RMSLE for ('model1', 'model2') = 0.7770575573475389\n","Fold 29 RMSLE for ('model1', 'model3') = 0.7725844003547628\n","Fold 29 RMSLE for ('model1', 'model4') = 0.7778676769889658\n","Fold 29 RMSLE for ('model2', 'model3') = 0.7728770268811069\n","Fold 29 RMSLE for ('model2', 'model4') = 0.7806806678784414\n","Fold 29 RMSLE for ('model3', 'model4') = 0.7733676154910819\n","Fold 29 RMSLE for ('model1', 'model2', 'model3') = 0.7733960296675578\n","Fold 29 RMSLE for ('model1', 'model2', 'model4') = 0.7778512109519751\n","Fold 29 RMSLE for ('model1', 'model3', 'model4') = 0.7740965969673108\n","Fold 29 RMSLE for ('model2', 'model3', 'model4') = 0.7749526590488498\n","Fold 29 RMSLE for all models ensemble = 0.7747448146176118\n","Fold 29 best combination: model3 with RMSLE = 0.7686716132731531\n","---------------\n","\n","Starting Fold 30\n","Fold 30 RMSLE for model1 = 0.764510328180829\n","Fold 30 RMSLE for model2 = 0.7743971931091794\n","Fold 30 RMSLE for model3 = 0.7651904233367176\n","Fold 30 RMSLE for model4 = 0.7777279406297797\n","Fold 30 RMSLE for ('model1', 'model2') = 0.7671810386217751\n","Fold 30 RMSLE for ('model1', 'model3') = 0.7643815540789877\n","Fold 30 RMSLE for ('model1', 'model4') = 0.7696024528925782\n","Fold 30 RMSLE for ('model2', 'model3') = 0.7669387722191661\n","Fold 30 RMSLE for ('model2', 'model4') = 0.7753522137505129\n","Fold 30 RMSLE for ('model3', 'model4') = 0.7692186627460844\n","Fold 30 RMSLE for ('model1', 'model2', 'model3') = 0.7655262105544657\n","Fold 30 RMSLE for ('model1', 'model2', 'model4') = 0.7702092687092084\n","Fold 30 RMSLE for ('model1', 'model3', 'model4') = 0.7672690748308852\n","Fold 30 RMSLE for ('model2', 'model3', 'model4') = 0.7698753073281118\n","Fold 30 RMSLE for all models ensemble = 0.7679480477609595\n","Fold 30 best combination: ('model1', 'model3') with RMSLE = 0.7643815540789877\n","---------------\n","\n","OOF RMSLE = 0.7518990241128024\n","Sum of RMSLE for each combination:\n","('model1',): 22.651228958878196\n","('model2',): 22.82759601550491\n","('model3',): 22.632723192735842\n","('model4',): 22.65861920699372\n","('model1', 'model2'): 22.673175734894553\n","('model1', 'model3'): 22.631106387327012\n","('model1', 'model4'): 22.60973289453022\n","('model2', 'model3'): 22.66069210251356\n","('model2', 'model4'): 22.717326014421698\n","('model3', 'model4'): 22.592242056171536\n","('model1', 'model2', 'model3'): 22.638199561524086\n","('model1', 'model2', 'model4'): 22.65155980004068\n","('model1', 'model3', 'model4'): 22.598483943102124\n","('model2', 'model3', 'model4'): 22.640726794276937\n","('model1', 'model2', 'model3', 'model4'): 22.624776084712575\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"qpdexin2_QG8","executionInfo":{"status":"ok","timestamp":1732086356636,"user_tz":-540,"elapsed":56,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","target = target.flatten()\n","# 実測値と予測値を対数スケールでプロット\n","plt.figure(figsize=(8, 6))\n","sns.scatterplot(x=target, y=oof_predictions, alpha=0.5)\n","plt.xscale('log')\n","plt.yscale('log')\n","plt.xlabel('Actual Values (y_test) [Log Scale]')\n","plt.ylabel('Predicted Values (test_preds) [Log Scale]')\n","plt.title('Actual vs Predicted Values (Log-Log Scale)')\n","plt.plot([target.min(), target.max()], [target.min(), target.max()], 'r--')  # 45度線\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"_ifM6b64R92a","executionInfo":{"status":"ok","timestamp":1732086358623,"user_tz":-540,"elapsed":2036,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"3ee6d861-7e65-48b0-b53b-dc5dc05539d0"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"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xYsX88477xAIBAD44x//yDXXXMMJJ5zAf/7nf7JlyxYuvPBCQqEQ9fX1u13PypUrWbRoEVarlauvvpqmpiZaW1t54okn+MEPfsBHPvIRNm7cyH333cdtt91GeXk5AOFw+KCtsbm5mRNOOIEHHniA2267DYvFUrpvNNj9xCc+AZh1nx6Ph+uuuw6Px8Nzzz3Hd7/7XRKJBD/96U/f6+PZI2vWrCllU//rv/4Lt9vNAw88wEUXXcTDDz/Mhz/8YWDfz52lS5dSKBT2OQN91VVXcffdd3PxxRfzta99jTfeeIMf/ehHrFu3jkcffbT0uBtuuIGf/OQnXHDBBZx11lmsWLGCs846a7/WfK5Zs4ZFixbh8/m4/vrrsVqt/O53v+Pkk0/mxRdfLNXud3d3c8oppyBJEjfccANut5s//OEP2O32PXqexsZGnn32Wbq6uqirq9vtYz/3uc9x1113cc4553DVVVehqiovv/wyr7/+OvPmzQPgt7/9LdOmTePCCy9EURSeeOIJvvjFL6LrOtdee+0uj63rOhdeeCFLlizh6quvZsqUKaxatYrbbruNjRs38re//W3M4+fOnYthGLz66quHTe20cIQyBEHYrbffftsAjGeeecYwDMPQdd2oq6szvvrVr4553He/+10DMB555JEdjqHrumEYhvHWW28ZgHHnnXfu8JjGxkbj8ssv3+H2k046yTjppJNKX6uqauTz+TGPiUajRmVlpXHllVeOuR0wvve97+329f3ud78zAGPVqlVjbp86dapx6qmnlr6eOXOmcd555+32WDvz/PPPG4Dxpz/9yRgcHDR6enqMf/zjH0ZTU5MhSZLx1ltvGYZhGN/73vcMwPj4xz8+5vu3bt1qWCwW4wc/+MGY21etWmUoilK6vVAoGBUVFcasWbPGvD+///3vDWDMe9jW1rbD57B48WLD6/Ua7e3tY55n9LMzDMP46U9/agBGW1vbAV/jrtx+++0GYDz99NOl2zRNM2pra43jjz++dFsmk9nhe6+55hrD5XIZuVyudNvll19uNDY2lr4e/byef/75Md+7s/fstNNOM6ZPnz7meLquGyeccIIxYcKE0m37eu784Q9/2Om5aRjmz8vujrl8+XIDMK666qoxt3/96183AOO5554zDMMw+vr6DEVRjIsuumjM42666SYD2OnP5PbuvPNOAyidyztz0UUXGTabzWhtbS3d1tPTY3i9XmPx4sWl27785S8bkiQZ77zzTum2oaEhIxQK7fTc294f//hHAzBsNptxyimnGDfeeKPx8ssvG5qmjXncc889ZwDGV77ylR2Ose05v7Pz6KyzzjLGjRs35rbt/57685//bMiybLz88stjHnfHHXcYgPHKK6+Mub2np8cAjB//+Me7fX2C8F5EKYIgvId7772XyspKTjnlFMCsz7zsssv461//Ouay7sMPP8zMmTNLWaptSZK039ZjsVhKlxl1XWd4eBhVVZk3bx7Lli3b6+N95CMfQVEU7r///tJtq1evZu3atVx22WWl2wKBAGvWrGHTpk37tO4rr7yScDhMTU0N5513Hul0mrvvvruUGRr1hS98YczXjzzyCLquc+mllxKJREp/qqqqmDBhQqkE4+2332ZgYIAvfOELYy7DXnHFFfj9/t2ubXBwkJdeeokrr7yShoaGMfftyWd3MNY46rLLLsNqtY4pR3jxxRfp7u4ulSEAOJ3O0v8nk0kikQiLFi0ik8mwfv36PXqu3RkeHua5557j0ksvLR0/EokwNDTEWWedxaZNm+ju7gb2/dwZGhoCIBgM7vX6nnzySYAdOkR87WtfA+Af//gHAM8++yyqqvLFL35xzOO+/OUv7/Vz7oqmafzrX//ioosuYty4caXbq6ur+cQnPsGSJUtIJBIAPPXUUxx//PFjrryEQqExn+3uXHnllTz11FOcfPLJLFmyhO9///ssWrSICRMm8Oqrr5Ye9/DDDyNJ0k73Cmx7zm97HsXjcSKRCCeddBJbtmwhHo/vch0PPvggU6ZMYfLkyWN+JkZLkLYvnRr9jCORyB69TkHYFRHYCsJuaJrGX//6V0455RTa2trYvHkzmzdv5thjj6W/v59nn3229NjW1laOOeaYg7Kuu+++mxkzZpTqFcPhMP/4xz92+w/NrpSXl3PaaafxwAMPlG67//77URSFj3zkI6XbbrnlFmKxGBMnTmT69Ol84xvfYOXKlXv8PN/97nd55plneO6551i5ciU9PT077UrQ3Nw85utNmzZhGAYTJkwgHA6P+bNu3brShpj29nYAJkyYMOb7R9uL7c5o27F9/fwOxhpHlZWVcdZZZ/Hoo4+WLpX/5S9/QVEULr300tLj1qxZw4c//GH8fj8+n49wOFzqlrAv58n2Nm/ejGEY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MLPrkiRJkk5Ik948tnr1ap5++mnmz5/P+eefz6c+9SmGh4f56U9/yrJly6ZjjZIknYz+8hfRvmtkBHw+uP12eMMbZnpVkiRJ0glswhnbscELX/jCF6irqwPg85//PKFQiPe///0MDQ3xgx/8YHpWKUnSyeeJJ0RQu2YNbNkig1pJkiTpZZtwV4Ta2lre+c538u53v5sFJ9FlQtkVQZJeQaYp2niBqK3dsEGUHzgcM7suSZIkaVab8q4IN9xwA7/5zW9YvHgx5557Lj/+8Y/JZrNTslhJkk4Bv/89XHYZFArittUKH/6wDGolSZKkKTPhwPbf//3f2bdvH/fddx9tbW188IMfpK6ujve97308+eST07lGSZJOZMUifOQjcO21YjTuf/3XTK9IkiRJOklNuivCBRdcwB133EF/fz9f//rXee655zjzzDNZunQp3/jGN6ZjjZIknagOHICzz4Zvf1vcvukmkNMJJUmSpGky6cljx/PnP/+Zd7zjHcTj8comsxOFrLGVpGnym9/Ae94DySSEQnDHHXDNNTO9KkmSJOkENG2Tx8Zks1l+/OMfc/755/PqV7+aSCTC5z//+Zf67V62bDZLS0sLN99884ytQZKksm9+E17/ehHUnnUWbNsmg1pJkiRp2k06sH3sscd473vfS11dHTfccAOtra088MADtLe3c8stt0zHGifk85//PGecccaM/XxJksa59loIBuETn4AHH4Tm5hlekCRJknQqmPCAhq985Sv86Ec/or29nbVr1/LVr36VN7/5zfh8vulc34Ts3buX3bt3c8011/Dss8/O9HIk6dT0zDOwfLn485w5sHcvRKMzuyZJkiTplDLhjO1Xv/pVrrjiCrZv386TTz7JP/7jP05JULtx40auueYa6uvrURSFu++++5i/s2HDBlpbW3E6nZx++uk89dRTR3z95ptv5otjIzklSXpl5XLwT/8EK1bAPfccvl8GtZIkSdIrbMKBbW9vL9/85jenfGxuJpNh5cqVbNiw4bhfv/POO7npppv49Kc/zZYtW1i5ciWXX345g4ODAPz+979nwYIFJ9XQCEk6YezeDaefDj/4gRi88MwzM70iSZIk6RQ2JV0RpoqiKPzud7/j2muvrdx3+umns27dOm677TYADMOgqamJG2+8kVtuuYVbb72Vn/3sZ1gsFtLpNJqm8dGPfpRP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iIiImh1fqduarVwJLF1aUdROngxkZLCoJSIiIqoFC9uWaM4cwNwc2L69YhiCmZnUERERERG1eFzuqyUoLwdUKmDIkIptZ2egoICvxiUiIiKqBz6xldrdu8D77wOensCpU//bz6KWiIiIqF74xFZKKSnAjBnAr78CRkZAUZHUERERERG1Wm32ia2ky32Vl1e8OWz48Iqi1skJOHsWmDmz+WMhIiIi0hNc7qu5l/u6fRuYNQs4frxiOyAA2LGDQw+IiIiIqsHlvlqquLiKorZjRyA6Gti1i0UtERERURPgGNvmFhwM/PxzxZNaFxepoyEiIiLSGyxsm5tMVjG+loiIiIiaFIciEBEREZFeYGFLRERERHqBhS0RERER6YU2W9hKuo4tERERETU5rmPb3OvYEhEREVG9cB1bIiIiImpTWNgSERERkV5gYUtEREREeoGFLRERERHpBRa2RERERKQXWNgSERERkV5gYUtEREREeoGFLRERERHpBRa2RERERKQX2mxhy1fqEhEREekXvlKXr9QlIiIiatH4Sl0iIiIialNY2BIRERGRXmgndQBSezkS47fffpM4EiIiIiKqyss6rbYRtG2+sC0tLQUA2NjYSBwJEREREdWktLQUpqam1R5v85PHysvLcePGDSiVSshkskrH3d3dce7cuXpftz7n1bVtbe0acvy3336DjY0NioqKWs3kuYZ+J1L0wfxpWZojd5qyH33Jn+qOMX/ebD/Mn5aF+dPwtu7u7lCpVCgtLYW1tTUMDKofSdvmn9gaGBigW7du1R6Xy+UN+gdTn/Pq2ra2do05bmJi0ip+MQAN/06k6IP507I0R+40ZT/6kj+1ncv8eTP9MH9aFuZPw9vK5XKYmprW+KT2JU4eq8WiRYve+Hl1bVtbu8Yeby2a43M0VR/Mn5aluT4D86fh8bRkzJ+Gt2X+MH8a07Y+12zzQxHaOq7jS43B/KHGYP5QYzB/qCp8YtvGGRkZISwsDEZGRlKHQq0Q84cag/lDjcH8oarwiS0RERER6QU+sSUiIiIivcDCloiIiIj0AgtbIiIiItILLGyJiIiISC+wsCUiIiIivcDClqr18OFDuLm5oX///nBxccEXX3whdUjUyjx69Ah2dnZYvny51KFQK2Nvb4++ffuif//+GDFihNThUCuTn5+PESNGoHfv3nB1dUVZWZnUIVEzafOv1KXqKZVKJCUloVOnTigrK4OLiwsmT56Mzp07Sx0atRLh4eEYMmSI1GFQK5WamgqFQiF1GNQKBQcHY8OGDfDy8sL9+/e51m0bwie2VC25XI5OnToBAJ4+fQohBLjsMdVVbm4urly5grFjx0odChG1IZcuXUL79u3h5eUFADA3N0e7dnyO11awsNVjSUlJ8PPzg7W1NWQyGQ4dOlSpTVRUFOzt7dGhQwcMHjwYKpVK5/jDhw/Rr18/dOvWDStWrICFhUUzRU9SaorcWb58OSIiIpopYmpJmiJ/ZDIZvL294e7ujt27dzdT5NQSNDZ/cnNzoVAo4Ofnh4EDB2Ljxo3NGD1JjYWtHisrK0O/fv0QFRVV5fHY2Fh89NFHCAsLw/nz59GvXz/4+Pjg9u3b2jZmZmbIyspCfn4+9uzZg+Li4uYKnyTU2Nz57rvv4OTkBCcnp+YMm1qIpvjdk5KSgvT0dBw+fBgbN25EdnZ2c4VPEmts/rx48QLJycn4/PPPkZaWhvj4eMTHxzfnRyApCWoTAIiDBw/q7PPw8BCLFi3Sbms0GmFtbS0iIiKqvMaHH34o9u/f/ybDpBaoIbmzcuVK0a1bN2FnZyc6d+4sTExMxF//+tfmDJtaiKb43bN8+XIRExPzBqOklqoh+ZOamirGjBmjPb5582axefPmZomXpMcntm3Us2fPkJ6ejlGjRmn3GRgYYNSoUUhLSwMAFBcXo7S0FABQUlKCpKQkODs7SxIvtRx1yZ2IiAgUFRWhoKAAf//73zFv3jysWbNGqpCpBalL/pSVlWl/96jVapw4cQJ9+vSRJF5qWeqSP+7u7rh9+zYePHiA8vJyJCUloVevXlKFTM2Mo6nbqLt370Kj0aBr1646+7t27YorV64AAAoLCzF//nztpLElS5bA1dVVinCpBalL7hBVpy75U1xcjEmTJgEANBoN5s2bB3d392aPlVqeuuRPu3btsHHjRrz33nsQQmDMmDGYMGGCFOGSBFjYUrU8PDyQmZkpdRjUygUHB0sdArUyPXr0QFZWltRhUCs2duxYrsjSRnEoQhtlYWEBuVxeaTJYcXExrKysJIqKWgPmDjUG84cag/lDtWFh20YZGhpi0KBBSEhI0O4rLy9HQkIChg4dKmFk1NIxd6gxmD/UGMwfqg2HIugxtVqNvLw87XZ+fj4yMzNhbm4OW1tbfPTRRwgKCoKbmxs8PDwQGRmJsrIyzJ49W8KoqSVg7lBjMH+oMZg/1CgSr8pAb9DJkycFgEo/QUFB2jbbt28Xtra2wtDQUHh4eIgzZ85IFzC1GMwdagzmDzUG84caQyYE35FKRERERK0fx9gSERERkV5gYUtEREREeoGFLRERERHpBRa2RERERKQXWNgSERERkV5gYUtEREREeoGFLRERERHpBRa2RERERKQXWNgSUashk8lw6NChN9rH8OHDsXTp0jfaR11ER0djzJgxUodRbx988AG2bNlSazuZTAaZTAYzM7M3H5TEEhMTIZPJ8PDhwzqfM3z4cO09yszMfGOxEekbFrZEVElaWhrkcjnGjx9f73Pt7e0RGRnZ9EHVws/PD76+vlUeS05OhkwmQ3Z2djNH1TBPnjzBJ598grCwsCa53s6dO5u8gKyuWFu9ejXCw8NRUlJS6zViYmLw888/v9E46+LgwYMYMmQITE1NoVQq0adPH8n/c3PgwAGoVCpJYyBqjVjYElEl0dHRWLJkCZKSknDjxg2pw6mTkJAQxMfH49dff610LCYmBm5ubujbt68EkdXfN998AxMTE3h6ekodSr25uLjAwcEBX3/9da1tzczM0KVLl2aIqnoJCQmYPn06pkyZApVKhfT0dISHh+P58+eSxmVubg5LS0tJYyBqjVjYEpEOtVqN2NhYfPjhhxg/fjx27txZqc2RI0fg7u6ODh06wMLCApMmTQJQ8efTwsJC/PGPf9T+GRUA1q5di/79++tcIzIyEvb29trtc+fOYfTo0bCwsICpqSm8vb1x/vz5Osc9YcIEWFpaVopXrVZj//79CAkJwb179zBjxgy888476NSpE1xdXbF3794ar1vV8AczMzOdfoqKijBt2jSYmZnB3Nwc/v7+KCgo0B5PTEyEh4cHjI2NYWZmBk9PTxQWFlbb5759++Dn56fdTkpKQvv27XHr1i2ddkuXLoWXl1eN8ScmJmL27NkoKSnRfidr164FADx9+hTLly/HO++8A2NjYwwePBiJiYnacwsLC+Hn54e33noLxsbG6NOnD44ePYqCggKMGDECAPDWW29BJpMhODhYe56fnx/27dtXY1wNce3aNfj7+0OhUMDExATTpk1DcXGxTpsNGzagS5cuUCqVmDt3LlauXFkp91515MgReHp6YsWKFXB2doaTkxMm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586dBQARFhYmhBDi2bNnYs2aNcLe3l60b99evP3222LSpEkiOztbCCHE4sWLhYODgzAyMhKWlpZi1qxZ4u7du9prrlu3TlhZWQmZTCaCgoKEEEI8fvxYmJqairS0tBrjqeq7jImJEQAq/Tg4OAghKia8vf/++8LY2FgolUoxdepUcevWLZ1rrFu3TlhYWAiFQiHmzJkjQkNDxZAhQ6qN48SJE2LKlCnCxsZGGBoaiq5duwpfX1+RnJys066mnN+zZ4+wt7cXRkZGYujQoeLw4cM6k76qmminUqnE6NGjhUKhEMbGxqJv374iPDxcp09OHiOqP5kQrw0eIyIiyU2dOhUDBw7EqlWrdPaHhITgzp07OHz4sESR1WzHjh04ePAgjh8/XmM7mUyGgwcPYuLEiW80ntGjR8PKykpnqbTWoqCgAN27d0dGRkaNa/ES0f9w8hgRUQv06aef4siRI9rtkpISXLhwAXv27GmxRS0AtG/fHtu3b69T2xkzZqBz585Vvi2uIR49eoR//OMf8PHxgVwux969e/Hf//4X8fHxTXL95jR27FgkJSVJHQZRq8MntkRErcDw4cOhUqmwYMECbN26VefY2LFjkZycXOV5H3/8MT7++OPmCLFe8vLyAAByuRzdu3dvkms+fvwYfn5+yMjIwJMnT+Ds7IzVq1dj8uTJTXL95nT9+nXt0m8vx/ESUe1Y2BIRtXKvFkGvMzc3h7m5eTNHREQkDRa2RERERKQXuNwXEREREekFFrZEREREpBdY2BIRERGRXmBhS0RERER6gYUtEREREekFFrZEREREpBdY2BIRERGRXmBhS0RERER64f8BuSFOqzqtHfUAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"dZVR0JB4VizL","executionInfo":{"status":"ok","timestamp":1732086358623,"user_tz":-540,"elapsed":26,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["# train_all = np.concatenate((train, test), axis=0)\n","# target_all = np.concatenate((target, test_preds), axis=0)\n","# oof_predictions,test_preds = get_models_trained(train_all,test,target_all,30)"],"metadata":{"id":"KQ0vwsWZ-cuv","executionInfo":{"status":"ok","timestamp":1732086358624,"user_tz":-540,"elapsed":26,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["submit = pd.read_csv(path+'sample_submission.csv',  header = None)\n","submit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"d9vHuaYL4Sla","executionInfo":{"status":"ok","timestamp":1732086359044,"user_tz":-540,"elapsed":446,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"d11b43fe-7507-4002-97d1-c760c133b427"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0              1\n","0     4655  249574.303827\n","1     4656  249574.303827\n","2     4657  249574.303827\n","3     4658  249574.303827\n","4     4659  249574.303827\n","...    ...            ...\n","2503  7158  249574.303827\n","2504  7159  249574.303827\n","2505  7160  249574.303827\n","2506  7161  249574.303827\n","2507  7162  249574.303827\n","\n","[2508 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-e76c015b-aebe-4d83-be9b-0ec6321afc99\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4655</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4656</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4657</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4658</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4659</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>7158</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>7159</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>7160</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>7161</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>7162</td>\n","      <td>249574.303827</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e76c015b-aebe-4d83-be9b-0ec6321afc99')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e76c015b-aebe-4d83-be9b-0ec6321afc99 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e76c015b-aebe-4d83-be9b-0ec6321afc99');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0ec348f4-f489-47fa-91d5-21b3a3f37220\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ec348f4-f489-47fa-91d5-21b3a3f37220')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0ec348f4-f489-47fa-91d5-21b3a3f37220 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_dcd0d960-8c69-418f-b9d1-2f28ca7124de\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('submit')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_dcd0d960-8c69-418f-b9d1-2f28ca7124de button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('submit');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submit","summary":"{\n  \"name\": \"submit\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 724,\n        \"min\": 4655,\n        \"max\": 7162,\n        \"num_unique_values\": 2508,\n        \"samples\": [\n          6776,\n          4711,\n          7135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0274019767131063e-09,\n        \"min\": 249574.30382740172,\n        \"max\": 249574.30382740172,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          249574.30382740172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["test_preds.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1rRnsQRJVVxi","executionInfo":{"status":"ok","timestamp":1732086359044,"user_tz":-540,"elapsed":8,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"211c1d68-187a-450c-9888-f1626031d753"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2508,)"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","execution_count":48,"metadata":{"id":"KqRqr73vPA0j","executionInfo":{"status":"ok","timestamp":1732086474202,"user_tz":-540,"elapsed":433,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["submit [ 1 ]  =  test_preds\n","submit.to_csv('SMBC_21.csv', index = False)\n"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"2PjeOxAhPE04","executionInfo":{"status":"ok","timestamp":1732086475054,"user_tz":-540,"elapsed":8,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"colab":{"base_uri":"https://localhost:8080/","height":423},"outputId":"16b01c73-3f5b-4cf3-dead-0aabffa528aa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0             1\n","0     4655  4.360895e+04\n","1     4656  3.255002e+05\n","2     4657  3.949127e+04\n","3     4658  2.815750e+04\n","4     4659  4.678110e+04\n","...    ...           ...\n","2503  7158  5.109734e+05\n","2504  7159  1.045949e+05\n","2505  7160  1.418140e+05\n","2506  7161  2.539390e+05\n","2507  7162  1.265202e+06\n","\n","[2508 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-11390060-9179-41bf-93fe-5956903c232c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4655</td>\n","      <td>4.360895e+04</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4656</td>\n","      <td>3.255002e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4657</td>\n","      <td>3.949127e+04</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4658</td>\n","      <td>2.815750e+04</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4659</td>\n","      <td>4.678110e+04</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>7158</td>\n","      <td>5.109734e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>7159</td>\n","      <td>1.045949e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>7160</td>\n","      <td>1.418140e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>7161</td>\n","      <td>2.539390e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>7162</td>\n","      <td>1.265202e+06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11390060-9179-41bf-93fe-5956903c232c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-11390060-9179-41bf-93fe-5956903c232c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-11390060-9179-41bf-93fe-5956903c232c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-24462dd2-1ae9-47b1-ad6a-276d21003162\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24462dd2-1ae9-47b1-ad6a-276d21003162')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-24462dd2-1ae9-47b1-ad6a-276d21003162 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_261298a7-09be-44df-82e0-9a78efd58b7d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('submit')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_261298a7-09be-44df-82e0-9a78efd58b7d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('submit');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submit","summary":"{\n  \"name\": \"submit\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 724,\n        \"min\": 4655,\n        \"max\": 7162,\n        \"num_unique_values\": 2508,\n        \"samples\": [\n          6776,\n          4711,\n          7135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 333151.81550573313,\n        \"min\": 18172.361534341428,\n        \"max\": 2342412.950511999,\n        \"num_unique_values\": 2501,\n        \"samples\": [\n          30095.687501968103,\n          631292.5537136712,\n          26609.91748412401\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":49}],"source":["submit"]},{"cell_type":"code","source":["\n","show_plot(oof_predictions, target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"id":"p4ZMc92JRYSD","executionInfo":{"status":"ok","timestamp":1732086479950,"user_tz":-540,"elapsed":3993,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"b32d0df8-667f-4c1a-80b9-9a74f08de991"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"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55572nmJl+XLl+OSSy5BQkICQkJCMHjwYDz33HPtdG0z6bPPPtNn0gsvvAAAOHDgAKZNm+ZxfJ999pnXn/vll1+O6OhohIWFYcKECVi/fr3+/KJFi/Db3/4WAJCZmcl0me1HH32ElpYWTJw4kesc7N+/Hz/96U8RGxuLsLAwnHfeeR3+UcxIn+dSUlKC3NzcDv94k5CQ0O6xf/7znxgzZgzCwsLQq1cvjB8/Hp9//rn+PKvPOoL1NQ4AkyZNwoEDB5gvTSaIngq9c0UQFuE///kP+vXrh5/85CdM+ltuuQWvvPIKrr32WvzmN79BQUEBlixZgl27dmHVqlUe2n379uFnP/sZ5s2bh5///Od47LHHMHXqVDz//PP4/e9/j9tvvx0AsGTJElx33XUoLi6G3f7fv820trbi8ssvx3nnnYdHH30Un376KRYuXIiWlhaPSzyefPJJTJs2DTfddBOampqwcuVK/PSnP8WHH36IK6+80uOYvvjiC7z11luYP38+4uLivN4ofdttt+Gdd97B/PnzMXjwYJw8eRLffvstdu3ahby8PABnftGdM2cORo8ejSVLlqCiogJPPvkk1q9fj61bt3r8EtLa2orJkydj7NixeOyxx7BmzRo8/vjjyMrKwq9+9atOz/miRYuwePFiTJw4Eb/61a9QXFyM5557Dhs3bsT69esRFBSEZcuW4dVXX8WqVavw3HPPISIiAsOGDevy59kRbrcb06ZNw7fffotbb70VgwYNwo4dO/DEE09gz549eP/99wEARUVFuOqqqzBs2DA89NBDCAkJwb59+/RfNAcNGoSHHnoIDz74IG699VaMGzcOAJi9djYlJSUAgN69e+uPtbS0YPLkybjwwgvx2GOP6ZcLzps3T//Z3HnnnSgtLcXTTz+NrVu36ucLAB588EE88sgjuOKKK3DFFVdgy5YtuOyyy9DU1NTl8axevRpXXXUVkpOTcddddyEpKQm7du3Chx9+iLvuugvz5s1DeXl5h5ewdURRURHGjRuHqKgo3HfffQgKCsILL7yAiy66CF999RXGjh3rob/jjjvQq1cvLFy4EGVlZVi2bBnmz5+PN998E8CZdxIuu+wyxMfH4/7770dMTAzKysrw3nvvdXksK1asQEREBBYsWICIiAh88cUXePDBB1FTU4O//vWvHtpTp07h8ssvx4wZM3DdddfhnXfewe9+9zsMHToUU6ZMAXDmEshLL70UBw8exJ133omUlBS89tpr+OKLL7o8Fhaee+455ObmYtq0aQgMDMR//vMf3H777XC73fj1r3/toS0uLsaNN96IefPmYe7cuRg4cCBqa2txySWX4OjRo/rP8l//+he+/PLLdrW++OILTJkyBfn5+Vi4cCHsdru+uPvmm28wZswYzJgxA3v27MEbb7yBJ554AnFxcQA6v8z2u+++Q+/evZGenm64/4qKCvzkJz9BXV0d7rzzTvTu3RuvvPIKpk2bhnfeeQfXXHMNABjqsyPS09Px/fffY+fOnRgyZEin2sWLF2PRokX4yU9+goceegjBwcEoKCjAF198gcsuuwyAMZ+dC+trHADy8/MBnLmnbeTIkUy9EkSPRCMIosfjdDo1ANrVV1/NpC8sLNQAaLfccovH4/fee68GQPviiy/0x9LT0zUA2nfffac/9tlnn2kAtNDQUO3AgQP64y+88IIGQPvyyy/1x2bNmqUB0O644w79MbfbrV155ZVacHCwduLECf3xuro6j+NpamrShgwZol1yySUejwPQ7Ha7VlRU1K43ANrChQv176Ojo7Vf//rXXs9FU1OTlpCQoA0ZMkSrr6/XH//www81ANqDDz7YrpeHHnrII8fIkSO1/Px8rzU0TdOOHz+uBQcHa5dddpnW2tqqP/70009rALR//OMf+mMLFy7UAHicGxauvPJKLT09Xf/+tdde0+x2u/bNN9946J5//nkNgLZ+/XpN0zTtiSee6LLexo0bNQDa8uXLmY5l+fLlGgBtzZo12okTJ7RDhw5pK1eu1Hr37q2FhoZqhw8f1jTtv+f0/vvv94j/5ptvNADa66+/7vH4p59+6vF423m98sorNbfbret+//vfawC0WbNm6Y99+eWXHv5saWnRMjMztfT0dO3UqVMedc7O9etf/1rz9s/huX6bPn26FhwcrJWUlOiPlZeXa5GRkdr48ePbnZ+JEyd61Lrnnnu0gIAArbq6WtM0TVu1apUGQNu4cWOH9Tvj3NeTpmnavHnztLCwMK2hoUF/bMKECRoA7dVXX9Ufa2xs1JKSkrT/+Z//0R9btmyZBkB766239Mdqa2u17Ozsdq/7rujonHZ0vJMnT9b69evn8VjbTPr00089Hn/88cc1ANr777+vP1ZfX6/l5OR4HJ/b7db69++v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FADAvffei08//RTLly/Hn//8Z8M5x44dixUrVmDgwIE4evQoFi9ejHHjxmHnzp3MmxkQvklWVhb+9a9/4frrr8egQYMwc+ZMDBkyBE1NTfjuu+/w9ttvY/bs2QCA4cOHY9asWfj73/+uX9axYcMGvPLKK5g+fTouvvhiocfmcDjw6aefYtasWRg7diw++eQTfPTRR/j973+vX/px5ZVXYunSpbj88svxs5/9DMePH8czzzyD7OxsbN++navu6dOn0bdvX1x77bUYPnw4IiIisGbNGmzcuBGPP/44ACAoKAh/+ctfMGfOHEyYMAE33nijvhV7RkYG7rnnHiHnID4+Hg888AAWL16Myy+/HNOmTUNxcTGeffZZjB49WsoH//7iF7/AW2+9hdtuuw1ffvklLrjgArS2tmL37t1466239M8Jeuihh/D111/jyiuvRHp6Oo4fP45nn30Wffv21W+uz8rKQkxMDJ5//nlERkYiPDwcY8eOZb73zSgTJkzAvHnzsGTJEhQWFuKyyy5DUFAQ9u7di7fffhtPPvkkrr32Wv1zxpYsWYKrrroKV1xxBbZu3YpPPvmky8uH7HY7nnvuOUydOhUjRozAnDlzkJycjN27d6OoqAifffYZgP9uAX3nnXdi8uTJCAgIwA033NBhzkceeUT/zLDbb78dgYGBeOGFF9DY2Njh50Z1xSuvvIJnn30W11xzDbKysnD69Gm8+OKLiIqK0v9I0hE/+clP0KtXL8yaNQt33nknbDYbXnvtNVOX+c2dOxdPP/00Zs6cic2bNyM5ORmvvfaavnW+GS677DIEBwdj6tSpmDdvHlwuF1588UUkJCTo76R0xbx58/D000/jxhtvxF133YXk5GS8/vrr+kY1be/y2O12vPTSS5gyZQpyc3MxZ84c9OnTB0eOHMGXX36JqKgo/Oc//wHw35/9H/7wB9xwww0ICgrC1KlTvX7I9ZVXXonAwECsWbOmw40+3n333Q43eZg1axbuv/9+vPHGG5gyZQruvPNOxMbG4pVXXkFpaSneffdd/dJZ1j69cccdd6Curg7XXHMNcnJy9H8j3nzzTWRkZGDOnDkAztzD9Yc//AEPP/wwxo0bhxkzZiAkJAQbN25ESkoKlixZYspnrK/xNlavXo20tDTahp2wPt27OaG1AaCtWrVK/75tK+fw8HCPr8DAQO26667T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\n"},"metadata":{}}]},{"cell_type":"code","source":["import time\n","print(time.ctime())"],"metadata":{"id":"FzTQLSzA7KBE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732086479951,"user_tz":-540,"elapsed":13,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"12b6953f-c998-47e6-c13f-207f269ed5b7"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Wed Nov 20 07:07:57 2024\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_Q-_rhRDEbCF","executionInfo":{"status":"ok","timestamp":1732086479951,"user_tz":-540,"elapsed":9,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":51,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"156XfPofuwKHbnUwM_C5OsXcFQTnrALQ9","timestamp":1732083752197},{"file_id":"1dhKaQgjNSlSY_K7euYYreeeJkgK0oqtZ","timestamp":1732072365450},{"file_id":"1GbGxmgAMZhuystjXwDS6RhV4H7XuVjTa","timestamp":1732069495240},{"file_id":"1KBQIg9FOy9qvh7bw7NNmmsFSzD3j6AiY","timestamp":1732064831286},{"file_id":"1LX4nk3U7WyOv2Ex5GgS_vd9S3-Z_SsUb","timestamp":1732062396478},{"file_id":"1IMQH9jO58TQU6prlFa8V5ka2zWp9ssVZ","timestamp":1732030813384},{"file_id":"1LLVIwYoieztpeAKj_JqJnMurCV3Y-hG9","timestamp":1732011760731},{"file_id":"1-tBvNyUYqRF5qgrNiVRPmD-ET-WsxGkP","timestamp":1732010292880}],"gpuType":"T4","authorship_tag":"ABX9TyNQ/q2DoMIaYuuzvfBV/Grl"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}