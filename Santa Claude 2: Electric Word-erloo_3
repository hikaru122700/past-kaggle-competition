{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":88046,"databundleVersionId":10229277,"sourceType":"competition"},{"sourceId":10150129,"sourceType":"datasetVersion","datasetId":4581967},{"sourceId":212262758,"sourceType":"kernelVersion"},{"sourceId":104492,"sourceType":"modelInstanceVersion","modelInstanceId":72255,"modelId":76277}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"print(\"notebook started..\")\n!pip install -q -U transformers --no-index --find-links /kaggle/input/hf-libraries/transformers\n!pip install -q -U accelerate --no-index --find-links /kaggle/input/hf-libraries/accelerate\n!pip install -q -U bitsandbytes --no-index --find-links /kaggle/input/hf-libraries/bitsandbytes\nprint(\"pip installs done!\")\n\nimport numpy as np\nimport pandas as pd\nimport random\nimport math\n\nfrom collections import OrderedDict\nfrom math import exp\n\nimport torch.nn.functional as F\n\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:06.608434Z","iopub.execute_input":"2024-12-30T12:51:06.608665Z","iopub.status.idle":"2024-12-30T12:51:48.359050Z","shell.execute_reply.started":"2024-12-30T12:51:06.608632Z","shell.execute_reply":"2024-12-30T12:51:48.358314Z"}},"outputs":[{"name":"stdout","text":"notebook started..\npip installs done!\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Reload prior submission.csv and optimize from that!!!\n* Set `reuse_last_submission = False` to start fresh\n* Specify any samples we don't think need further optimization\n* Specify any samples we want to fully shuffle between optimization rounds (stuck at local optimum)","metadata":{}},{"cell_type":"code","source":"# Set to False to do a \"clean\" run\nreuse_last_submission = True\n\nif reuse_last_submission:\n    samples = pd.read_csv(\"/kaggle/input/santa-best-code/submission.csv\")    \nelse:\n    samples = pd.read_csv(\"/kaggle/input/santa-2024/sample_submission.csv\")\n\n# If we think some items are well-optimized - including them here will skip them\nskip = [0,1,2,4,5]\n\n# If some samples are badly stuck at local optimum - we fully shuffle between rounds\nshuffle_between_cycles = [3]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:48.360767Z","iopub.execute_input":"2024-12-30T12:51:48.361157Z","iopub.status.idle":"2024-12-30T12:51:48.383151Z","shell.execute_reply.started":"2024-12-30T12:51:48.361116Z","shell.execute_reply":"2024-12-30T12:51:48.382399Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Sorting sample 6 -[StopWords First]\n* Borrowing some help from...\n  \n## https://www.kaggle.com/code/asalhi/sorting-sample-6-stopwords-first","metadata":{}},{"cell_type":"code","source":"#from nltk.corpus import stopwords\n#import nltk\n#import numpy as np\n\n# Download stopwords if needed\n#nltk.download('stopwords')\n#stop_words = set(stopwords.words('english'))\n\n#def custom_sort(text):\n#    words = text.split()\n#    stop_words_in_text = sorted([word for word in words if word.lower() in stop_words])\n#    other_words = sorted([word for word in words if word.lower() not in stop_words])\n#    return \" \".join(stop_words_in_text + other_words)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:48.384258Z","iopub.execute_input":"2024-12-30T12:51:48.384594Z","iopub.status.idle":"2024-12-30T12:51:48.388920Z","shell.execute_reply.started":"2024-12-30T12:51:48.384559Z","shell.execute_reply":"2024-12-30T12:51:48.388024Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Apply the sorting to sample 2 (index 1)\n#samples.loc[1, \"text\"] = custom_sort(samples.loc[1, \"text\"])\nsamples.loc[1,\"text\"] = \"reindeer sleep walk the night and drive mistletoe scrooge laugh gingerbread bake chimney elf jump ornament give family advent fireplace\"\n#\"reindeer mistletoe ornament gingerbread bake the night walk and sleep scrooge drive fireplace chimney jump elf laugh give family advent\"\n#\"advent and bake chimney drive elf family fireplace gingerbread give jump laugh mistletoe night ornament reindeer scrooge sleep the walk\"\n#\"walk the reindeer ornament scrooge sleep night mistletoe laugh jump give gingerbread fireplace family elf drive chimney bake and advent\"\n#\"reindeer walk gingerbread bake the night and sleep scrooge drive chimney jump elf laugh mistletoe give family advent fireplace ornament\"\n#reindeer jump walk gingerbread bake the night and sleep scrooge drive elf laugh mistletoe give family advent fireplace chimney ornament","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:48.389792Z","iopub.execute_input":"2024-12-30T12:51:48.390044Z","iopub.status.idle":"2024-12-30T12:51:48.404646Z","shell.execute_reply.started":"2024-12-30T12:51:48.390021Z","shell.execute_reply":"2024-12-30T12:51:48.403758Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"# Batch-enabled scorer\n* Re-enabled 8-bit quantization\n* Make use of T4x2 setup\n* Credit: https://www.kaggle.com/code/cdeotte/brute-force-first-sample-perplexity-470","metadata":{}},{"cell_type":"code","source":"class LRUCache:\n    def __init__(self, capacity=10**11):\n        self.capacity = capacity\n        self.cache = OrderedDict()\n\n    def get(self, key):\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            return self.cache[key]\n        return None\n\n    def set(self, key, value):\n        self.cache[key] = value\n        self.cache.move_to_end(key)\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)\n\n    def __len__(self):\n        return len(self.cache)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:48.405923Z","iopub.execute_input":"2024-12-30T12:51:48.406219Z","iopub.status.idle":"2024-12-30T12:51:48.418427Z","shell.execute_reply.started":"2024-12-30T12:51:48.406182Z","shell.execute_reply":"2024-12-30T12:51:48.417607Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"import gc\nimport os\nfrom math import exp\nfrom collections import Counter\nfrom typing import List, Optional, Union\n\nimport numpy as np\nimport pandas as pd\nimport transformers\nimport torch\n\nos.environ['OMP_NUM_THREADS'] = '1'\nos.environ['TOKENIZERS_PARALLELISM'] = 'false'\nPAD_TOKEN_LABEL_ID = torch.nn.CrossEntropyLoss().ignore_index\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n\nclass PerplexityCalculator:\n    model_kwargs = {\n        \"attn_implementation\": \"sdpa\",\n        \"device_map\": \"auto\",\n        \"torch_dtype\": torch.float16,\n    }\n    device = torch.device('cuda')\n\n    def __init__(self,  model_path: str = \"/kaggle/input/gemma-2/transformers/gemma-2-9b/2\", capacity=10**11):\n        self.tokenizer = transformers.AutoTokenizer.from_pretrained(model_path, padding_side=\"right\")\n        self.model = transformers.AutoModelForCausalLM.from_pretrained(model_path, **self.model_kwargs)\n        self.loss_fct = torch.nn.CrossEntropyLoss(reduction='none')\n        self.pad_token_label_id = self.loss_fct.ignore_index\n\n        self.model.eval()\n        self.cache = LRUCache(capacity=capacity)\n\n\n    def get_perplexity(self, input_texts, batch_size=128, use_cache=True, verbose=False):\n        single_input = isinstance(input_texts, str)\n        input_texts = [input_texts] if single_input else input_texts\n        \n        results = [None] * len(input_texts)\n        \n        if use_cache:\n            text_to_process = []\n            for i, text in enumerate(input_texts):\n                cached_val = self.cache.get(text)\n                if cached_val is not None:\n                    results[i] = cached_val\n                else:\n                    text_to_process.append(text)\n        else:\n            text_to_process = input_texts.copy()\n\n        loss_list = []\n        batches = len(text_to_process)//batch_size + (len(text_to_process)%batch_size != 0)\n        pbar = range(batches)\n\n        if verbose and batches:\n            pbar = tqdm(range(batches))\n\n        for j in pbar:\n\n            a = j*batch_size\n            b = (j+1)*batch_size\n            input_batch = text_to_process[a:b]\n\n            with torch.no_grad():\n\n                # Explicitly add sequence boundary tokens to the text\n                text_with_special = [f\"{self.tokenizer.bos_token}{text}{self.tokenizer.eos_token}\" for text in input_batch]\n\n                # Tokenize\n                model_inputs = self.tokenizer(\n                    text_with_special,\n                    return_tensors='pt',\n                    add_special_tokens=False,\n                    padding=True,\n                )\n\n                if 'token_type_ids' in model_inputs:\n                    model_inputs.pop('token_type_ids')\n\n                model_inputs = {k: v.to(self.device ) for k, v in model_inputs.items()}\n\n                # Get model output\n                output = self.model(**model_inputs, use_cache=False)\n                logits = output['logits']\n\n                label = model_inputs['input_ids']\n                label[label == self.tokenizer.pad_token_id] = self.pad_token_label_id\n\n                # Shift logits and labels for calculating loss\n                shift_logits = logits[..., :-1, :].contiguous()  # Drop last prediction\n                shift_labels = label[..., 1:].contiguous()  # Drop first input\n\n                # Calculate token-wise loss\n                loss = self.loss_fct(\n                    shift_logits.view(-1, shift_logits.size(-1)),\n                    shift_labels.view(-1)\n                )\n\n                loss = loss.view(len(logits), -1)\n                valid_length = (shift_labels != self.pad_token_label_id).sum(dim=-1)\n                loss = torch.sum(loss, -1) / valid_length\n\n                loss_list += loss.cpu().tolist()\n\n        ppl = [exp(i) for i in loss_list]\n\n        index_ppl = 0\n        for index_el, el in enumerate(results):\n            if el is None:\n                results[index_el] = ppl[index_ppl]\n                self.cache.set(text_to_process[index_ppl], ppl[index_ppl])\n                index_ppl += 1\n        return results[0] if single_input else results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:48.419576Z","iopub.execute_input":"2024-12-30T12:51:48.419820Z","iopub.status.idle":"2024-12-30T12:51:48.950222Z","shell.execute_reply.started":"2024-12-30T12:51:48.419797Z","shell.execute_reply":"2024-12-30T12:51:48.949265Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# Load custom scorer","metadata":{}},{"cell_type":"code","source":"#gemma-2-9b (competition scoring metric)\nscorer = PerplexityCalculator('/kaggle/input/gemma-2/transformers/gemma-2-9b/2')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:48.952832Z","iopub.execute_input":"2024-12-30T12:51:48.953223Z","iopub.status.idle":"2024-12-30T12:54:46.901975Z","shell.execute_reply.started":"2024-12-30T12:51:48.953197Z","shell.execute_reply":"2024-12-30T12:54:46.901290Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"54b3651f0823496d820df0debdcc3a1d"}},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"# Get our starting scores\n* On initial dataset scorer returns some NaN's - we'll account for that..\n* Since we've re-run this notebook a few times - further re-runs may not improve the score much...","metadata":{}},{"cell_type":"code","source":"%%time\n# Get actual mean value \nscores = []\nfor row in range(len(samples)):\n    score = scorer.get_perplexity(samples.iloc[row].text, batch_size=2, use_cache=True, verbose=False)\n    print(samples.iloc[row].text)\n    print(f\"Score: {score:.2f}\\n\")\n    scores.append(score)\n\nprint(f\"Starting mean score: {np.mean(scores):.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:46.902947Z","iopub.execute_input":"2024-12-30T12:54:46.903430Z","iopub.status.idle":"2024-12-30T12:54:48.461183Z","shell.execute_reply.started":"2024-12-30T12:54:46.903400Z","shell.execute_reply":"2024-12-30T12:54:48.460360Z"}},"outputs":[{"name":"stdout","text":"reindeer mistletoe elf gingerbread family advent scrooge chimney fireplace ornament\nScore: 467.99\n\nreindeer sleep walk the night and drive mistletoe scrooge laugh gingerbread bake chimney elf jump ornament give family advent fireplace\nScore: 439.63\n\nsleigh yuletide beard carol cheer chimney decorations gifts grinch holiday holly jingle magi naughty nice nutcracker ornament polar workshop stocking\nScore: 297.47\n\nsleigh of the magi yuletide cheer is unwrap gifts relax and eat cheer decorations carol sing chimney visit workshop grinch holiday holly jingle naughty nice nutcracker polar beard ornament stocking\nScore: 195.85\n\nof and to in the as you that it we with from have not night season eggnog milk chocolate candy peppermint cookie fruitcake toy doll game puzzle greeting card wrapping paper bow wreath poinsettia star angel snowglobe candle fireplace wish dream believe wonder hope joy peace merry hohoho kaggle workshop\nScore: 67.68\n\nfrom and and as and have the in is it of not that the to we with you yuletide cheer advent angel bake beard believe bow candy candle carol cheer chocolate chimney cookie decorations doll dream drive eat eggnog elf family fireplace fireplace chimney fruitcake game give gifts gingerbread grinch greeting card holly hohoho holiday hope jingle jump joy kaggle laugh magi merry milk mistletoe naughty nice night nutcracker ornament ornament of the night peace peppermint polar poinsettia puzzle reindeer relax scrooge season sing sleigh sleep snowglobe star stocking toy unwrap visit walk wish wonder workshop workshop wreath wrapping paper\nScore: 33.31\n\nStarting mean score: 250.32\nCPU times: user 998 ms, sys: 73.3 ms, total: 1.07 s\nWall time: 1.55 s\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"# Our \"Simulated Annealing\" Implementation\n\nKey parameters for this optimizer:\n\n1. Temperature progression:\n   - Starts at `temp_start=3.0`, increases by `temp_start_increase_per_cycle=1.0` each cycle\n   - Each cycle cools to `temp_end=0.2` using `cooling_rate=0.95`\n   - Runs total of `reheat_cycles=8` cycles (so final cycle starts at 10.0)\n\n2. Temperature step behavior:\n   - Makes `steps_per_temp=170` attempts at each temperature level\n   - This **results in a ~5 hour runtime** (assuming samples 0 and 5 are skipped)\n   - When improvements found, temporarily drops to `temp_end` for cycles by `low_temp_samples_after_improve`\n   - Returns to original temperature to continue cooling cycle\n\n3. Batch processing efficiency:\n   - Evaluates up to `max_batch_size=64` arrangements simultaneously\n   - Limits total words processed to `max_words_per_batch=640` to manage memory\n   - Automatically adjusts batch size based on sequence length\n\n4. Between-cycle behavior:\n   - Maintains best arrangement found across all cycles\n   - Has `shuffle_chance_between_cycles=0.0` probability of randomizing sequence\n   - Each new cycle starts at higher temperature to explore further from optimum\n\n### Understanding Temperature and Acceptance Probabilities\nAcceptance probability = exp(-delta/T), where delta is score difference and T is temperature\n\n* At max temp (10.0): +1 worse: 90% chance, +5: 61%, +10: 37%, +20: 14%\n* At starting temp (3.0): +1 worse: 72% chance, +5: 19%, +10: 4%, +20: 0.1%\n* At min temp (0.2): +1 worse: 0.67% chance, +5 or worse: ≈0%\n\nBetter-scoring arrangements are always accepted. Higher temperatures allow exploring further from current solution, while minimum temperature mainly accepts improvements.\n   \nProgress indicators:\n* `>` - found a new best score\n* `<` - accepted a worse score (for exploration)\n* `-` - rejected the new arrangement (only prints 10% of the time)\n* `x` - skipped invalid arrangement (NaN score)","metadata":{"_kg_hide-input":false}},{"cell_type":"code","source":"# ******************** mutate_sentence *********************\n# Make a small change to a list of words\n# Picks one of 5 possible mutations to the list\n# - swap 2 words\n# - remove 1 word and reinsert it at random\n# - pick 4 indices and shuffle the words at those locations\n# - remove a segment of words and reinsert it at random\n# - same as above, but flip the segment\ndef mutate_sentence(sentence_in):\n    sentence = sentence_in.copy()\n    #print('       , , ',  sentence)\n    n = len(sentence)\n   \n    if np.random.randint(100) < 80: # make a small mutation \n        if np.random.randint(100) < 33: # swap 2 words\n            i, j = random.sample(range(n), 2)\n            sentence[i], sentence[j] = sentence[j], sentence[i]\n            #print('swap',i, j,  sentence)\n            return(sentence)\n        elif  np.random.randint(100) < 50:                           # shift 1 word to another spot\n            i = np.random.choice(n) # word in slot i\n            j = np.random.choice(n) # slot j\n            t = sentence.pop(i)\n            sentence.insert(j, t)\n            #print('shift',i, j,  sentence)\n            return(sentence)\n        else:  # pick 4 random slots and permute the words in place\n            t = 4\n            p0 = random.sample(range(n), t)\n            #print(p0)\n            p1 = random.sample(p0, t)\n            #print(p1)\n            sentence[p0[0]], sentence[p0[1]], sentence[p0[2]], sentence[p0[3]] = sentence[p1[0]], sentence[p1[1]], sentence[p1[2]], sentence[p1[3]]\n            if n != len(sentence): print('I fail at math')\n            #print('       , , ',  sentence)\n        return(sentence)\n     # otherwise make a larger change - we'll move a segment\n    i, j = random.sample(range(n + 1), 2)\n    if i > j: i, j = j, i\n   \n    if np.random.randint(100) < 90:   # pick a random segment and relocate it\n        segment = sentence[i:j]\n        remains = sentence[:i]\n        if j < n: remains = remains + sentence[j:]\n        t = np.random.choice(len(remains)+ 1) # insert it here\n        sentence = remains[:t] + segment + remains[t:]\n        if n != len(sentence): print('I fail at math')\n        #print('segment',i, j,  sentence)\n        return(sentence)\n    else:            # pick a random segment, reverse it and relocate that\n        segment = sentence[i:j]\n        segment.reverse()\n        remains = sentence[:i]\n        if j < n: remains = remains + sentence[j:]\n        t = np.random.choice(len(remains)+ 1) # insert it here\n        sentence = remains[:t] + segment + remains[t:]\n        if n != len(sentence): print('mutate_sentence() has gone very wrong')\n        #print('segment',i, j,  sentence)\n        return(sentence)\n    return(sentence)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.462523Z","iopub.execute_input":"2024-12-30T12:54:48.462899Z","iopub.status.idle":"2024-12-30T12:54:48.473833Z","shell.execute_reply.started":"2024-12-30T12:54:48.462860Z","shell.execute_reply":"2024-12-30T12:54:48.472990Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"This is the mutation function used for SA:","metadata":{}},{"cell_type":"code","source":"def mutate(text):\n    child = text.copy()\n    # 候補リスト\n    mutation_types = ['swap2', 'swap3', 'swap', 'sort', 'sort2', 'shift', 'shiftlarge', 'inversion', 'scramble']\n    \n    # インデックスが若いほど大きい重みを付ける\n    # 例: [9, 8, 7, 6, 5, 4, 3, 2, 1] のような降順\n    n = len(mutation_types)\n    weights = [1 for i in range(n)]  # 9,8,7,...,1\n    \n    # 重み付きで1つ選択する\n    mutation_type = random.choices(mutation_types, weights=weights, k=1)[0]\n    #child = child.split() # Convert child to a list of words \n    n = len(child) \n    if mutation_type == \"swap2\":\n        i,j = random.sample(range(n),2)\n        child[i], child[j] = child[j], child[i] \n    elif mutation_type == \"swap3\":\n        i,j,k = random.sample(range(n),3)\n        child[i], child[j], child[k] = child[j], child[k], child[i] \n    elif mutation_type == 'swap': \n        #mutation_size = random.randint(1, n//3) \n        mutation_size = random.randint(1, 4)\n        for _ in range(mutation_size): \n            i, j = random.sample(range(n), 2) \n            child[i], child[j] = child[j], child[i] \n    elif mutation_type == \"sort\":\n        segment_length = random.randint(3, n) \n        start = random.randint(0, n - segment_length) \n        end = start + segment_length\n        child[start:end] = sorted(child[start:end])\n    elif mutation_type == \"sort2\":\n        segment_length = random.randint(3, n) \n        start = random.randint(0, n - segment_length) \n        end = start + segment_length\n        child[start:end] = sorted(child[start:end])\n    elif mutation_type == 'shift':\n        i = np.random.choice(n) # word in slot i\n        j = np.random.choice(n) # slot j\n        t = child.pop(i)\n        child.insert(j, t)\n    elif mutation_type == 'shiftlarge':\n        i = np.random.randint(0, n-1) # word in slot i \n        k = np.random.randint(1, 4) # length of the segment to move (1 to 4) \n        j = np.random.randint(0, n-1)\n        # Ensure j is not within the segment to be moved \n        while j >= i and j <= i + k - 1: \n            j = np.random.randint(0, n-1)\n        # Extract the segment and remove it from the list \n        t = child[i:i+k] \n        del child[i:i+k] \n        # Insert the segment at the new position \n        for index, word in enumerate(t): \n            child.insert(j + index, word)\n    elif mutation_type == 'inversion': \n        segment_length = random.randint(3, 5) \n        start = random.randint(0, n - segment_length) \n        end = start + segment_length - 1\n        child[start:end + 1] = reversed(child[start:end + 1])\n    elif mutation_type == 'scramble': \n        segment_length = random.randint(3, 5) \n        start = random.randint(0, n - segment_length) \n        end = start + segment_length - 1 \n        subset = child[start:end+1] \n        random.shuffle(subset) \n        child[start:end+1] = subset \n    elif mutation_type == \"shuffle\":\n        random.shuffle(child)\n    if text == child:\n        child = mutate(child)\n    return child #\" \".join(child)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.474773Z","iopub.execute_input":"2024-12-30T12:54:48.475012Z","iopub.status.idle":"2024-12-30T12:54:48.490781Z","shell.execute_reply.started":"2024-12-30T12:54:48.474989Z","shell.execute_reply":"2024-12-30T12:54:48.490041Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"Change the parameters here:","metadata":{}},{"cell_type":"code","source":"from sortedcontainers import SortedSet, SortedList, SortedDict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.491733Z","iopub.execute_input":"2024-12-30T12:54:48.491973Z","iopub.status.idle":"2024-12-30T12:54:48.513788Z","shell.execute_reply.started":"2024-12-30T12:54:48.491949Z","shell.execute_reply":"2024-12-30T12:54:48.513139Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"math.log(0.1)/math.log(0.8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.514817Z","iopub.execute_input":"2024-12-30T12:54:48.515154Z","iopub.status.idle":"2024-12-30T12:54:48.523011Z","shell.execute_reply.started":"2024-12-30T12:54:48.515119Z","shell.execute_reply":"2024-12-30T12:54:48.522363Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"10.318851158516171"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"# temp_start = 1 #30 #30 #50 #3.0                      # Initial temperature for first cycle\n# temp_end = 0.1                        # Final/minimum temperature\n# reheat_cycles = 2  #8                   # Number of full heating/cooling cycles to run\n# temp_start_increase_per_cycle = 1.0 #1  # How much to increase starting temp each cycle\n# cooling_rate = 0.80 #0.95                   # Temperature reduction multiplier each step \n# steps_per_temp = 300 #170 #300 #170                   # Attempts at each temperature level\n# low_temp_samples_after_improve = steps_per_temp * 5  # Samples done at min temp after improvements (extends cycle)\n# max_batch_size = 64           # Maximum sequences to evaluate at once\n# max_words_per_batch = 640            # Total word limit per batch to manage memory\n# shuffle_chance_between_cycles = 1.0   # Probability of completely shuffling the sequence between cycles\n# max_len_text_que = 100\n# initial_trials = 10\n\n# # 空白文字で単語に分割\n# def split_into_words(char_list):\n#     words = ''.join(char_list).split(' ')  # リストを文字列に結合し、空白で分割\n#     return words\n\n\n\n# def simulated_annealing_optimize(text: str, pretext = \"\", temp_start=temp_start, temp_end=temp_end, \n#                                cooling_rate=cooling_rate, samples_per_temp=steps_per_temp, \n#                                max_batch_size=max_batch_size, max_words_per_batch=max_words_per_batch,\n#                                reheat_cycles=reheat_cycles, low_temp_samples_after_improve=low_temp_samples_after_improve, shuffle_chance_between_cycles = shuffle_chance_between_cycles, verbose=False,\n#                                 max_len_text_que = max_len_text_que, initial_trials=initial_trials):\n#     text_que = SortedSet()\n#     print(f\"text: {text}\")\n\n#     words_list = text.split()\n#     # text = f\"'{text}'\"\n#     # print(f\"text: {text}\")\n#     score = scorer.get_perplexity(text)\n#     # print(f\"words_list: {words_list}, joined_text: {' '.join(words_list)}\")\n#     text_que.add((score, tuple(words_list), temp_start))\n#     best = ''\n#     best_score = 1 << 60\n#     print(f\"これからSAでの探索を開始します.\")\n#     while len(text_que) > 0:\n#         current_score, current_tuple, current_temp = text_que.pop()\n#         current = list(current_tuple)  # リストに戻す\n        \n#         # print(f\"current:{current}\")\n#         # 単語リスト\n#         # current = split_into_words(current)\n#         current_temp *= cooling_rate\n#         print(f\"current_score: {current_score}, current: {' '.join(current)}\")\n        \n#         neighbors = []\n#         neighbor_texts = []\n#         for _ in range(max_batch_size):\n#             neighbor = current.copy()\n#             neighbor = mutate(neighbor)\n#             neighbors.append(neighbor)\n#             neighbor_texts.append(pretext + ' '.join(neighbor))\n#             # print(f\"neighbor_text: {' '.join(neighbor)}\")\n        \n#         neighbor_scores = scorer.get_perplexity(neighbor_texts, batch_size=max_batch_size, use_cache=True, verbose=False)\n#         for neighbor, neighbor_score in zip(neighbors, neighbor_scores):\n#             if math.isnan(neighbor_score):\n#                 if verbose:\n#                     print(\"x\", end=\"\", flush=True)\n#                 continue\n#             if best_score * 1.5 < neighbor_score:\n#                 continue\n#             delta = neighbor_score - current_score\n#             # if delta < 0 or random.random() < math.exp(-delta / current_temp):\n#             # 現在はランダム性が全くないので改善できそう\n            \n#             if delta < 0 or random.random() < math.exp(-delta / current_temp):\n#                 # print(f\"add_neighbor: {neighbor}\")\n#                 text_que.add((neighbor_score, tuple(neighbor), current_temp))\n#                 if best_score > neighbor_score:\n#                     best_score = neighbor_score\n#                     best = neighbor\n#                     print(f\"\\n best_score: {best_score}, {' '.join(best)}\")\n#         print(f\"len_text_que: {len(text_que)}, best_score: {best_score}\")\n#         while len(text_que) > max_len_text_que:\n#             text_que.pop()\n\n#     print(f\"best: {best}\")\n    \n#     return pretext + ' '.join(best), best_score\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.524319Z","iopub.execute_input":"2024-12-30T12:54:48.524632Z","iopub.status.idle":"2024-12-30T12:54:48.535738Z","shell.execute_reply.started":"2024-12-30T12:54:48.524598Z","shell.execute_reply":"2024-12-30T12:54:48.534930Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"for idx, row in samples.iterrows():\n    print(idx, row.text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.536975Z","iopub.execute_input":"2024-12-30T12:54:48.537347Z","iopub.status.idle":"2024-12-30T12:54:48.558622Z","shell.execute_reply.started":"2024-12-30T12:54:48.537306Z","shell.execute_reply":"2024-12-30T12:54:48.557838Z"}},"outputs":[{"name":"stdout","text":"0 reindeer mistletoe elf gingerbread family advent scrooge chimney fireplace ornament\n1 reindeer sleep walk the night and drive mistletoe scrooge laugh gingerbread bake chimney elf jump ornament give family advent fireplace\n2 sleigh yuletide beard carol cheer chimney decorations gifts grinch holiday holly jingle magi naughty nice nutcracker ornament polar workshop stocking\n3 sleigh of the magi yuletide cheer is unwrap gifts relax and eat cheer decorations carol sing chimney visit workshop grinch holiday holly jingle naughty nice nutcracker polar beard ornament stocking\n4 of and to in the as you that it we with from have not night season eggnog milk chocolate candy peppermint cookie fruitcake toy doll game puzzle greeting card wrapping paper bow wreath poinsettia star angel snowglobe candle fireplace wish dream believe wonder hope joy peace merry hohoho kaggle workshop\n5 from and and as and have the in is it of not that the to we with you yuletide cheer advent angel bake beard believe bow candy candle carol cheer chocolate chimney cookie decorations doll dream drive eat eggnog elf family fireplace fireplace chimney fruitcake game give gifts gingerbread grinch greeting card holly hohoho holiday hope jingle jump joy kaggle laugh magi merry milk mistletoe naughty nice night nutcracker ornament ornament of the night peace peppermint polar poinsettia puzzle reindeer relax scrooge season sing sleigh sleep snowglobe star stocking toy unwrap visit walk wish wonder workshop workshop wreath wrapping paper\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"# Run and Submit!","metadata":{}},{"cell_type":"markdown","source":"Change the text to optimize here: either a full text, then use split afterwards (processing_words.split()). Or define the words, combining words which should processed together. A pretext or aftertext can also be added, it has to be added within the code (see #!!!!!!!!!!!!!!!!) and do not forget the empty space. This text has to be removed from the words and will be kept unchanged at the beginning (or end).","metadata":{}},{"cell_type":"code","source":"text = \"sleigh of the magi yuletide cheer is unwrap gifts relax and eat cheer decorations carol sing chimney visit workshop grinch holiday holly jingle naughty nice nutcracker polar beard ornament stocking\"\n\nscorer.get_perplexity(text, batch_size=1, use_cache=False, verbose=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:54:48.559601Z","iopub.execute_input":"2024-12-30T12:54:48.559878Z","iopub.status.idle":"2024-12-30T12:54:48.698031Z","shell.execute_reply.started":"2024-12-30T12:54:48.559822Z","shell.execute_reply":"2024-12-30T12:54:48.697290Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"195.84896001735729"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"import optuna\n\n# テキストを単語に分割\ntext = \"sleigh of the magi yuletide cheer is unwrap gifts relax and eat cheer decorations carol sing chimney visit workshop grinch holiday holly jingle naughty nice nutcracker polar beard ornament stocking\"\nwords = text.split()\n\n# 分割数\nnum_splits = 8\nnum_split_points = num_splits - 1\ntotal_words = len(words)\n\n# パープレキシティを計算する関数（仮）\n# 実際の scorer.get_perplexity に置き換えてください\ndef get_perplexity(sub_text):\n    # ここではダミーのパープレキシティを返します。\n    # 実際には scorer.get_perplexity を使用してください。\n    return scorer.get_perplexity(sub_text, batch_size=1, use_cache=False, verbose=False)\n\n# 目的関数の定義\ndef objective(trial):\n    split_points = []\n    lower = 1\n    for i in range(num_split_points):\n        # 残りの分割点に必要な最低位置を確保\n        max_split = total_words - (num_split_points - i)\n        split = trial.suggest_int(f'split_{i}', lower, max_split)\n        split_points.append(split)\n        lower = split + 1  # 次の分割点は現在の分割点より後に設定\n\n    split_points = sorted(split_points)\n\n    # 分割点に基づいてテキストを分割\n    splits = []\n    previous = 0\n    for point in split_points:\n        split = ' '.join(words[previous:point])\n        splits.append(split)\n        previous = point\n    # 最後の部分\n    splits.append(' '.join(words[previous:]))\n\n    # パープレキシティの合計を計算\n    total_perplexity = 0\n    for split in splits:\n        perplexity = get_perplexity(split)\n        total_perplexity += perplexity\n\n    return total_perplexity\n\n# Optunaスタディの作成\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=100)\n\n# 最適な分割点の取得\nbest_split_points = sorted([study.best_params[f'split_{i}'] for i in range(num_split_points)])\nsplits = []\nprevious = 0\nfor point in best_split_points:\n    split = ' '.join(words[previous:point])\n    splits.append(split)\n    previous = point\nsplits.append(' '.join(words[previous:]))\n\n# 結果の表示\nprint(\"最適な分割点:\", best_split_points)\nprint(\"分割後のテキスト:\")\nfor i, split in enumerate(splits, 1):\n    print(f\"Part {i}: {split}, score: {get_perplexity(split)}\")\n\nprint(\"合計パープレキシティ:\", study.best_value)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:58:23.832464Z","iopub.execute_input":"2024-12-30T12:58:23.832813Z","iopub.status.idle":"2024-12-30T12:59:45.356944Z","shell.execute_reply.started":"2024-12-30T12:58:23.832780Z","shell.execute_reply":"2024-12-30T12:59:45.356051Z"}},"outputs":[{"name":"stderr","text":"[I 2024-12-30 12:58:23,839] A new study created in memory with name: no-name-a110e7d0-fc1e-4de4-a91e-bb70778df186\n[I 2024-12-30 12:58:24,716] Trial 0 finished with value: 410325653.8555921 and parameters: {'split_0': 1, 'split_1': 20, 'split_2': 22, 'split_3': 25, 'split_4': 26, 'split_5': 27, 'split_6': 29}. Best is trial 0 with value: 410325653.8555921.\n[I 2024-12-30 12:58:25,522] Trial 1 finished with value: 476757202.4270958 and parameters: {'split_0': 12, 'split_1': 19, 'split_2': 23, 'split_3': 24, 'split_4': 26, 'split_5': 27, 'split_6': 28}. Best is trial 0 with value: 410325653.8555921.\n[I 2024-12-30 12:58:26,312] Trial 2 finished with value: 85496543.00724903 and parameters: {'split_0': 12, 'split_1': 17, 'split_2': 21, 'split_3': 25, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:27,111] Trial 3 finished with value: 439263767.426404 and parameters: {'split_0': 7, 'split_1': 17, 'split_2': 18, 'split_3': 21, 'split_4': 24, 'split_5': 26, 'split_6': 27}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:27,902] Trial 4 finished with value: 149769239.5821206 and parameters: {'split_0': 10, 'split_1': 14, 'split_2': 18, 'split_3': 19, 'split_4': 23, 'split_5': 24, 'split_6': 27}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:28,695] Trial 5 finished with value: 447929583.9525464 and parameters: {'split_0': 17, 'split_1': 23, 'split_2': 25, 'split_3': 26, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:29,486] Trial 6 finished with value: 496393190.99876505 and parameters: {'split_0': 18, 'split_1': 19, 'split_2': 22, 'split_3': 24, 'split_4': 26, 'split_5': 27, 'split_6': 29}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:30,272] Trial 7 finished with value: 483779913.18144494 and parameters: {'split_0': 5, 'split_1': 15, 'split_2': 17, 'split_3': 25, 'split_4': 26, 'split_5': 27, 'split_6': 28}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:31,041] Trial 8 finished with value: 97914524.12330827 and parameters: {'split_0': 6, 'split_1': 17, 'split_2': 24, 'split_3': 25, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:31,829] Trial 9 finished with value: 387962220.6152969 and parameters: {'split_0': 13, 'split_1': 14, 'split_2': 23, 'split_3': 25, 'split_4': 26, 'split_5': 27, 'split_6': 29}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:32,631] Trial 10 finished with value: 507614289.78048193 and parameters: {'split_0': 23, 'split_1': 24, 'split_2': 25, 'split_3': 26, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 2 with value: 85496543.00724903.\n[I 2024-12-30 12:58:33,466] Trial 11 finished with value: 26224422.21977993 and parameters: {'split_0': 5, 'split_1': 8, 'split_2': 11, 'split_3': 13, 'split_4': 17, 'split_5': 19, 'split_6': 22}. Best is trial 11 with value: 26224422.21977993.\n[I 2024-12-30 12:58:34,270] Trial 12 finished with value: 86314807.27603632 and parameters: {'split_0': 2, 'split_1': 7, 'split_2': 10, 'split_3': 11, 'split_4': 15, 'split_5': 18, 'split_6': 21}. Best is trial 11 with value: 26224422.21977993.\n[I 2024-12-30 12:58:35,079] Trial 13 finished with value: 164574107.56268176 and parameters: {'split_0': 9, 'split_1': 10, 'split_2': 11, 'split_3': 14, 'split_4': 18, 'split_5': 19, 'split_6': 22}. Best is trial 11 with value: 26224422.21977993.\n[I 2024-12-30 12:58:35,882] Trial 14 finished with value: 448012299.1757548 and parameters: {'split_0': 16, 'split_1': 22, 'split_2': 24, 'split_3': 26, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 11 with value: 26224422.21977993.\n[I 2024-12-30 12:58:36,694] Trial 15 finished with value: 23838586.40658593 and parameters: {'split_0': 4, 'split_1': 10, 'split_2': 14, 'split_3': 21, 'split_4': 23, 'split_5': 25, 'split_6': 27}. Best is trial 15 with value: 23838586.40658593.\n[I 2024-12-30 12:58:37,491] Trial 16 finished with value: 68773649.74882545 and parameters: {'split_0': 5, 'split_1': 6, 'split_2': 7, 'split_3': 15, 'split_4': 20, 'split_5': 23, 'split_6': 25}. Best is trial 15 with value: 23838586.40658593.\n[I 2024-12-30 12:58:38,290] Trial 17 finished with value: 29120664.086562604 and parameters: {'split_0': 2, 'split_1': 10, 'split_2': 15, 'split_3': 21, 'split_4': 23, 'split_5': 25, 'split_6': 27}. Best is trial 15 with value: 23838586.40658593.\n[I 2024-12-30 12:58:39,098] Trial 18 finished with value: 24540886.509506874 and parameters: {'split_0': 4, 'split_1': 10, 'split_2': 14, 'split_3': 19, 'split_4': 21, 'split_5': 23, 'split_6': 25}. Best is trial 15 with value: 23838586.40658593.\n[I 2024-12-30 12:58:39,905] Trial 19 finished with value: 447326279.857749 and parameters: {'split_0': 8, 'split_1': 12, 'split_2': 15, 'split_3': 19, 'split_4': 22, 'split_5': 24, 'split_6': 26}. Best is trial 15 with value: 23838586.40658593.\n[I 2024-12-30 12:58:40,709] Trial 20 finished with value: 20300598.829584043 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 13, 'split_3': 17, 'split_4': 21, 'split_5': 23, 'split_6': 25}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:41,510] Trial 21 finished with value: 28296730.463611767 and parameters: {'split_0': 3, 'split_1': 4, 'split_2': 14, 'split_3': 18, 'split_4': 21, 'split_5': 23, 'split_6': 25}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:42,313] Trial 22 finished with value: 21595074.395752076 and parameters: {'split_0': 4, 'split_1': 10, 'split_2': 13, 'split_3': 17, 'split_4': 21, 'split_5': 23, 'split_6': 25}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:43,152] Trial 23 finished with value: 50757277.845856234 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 12, 'split_3': 17, 'split_4': 24, 'split_5': 26, 'split_6': 28}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:43,965] Trial 24 finished with value: 23496114.45095606 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 3, 'split_3': 5, 'split_4': 8, 'split_5': 21, 'split_6': 24}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:44,775] Trial 25 finished with value: 42075497.48738312 and parameters: {'split_0': 1, 'split_1': 4, 'split_2': 5, 'split_3': 7, 'split_4': 9, 'split_5': 15, 'split_6': 18}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:45,586] Trial 26 finished with value: 399514602.9202791 and parameters: {'split_0': 7, 'split_1': 9, 'split_2': 20, 'split_3': 23, 'split_4': 25, 'split_5': 26, 'split_6': 27}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:46,385] Trial 27 finished with value: 406938254.45746195 and parameters: {'split_0': 10, 'split_1': 12, 'split_2': 17, 'split_3': 22, 'split_4': 25, 'split_5': 26, 'split_6': 27}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:47,198] Trial 28 finished with value: 70645394.25918946 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 3, 'split_3': 5, 'split_4': 6, 'split_5': 9, 'split_6': 13}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:48,005] Trial 29 finished with value: 67430121.73669484 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 8, 'split_3': 11, 'split_4': 15, 'split_5': 21, 'split_6': 24}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:48,800] Trial 30 finished with value: 45432306.44216195 and parameters: {'split_0': 3, 'split_1': 7, 'split_2': 12, 'split_3': 17, 'split_4': 20, 'split_5': 22, 'split_6': 24}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:49,615] Trial 31 finished with value: 45665639.293851376 and parameters: {'split_0': 4, 'split_1': 12, 'split_2': 16, 'split_3': 20, 'split_4': 23, 'split_5': 25, 'split_6': 26}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:50,442] Trial 32 finished with value: 31355295.106426362 and parameters: {'split_0': 6, 'split_1': 9, 'split_2': 13, 'split_3': 22, 'split_4': 24, 'split_5': 26, 'split_6': 28}. Best is trial 20 with value: 20300598.829584043.\n[I 2024-12-30 12:58:51,257] Trial 33 finished with value: 4586266.110208858 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 10, 'split_3': 16, 'split_4': 22, 'split_5': 24, 'split_6': 26}. Best is trial 33 with value: 4586266.110208858.\n[I 2024-12-30 12:58:52,069] Trial 34 finished with value: 23795442.527838796 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 9, 'split_3': 16, 'split_4': 21, 'split_5': 24, 'split_6': 26}. Best is trial 33 with value: 4586266.110208858.\n[I 2024-12-30 12:58:52,912] Trial 35 finished with value: 75826358.62435384 and parameters: {'split_0': 7, 'split_1': 9, 'split_2': 19, 'split_3': 23, 'split_4': 25, 'split_5': 27, 'split_6': 28}. Best is trial 33 with value: 4586266.110208858.\n[I 2024-12-30 12:58:53,737] Trial 36 finished with value: 48478431.87099194 and parameters: {'split_0': 13, 'split_1': 15, 'split_2': 19, 'split_3': 24, 'split_4': 26, 'split_5': 28, 'split_6': 29}. Best is trial 33 with value: 4586266.110208858.\n[I 2024-12-30 12:58:54,559] Trial 37 finished with value: 2247582.6591898347 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 6, 'split_3': 11, 'split_4': 18, 'split_5': 22, 'split_6': 24}. Best is trial 37 with value: 2247582.6591898347.\n[I 2024-12-30 12:58:55,403] Trial 38 finished with value: 858057.7845322182 and parameters: {'split_0': 3, 'split_1': 6, 'split_2': 9, 'split_3': 13, 'split_4': 19, 'split_5': 22, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:58:56,199] Trial 39 finished with value: 495736012.6124179 and parameters: {'split_0': 21, 'split_1': 24, 'split_2': 25, 'split_3': 26, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:58:57,011] Trial 40 finished with value: 32340324.266717914 and parameters: {'split_0': 6, 'split_1': 8, 'split_2': 10, 'split_3': 13, 'split_4': 17, 'split_5': 22, 'split_6': 26}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:58:57,818] Trial 41 finished with value: 7402679.0206924565 and parameters: {'split_0': 3, 'split_1': 6, 'split_2': 8, 'split_3': 12, 'split_4': 18, 'split_5': 22, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:58:58,631] Trial 42 finished with value: 5477636.788936988 and parameters: {'split_0': 3, 'split_1': 6, 'split_2': 8, 'split_3': 11, 'split_4': 18, 'split_5': 22, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:58:59,444] Trial 43 finished with value: 5869158.6241204 and parameters: {'split_0': 2, 'split_1': 6, 'split_2': 8, 'split_3': 11, 'split_4': 18, 'split_5': 22, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:00,260] Trial 44 finished with value: 45951104.95134933 and parameters: {'split_0': 2, 'split_1': 5, 'split_2': 7, 'split_3': 10, 'split_4': 19, 'split_5': 21, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:01,071] Trial 45 finished with value: 32716466.941150296 and parameters: {'split_0': 5, 'split_1': 7, 'split_2': 10, 'split_3': 13, 'split_4': 19, 'split_5': 22, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:01,892] Trial 46 finished with value: 472988309.0752121 and parameters: {'split_0': 15, 'split_1': 20, 'split_2': 22, 'split_3': 24, 'split_4': 26, 'split_5': 27, 'split_6': 28}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:02,732] Trial 47 finished with value: 62857395.33942351 and parameters: {'split_0': 8, 'split_1': 11, 'split_2': 13, 'split_3': 15, 'split_4': 18, 'split_5': 21, 'split_6': 23}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:03,568] Trial 48 finished with value: 35290083.069717236 and parameters: {'split_0': 11, 'split_1': 13, 'split_2': 15, 'split_3': 16, 'split_4': 19, 'split_5': 22, 'split_6': 26}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:04,369] Trial 49 finished with value: 13074225.332987625 and parameters: {'split_0': 2, 'split_1': 6, 'split_2': 9, 'split_3': 11, 'split_4': 16, 'split_5': 20, 'split_6': 23}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:05,185] Trial 50 finished with value: 87042979.54976925 and parameters: {'split_0': 19, 'split_1': 20, 'split_2': 22, 'split_3': 25, 'split_4': 27, 'split_5': 28, 'split_6': 29}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:05,992] Trial 51 finished with value: 7402679.0206924565 and parameters: {'split_0': 3, 'split_1': 6, 'split_2': 8, 'split_3': 12, 'split_4': 18, 'split_5': 22, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:06,813] Trial 52 finished with value: 42208214.3179987 and parameters: {'split_0': 5, 'split_1': 8, 'split_2': 11, 'split_3': 14, 'split_4': 17, 'split_5': 24, 'split_6': 26}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:07,619] Trial 53 finished with value: 18417994.066831876 and parameters: {'split_0': 4, 'split_1': 7, 'split_2': 9, 'split_3': 12, 'split_4': 18, 'split_5': 22, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:08,431] Trial 54 finished with value: 9795695.426861318 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 9, 'split_4': 16, 'split_5': 20, 'split_6': 23}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:09,241] Trial 55 finished with value: 1451419.3441748982 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 9, 'split_4': 13, 'split_5': 20, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:10,050] Trial 56 finished with value: 2015232.7283840878 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 9, 'split_4': 14, 'split_5': 20, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:10,859] Trial 57 finished with value: 7166843.472146455 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 9, 'split_4': 12, 'split_5': 18, 'split_6': 23}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:11,670] Trial 58 finished with value: 1387641.193620092 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 8, 'split_4': 13, 'split_5': 18, 'split_6': 22}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:12,480] Trial 59 finished with value: 1313241.7459054296 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 8, 'split_4': 13, 'split_5': 16, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:13,320] Trial 60 finished with value: 1313241.7459054296 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 8, 'split_4': 13, 'split_5': 16, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:14,133] Trial 61 finished with value: 1313241.7459054296 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 8, 'split_4': 13, 'split_5': 16, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:14,942] Trial 62 finished with value: 8251287.233379605 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 7, 'split_4': 13, 'split_5': 16, 'split_6': 20}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:15,751] Trial 63 finished with value: 41717502.04446764 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 4, 'split_3': 7, 'split_4': 12, 'split_5': 16, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:16,561] Trial 64 finished with value: 10442131.519884165 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 8, 'split_4': 13, 'split_5': 15, 'split_6': 20}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:17,375] Trial 65 finished with value: 49807450.34165201 and parameters: {'split_0': 4, 'split_1': 7, 'split_2': 9, 'split_3': 10, 'split_4': 14, 'split_5': 18, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:18,183] Trial 66 finished with value: 18391743.243268766 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 4, 'split_3': 6, 'split_4': 11, 'split_5': 17, 'split_6': 22}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:18,996] Trial 67 finished with value: 36295234.53700948 and parameters: {'split_0': 2, 'split_1': 5, 'split_2': 7, 'split_3': 9, 'split_4': 14, 'split_5': 17, 'split_6': 20}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:19,823] Trial 68 finished with value: 41596029.189475134 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 4, 'split_3': 8, 'split_4': 11, 'split_5': 14, 'split_6': 19}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:20,643] Trial 69 finished with value: 34294690.00788931 and parameters: {'split_0': 4, 'split_1': 6, 'split_2': 8, 'split_3': 10, 'split_4': 14, 'split_5': 19, 'split_6': 22}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:21,452] Trial 70 finished with value: 7410390.805173618 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 8, 'split_4': 13, 'split_5': 14, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:22,266] Trial 71 finished with value: 41418988.20052655 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 9, 'split_4': 12, 'split_5': 16, 'split_6': 22}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:23,101] Trial 72 finished with value: 37761610.360453695 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 6, 'split_3': 8, 'split_4': 15, 'split_5': 17, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:23,914] Trial 73 finished with value: 54993230.81509002 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 10, 'split_4': 13, 'split_5': 20, 'split_6': 22}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:24,728] Trial 74 finished with value: 10130516.74715396 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 9, 'split_4': 14, 'split_5': 19, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:25,545] Trial 75 finished with value: 16753729.677899366 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 3, 'split_3': 6, 'split_4': 10, 'split_5': 15, 'split_6': 23}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:26,420] Trial 76 finished with value: 61225391.44399934 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 10, 'split_4': 15, 'split_5': 18, 'split_6': 20}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:27,280] Trial 77 finished with value: 148530326.9676476 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 8, 'split_4': 12, 'split_5': 14, 'split_6': 18}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:28,103] Trial 78 finished with value: 12217333.88494296 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 7, 'split_4': 11, 'split_5': 20, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:28,926] Trial 79 finished with value: 18993141.068626486 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 9, 'split_4': 13, 'split_5': 19, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:29,745] Trial 80 finished with value: 178671649.28901017 and parameters: {'split_0': 6, 'split_1': 8, 'split_2': 10, 'split_3': 12, 'split_4': 14, 'split_5': 17, 'split_6': 22}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:30,595] Trial 81 finished with value: 32512640.396148413 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 10, 'split_4': 13, 'split_5': 16, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:31,410] Trial 82 finished with value: 7699343.106965385 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 8, 'split_4': 16, 'split_5': 23, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:32,223] Trial 83 finished with value: 30887566.192423306 and parameters: {'split_0': 4, 'split_1': 6, 'split_2': 8, 'split_3': 10, 'split_4': 20, 'split_5': 25, 'split_6': 27}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:33,063] Trial 84 finished with value: 16854183.14739523 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 4, 'split_3': 14, 'split_4': 22, 'split_5': 24, 'split_6': 26}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:33,878] Trial 85 finished with value: 24176154.398691397 and parameters: {'split_0': 5, 'split_1': 7, 'split_2': 9, 'split_3': 11, 'split_4': 22, 'split_5': 24, 'split_6': 26}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:34,689] Trial 86 finished with value: 9234686.616193898 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 18, 'split_4': 22, 'split_5': 24, 'split_6': 26}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:35,526] Trial 87 finished with value: 36846257.17324096 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 9, 'split_4': 12, 'split_5': 21, 'split_6': 23}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:36,352] Trial 88 finished with value: 34716816.28917807 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 7, 'split_4': 10, 'split_5': 12, 'split_6': 19}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:37,183] Trial 89 finished with value: 45716911.16969684 and parameters: {'split_0': 2, 'split_1': 16, 'split_2': 18, 'split_3': 21, 'split_4': 24, 'split_5': 26, 'split_6': 28}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:38,019] Trial 90 finished with value: 36841336.80550185 and parameters: {'split_0': 14, 'split_1': 18, 'split_2': 20, 'split_3': 22, 'split_4': 25, 'split_5': 27, 'split_6': 29}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:38,835] Trial 91 finished with value: 32960252.547995728 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 11, 'split_4': 14, 'split_5': 21, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:39,640] Trial 92 finished with value: 37356821.58494069 and parameters: {'split_0': 4, 'split_1': 6, 'split_2': 8, 'split_3': 10, 'split_4': 15, 'split_5': 23, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:40,442] Trial 93 finished with value: 44562560.938870005 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 15, 'split_4': 17, 'split_5': 23, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:41,249] Trial 94 finished with value: 33377396.57124771 and parameters: {'split_0': 3, 'split_1': 5, 'split_2': 7, 'split_3': 9, 'split_4': 19, 'split_5': 21, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:42,066] Trial 95 finished with value: 45541207.33769323 and parameters: {'split_0': 5, 'split_1': 7, 'split_2': 9, 'split_3': 11, 'split_4': 20, 'split_5': 22, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:42,905] Trial 96 finished with value: 14973943.390790334 and parameters: {'split_0': 1, 'split_1': 2, 'split_2': 4, 'split_3': 6, 'split_4': 16, 'split_5': 18, 'split_6': 21}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:43,722] Trial 97 finished with value: 44923474.2948046 and parameters: {'split_0': 2, 'split_1': 4, 'split_2': 6, 'split_3': 13, 'split_4': 15, 'split_5': 17, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:44,537] Trial 98 finished with value: 4256286.696472862 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 12, 'split_4': 19, 'split_5': 21, 'split_6': 25}. Best is trial 38 with value: 858057.7845322182.\n[I 2024-12-30 12:59:45,351] Trial 99 finished with value: 17556818.591783434 and parameters: {'split_0': 1, 'split_1': 3, 'split_2': 5, 'split_3': 14, 'split_4': 19, 'split_5': 21, 'split_6': 24}. Best is trial 38 with value: 858057.7845322182.\n","output_type":"stream"},{"name":"stdout","text":"最適な分割点: [3, 6, 9, 13, 19, 22, 25]\n分割後のテキスト:\nPart 1: sleigh of the, score: \nPart 2: magi yuletide cheer, score: \nPart 3: is unwrap gifts, score: \nPart 4: relax and eat cheer, score: \nPart 5: decorations carol sing chimney visit workshop, score: \nPart 6: grinch holiday holly, score: \nPart 7: jingle naughty nice, score: \nPart 8: nutcracker polar beard ornament stocking, score: \n合計パープレキシティ: 858057.7845322182\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"import itertools\nfrom tqdm import tqdm  # プログレスバーの表示に使用\n\n# すべての順列を生成\nall_permutations = itertools.permutations(splits)\n\n# 最小パープレキシティスコアと対応する順列を保存する変数\nmin_perplexity = float('inf')\nbest_permutation = None\n\n# 全順列に対してパープレキシティを計算\nfor perm in tqdm(all_permutations, total=40320, desc=\"Evaluating permutations\"):\n    # 順列を結合して一つのテキストにする\n    permuted_text = ' '.join(perm)\n    \n    # パープレキシティを計算\n    perplexity = get_perplexity(permuted_text)\n    \n    # 最小パープレキシティスコアの更新\n    if perplexity < min_perplexity:\n        min_perplexity = perplexity\n        best_permutation = perm\n\n# 結果の表示\nprint(\"\\n最適な順列のパープレキシティ:\", min_perplexity)\nprint(\"最適な順列:\")\nfor i, part in enumerate(best_permutation, 1):\n    print(f\"Part {i}: {part}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T13:05:36.473950Z","iopub.execute_input":"2024-12-30T13:05:36.474815Z","iopub.status.idle":"2024-12-30T14:26:18.757817Z","shell.execute_reply.started":"2024-12-30T13:05:36.474778Z","shell.execute_reply":"2024-12-30T14:26:18.756979Z"}},"outputs":[{"name":"stderr","text":"Evaluating permutations: 100%|██████████| 40320/40320 [1:20:42<00:00,  8.33it/s]","output_type":"stream"},{"name":"stdout","text":"\n最適な順列のパープレキシティ: 195.84896001735729\n最適な順列:\nPart 1: sleigh of the\nPart 2: magi yuletide cheer\nPart 3: is unwrap gifts\nPart 4: relax and eat cheer\nPart 5: decorations carol sing chimney visit workshop\nPart 6: grinch holiday holly\nPart 7: jingle naughty nice\nPart 8: nutcracker polar beard ornament stocking\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"submission = pd.DataFrame(columns=['id', 'text'])\nscores = []\ntexts = []\n# processing_words = ['magi yuletide cheer', 'grinch', 'carol', 'holly', 'jingle', 'naughty nice', \n#                     'nutcracker', 'polar', 'beard', 'ornament', 'stocking chimney', 'sleigh', \n#                     'holiday', 'workshop',  \n#                     'gifts', 'decorations']\n# processing_words = ['sleigh','naughty nice', 'grinch','gifts','magi','yuletide', 'workshop', 'nutcracker',\n#                     'holiday','holly jingle', 'carol', \n#                     'stocking', 'chimney', 'polar', 'beard', 'ornament',  \n#                     'decorations']\n# processing_words = ['sleigh of the magi', 'is', 'yuletide', 'cheer', 'unwrap gifts','relax', \n#                     'and', 'eat', 'holiday', 'decorations', 'holly jingle',\n#                     'carol','cheer', 'sing', 'chimney', 'visit', 'workshop',\n#                     'grinch naughty nice polar beard nutcracker ornament stocking']\n#processing_words = [\"from\", \"and\", \"as\", \"have\", \"in\", \"not\", \"it\", \"of\", \"that\", \"the\", \"to\", \"we\", \"with\", \"you\", \n#\"season greeting angel believe bow card candle candy chocolate cookie doll dream eggnog fireplace fruitcake game hohoho hope joy kaggle merry milk night peace peppermint poinsettia puzzle snowglobe star toy wreath wish workshop wonder wrapping paper\"]\n#processing_words = ['wreath', 'it', 'have', 'merry', 'season', 'hohoho', 'and to you', 'from the star', 'of', 'wonder', 'workshop', 'that night', 'not with', 'joy', \n#                    'as we', 'believe in', 'hope', 'peace', 'milk', 'cookie', 'eggnog', 'fruitcake', 'chocolate', 'candy', 'peppermint', 'candle', 'snowglobe', \n#                    'angel', 'poinsettia', 'wrapping paper', 'bow', 'greeting card', 'wish', 'dream', 'fireplace', 'kaggle', 'toy', 'doll', 'game', 'puzzle']\n# processing_words = [#\"from and as have in not it of that the to we with you season\",\n#                      'joy', 'wonder', 'dream', 'believe', 'wish', 'hope', 'peace', 'star', 'night',\n#                     'candle', 'wreath', 'angel', 'snowglobe', 'fireplace', 'poinsettia', 'candy',\n#                     'peppermint', 'chocolate', 'cookie', 'milk', 'eggnog', 'fruitcake',\n#                     \"greeting card wrapping paper bow toy doll game puzzle merry hohoho kaggle workshop\"]\n# processing_words = ['of', 'and', 'to', 'and', 'in', 'the', 'as', 'and', 'is', \n#                     'that', 'the', 'it', 'we', 'with', 'from', 'have', 'not', \n#                     'you yuletide cheer advent angel bake beard believe bow candy candle carol cheer chocolate chimney cookie decorations doll dream drive', \n#                     'eat eggnog elf family fireplace fireplace chimney fruitcake game give gifts gingerbread grinch greeting card', \n#                     'holly hohoho holiday hope jingle jump joy kaggle laugh magi merry milk mistletoe naughty nice night nutcracker', 'ornament ornament', 'of', 'the', \n#                     'night peace peppermint polar poinsettia puzzle reindeer relax scrooge season sing sleigh sleep snowglobe star stocking toy unwrap visit walk wish wonder workshop workshop wreath wrapping paper'\n#                     ]\n# processing_words = \"and and as have the in is it of the to we with you yuletide cheer advent and angel bake beard believe bow candy candle carol cheer chocolate chimney cookie decorations doll dream drive eat eggnog elf from family fireplace fireplace chimney fruitcake game give gifts gingerbread grinch greeting card holly hohoho holiday hope jingle jump joy kaggle laugh magi merry milk mistletoe naughty nice nutcracker not that night ornament ornament of the night peace peppermint polar poinsettia puzzle reindeer relax scrooge season sing sleigh sleep snowglobe star stocking toy unwrap visit walk wish wonder workshop workshop wreath wrapping paper\"\n# processing_words = \"and is of the sleigh yuletide beard cheer chimney decorations grinch holiday holly jingle magi naughty nice nutcracker ornament polar stocking workshop cheer carol eat sing relax visit unwrap gifts \"\n# processing_words = \"sleigh of the magi yuletide cheer is eat relax and unwrap gifts cheer grinch holiday holly jingle naughty nice nutcracker ornament polar beard workshop visit chimney stocking carol sing decorations\"\n# processing_words = [\"sleigh of the magi yuletide cheer is\", 'eat relax and unwrap gifts', 'cheer', 'grinch holiday holly jingle naughty nice nutcracker', 'ornament', 'polar', 'beard', 'visit workshop', 'chimney', 'stocking', 'carol sing', \"decorations\"]\n# processing_words = ['of', 'magi', 'yuletide cheer', 'and', 'unwrap', 'gifts', 'sing', 'carol','the','holly',  'jingle', 'eat', 'holiday', 'visit workshop', 'grinch', 'is', 'naughty', \n#                     'nice','relax','stocking', 'chimney', 'decorations', 'ornament', 'cheer', 'nutcracker', 'polar', 'beard']\n#processing_words = \"season joy wonder dream believe in wish and to you hope peace from the star of that night candle wreath angel snowglobe fireplace poinsettia candy peppermint chocolate cookie milk not eggnog fruitcake greeting card wrapping paper bow it toy doll game puzzle have merry hohoho as we with kaggle workshop\"\n#processing_words = \"magi yuletide grinch holiday cheer gifts decorations ornament stocking holly jingle sleigh carol naughty nice polar beard workshop chimney nutcracker\"\n#processing_words = \"sleigh of the magi yuletide cheer unwrap gifts relax and eat cheer carol sing holiday decorations holly jingle workshop visit grinch naughty is nice nutcracker ornament stocking chimney polar beard\"\nprocessing_words = \"grinch carol magi yuletide cheer holiday holly jingle naughty nice nutcracker polar beard ornament stocking chimney sleigh workshop gifts decorations\"\n#processing_words = processing_words.split()\n#processing_words = samples.loc[1,\"text\"].split()\n#processing_words = processing_words.split()\n#\"sleigh magi yuletide cheer gifts holiday decorations holly jingle carol chimney grinch naughty nice polar beard workshop nutcracker ornament stocking\"\n\n# Process each sample\nid_texts = {\n    3: 'sleigh yuletide is unwrap gifts of cheer eat jingle relax sing carol the magi visit workshop naughty and nice holiday holly cheer chimney grinch nutcracker polar beard ornament decorations stocking',\n    # 必要に応じて、他の id 用のテキストを追加できる\n    # たとえば 4: \"other text ...\"\n}\ntexts_id3 = [\n    \"sleigh yuletide beard carol cheer cheer chimney decorations eat gifts grinch holiday holly jingle is naughty and nice nutcracker ornament of the magi polar relax sing stocking unwrap visit workshop\", \n    \"sleigh and cheer cheer beard chimney carol decorations eat gifts grinch holiday holly jingle is naughty nice nutcracker ornament of the magi polar relax sing stocking unwrap visit workshop yuletide\"\n    ]\n        \n\nfor idx, row in samples.iterrows():\n\n    if idx in skip:\n        score = scorer.get_perplexity(row.text, batch_size = 1)\n        print(f\"Skipping sample {idx} ({score:.2f})\")\n        final_text = row.text\n    else:\n        print(f\"\\nProcessing sample {idx}...\")\n        text = samples.iloc[idx].text\n        print(f\"text: {text}\")\n        words_list = text.split()\n        fixed_word = words_list[0]\n        remaining_words = words_list[1:]\n        random.shuffle(remaining_words)\n        shuffled_words = [fixed_word] + remaining_words\n        shuffled_text = ' '.join(shuffled_words)\n        print(f\"shuffled_text: {shuffled_text}\")\n        \n        # 最適化関数の呼び出し\n        simulated_annealing_optimize(shuffled_text, verbose=True)\n        \n        print(\"正常に終了しました。\")\n        \n        \n        \n    \n    scores.append(score)\n   \n    # Add to submission dataframe\n    #submission.loc[idx] = {\n    #    'id': row.id,\n     #   'text': final_text\n    #}\n    #print(\"-\" * 80)\n\n# Print summary statistics\nprint(\"\\nScore Summary:\")\n\nfor i in range(len(scores)):\n   print(f\"Sample {i} final score: {scores[i]:.2f}\")\n\nprint(f\"Submission mean score: {np.mean(scores):.2f}\")\n\n# Save to CSV\n#submission.to_csv(\"submission.csv\", index=False)\n#print(\"\\nSubmission file created!\")\n\n#submission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-29T18:10:22.676035Z","iopub.execute_input":"2024-12-29T18:10:22.676476Z","iopub.status.idle":"2024-12-29T18:10:23.389337Z","shell.execute_reply.started":"2024-12-29T18:10:22.676447Z","shell.execute_reply":"2024-12-29T18:10:23.388178Z"}},"outputs":[{"name":"stdout","text":"Skipping sample 0 (468.96)\nSkipping sample 1 (439.19)\nSkipping sample 2 (297.48)\n\nProcessing sample 3...\ntext: sleigh of the magi yuletide cheer is unwrap gifts relax and eat cheer decorations carol sing chimney visit workshop grinch holiday holly jingle naughty nice nutcracker polar beard ornament stocking\nshuffled_text: sleigh polar holiday chimney ornament jingle visit relax yuletide unwrap holly cheer grinch decorations of magi eat carol nutcracker gifts beard cheer sing workshop is nice the stocking naughty and\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[19], line 79\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshuffled_text: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mshuffled_text\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     78\u001b[0m     \u001b[38;5;66;03m# 最適化関数の呼び出し\u001b[39;00m\n\u001b[0;32m---> 79\u001b[0m     \u001b[43msimulated_annealing_optimize\u001b[49m(shuffled_text, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m     81\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m正常に終了しました。\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     86\u001b[0m scores\u001b[38;5;241m.\u001b[39mappend(score)\n","\u001b[0;31mNameError\u001b[0m: name 'simulated_annealing_optimize' is not defined"],"ename":"NameError","evalue":"name 'simulated_annealing_optimize' is not defined","output_type":"error"}],"execution_count":19},{"cell_type":"markdown","source":"課題としては\n思うようにスコアが減少しない。\nバッチサイズの問題なのかスタートの温度の問題なのか。\n最初の文字列に依存して得られるスコアが大きく変動しそう。\n","metadata":{}},{"cell_type":"markdown","source":"以下の大きなブラックホールに吸い込まれてしまっている、どう脱出するか。もしくは知被かないかを検討する必要がある。\n\n-New best score: 223.66653284614108\n\n\nNew best text: sleigh yuletide beard carol cheer cheer chimney decorations eat gifts grinch holiday holly jingle is naughty and nice nutcracker ornament of the magi polar relax sing stocking unwrap visit workshop\n\n文章内での複数単語を一単語として計算するとよいスコアが出る可能性がある。そこでどの単語を連語として計算するかを考える必要がある。","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import torch\n\n# デフォルトデバイスをCPUに設定\ndevice = torch.device('cpu')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-29T18:10:23.389950Z","iopub.status.idle":"2024-12-29T18:10:23.390243Z","shell.execute_reply.started":"2024-12-29T18:10:23.390099Z","shell.execute_reply":"2024-12-29T18:10:23.390113Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}