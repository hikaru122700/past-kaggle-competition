{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMwhYOyLm5OqpCfxsOu+qgX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Iy46qAQDW7P2","executionInfo":{"status":"ok","timestamp":1731513540444,"user_tz":-540,"elapsed":2360,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"36bdfa15-d845-49e6-9da1-688b00d919d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["!pip install catboost\n","!pip install lightgbm\n","!pip install xgboost\n","!pip install histgb"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gH3_DqquXRjH","executionInfo":{"status":"ok","timestamp":1731513552354,"user_tz":-540,"elapsed":11916,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"9c706745-1384-4d89-8ecb-0ab802681381"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: catboost in /usr/local/lib/python3.10/dist-packages (1.2.7)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.8.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.26.4)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.13.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.24.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.54.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (11.0.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.2.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n","Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.5.0)\n","Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.13.1)\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.26.4)\n","Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost) (2.23.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.13.1)\n","\u001b[31mERROR: Could not find a version that satisfies the requirement histgb (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for histgb\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","import numpy as np\n","import pandas as pd\n","from tqdm import tqdm\n","import joblib\n","\n","from lightgbm import LGBMRegressor\n","from catboost import CatBoostRegressor\n","from xgboost import XGBRegressor\n","from sklearn.ensemble import HistGradientBoostingRegressor\n","\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import *\n","\n","import gc\n","gc.collect()\n","\n","import os\n","\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import mean_squared_error"],"metadata":{"id":"uK27EqrqXFqd","executionInfo":{"status":"ok","timestamp":1731513552689,"user_tz":-540,"elapsed":21,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["path  = \"/content/drive/My Drive/signate/SMBC Group GREEN×DATA Challenge 2024/\"\n","# 予測モデルを訓練するためのデータセット\n","train_df = pd.read_csv(path+'train.csv', index_col=0)\n","\n","# 予測モデルに推論（予測)させるデータセット\n","test_df = pd.read_csv(path+'test.csv', index_col=0)\n","train_df.head(5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":446},"id":"-SjiC8YhXGOy","executionInfo":{"status":"ok","timestamp":1731513552689,"user_tz":-540,"elapsed":20,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"43fcda50-1e03-4d6c-e433-5233f6e4bbf7"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                    FacilityName   Latitude   Longitude  \\\n","0                               VISCOFAN USA INC  40.141389  -87.581111   \n","1  CORNWELL STATION - DOMINION TRANSMISSION, INC  38.475305  -81.278957   \n","2                  WEST UNION COMPRESSOR STATION  39.299820  -80.857170   \n","3                             DOUBLE \"C\" LIMITED  35.490363 -119.042957   \n","4                                LAKESHORE PLANT  41.532802  -81.636448   \n","\n","        LocationAddress         City State         ZIP     County  FIPScode  \\\n","0    915 N MICHIGAN AVE     DANVILLE    IL       61832  VERMILION   17183.0   \n","1  200 RIVER HAVEN ROAD    CLENDENIN    WV  25045-9304    KANAWHA   54039.0   \n","2     3041 LONG RUN RD.    GREENWOOD    WV       26415    RITCHIE   54085.0   \n","3   10245 OILFIELD ROAD  BAKERSFIELD    CA       93308       KERN    6029.0   \n","4    6800 S MARGINAL RD    CLEVELAND    OH   441031047   CUYAHOGA   39035.0   \n","\n","   PrimaryNAICS  ...                       IndustryType  \\\n","0        326121  ...                              Other   \n","1        486210  ...  Petroleum and Natural Gas Systems   \n","2        211112  ...  Petroleum and Natural Gas Systems   \n","3        221112  ...                       Power Plants   \n","4        221112  ...                       Power Plants   \n","\n","  TRI_Air_Emissions_10_in_lbs  TRI_Air_Emissions_11_in_lbs  \\\n","0                31566.709644                 26644.986107   \n","1                         NaN                          NaN   \n","2                         NaN                          NaN   \n","3                         NaN                          NaN   \n","4                29553.796627                 28337.832145   \n","\n","   TRI_Air_Emissions_12_in_lbs  TRI_Air_Emissions_13_in_lbs  \\\n","0                 23410.379903                 31809.857564   \n","1                          NaN                          NaN   \n","2                          NaN                          NaN   \n","3                          NaN                          NaN   \n","4                 30840.825454                 25153.901905   \n","\n","   GHG_Direct_Emissions_10_in_metric_tons  \\\n","0                            64816.958901   \n","1                            55507.543666   \n","2                                     NaN   \n","3                            54811.222708   \n","4                            81812.306362   \n","\n","   GHG_Direct_Emissions_11_in_metric_tons  \\\n","0                            36588.744606   \n","1                            72387.334115   \n","2                                     NaN   \n","3                            69339.923002   \n","4                            53823.561587   \n","\n","   GHG_Direct_Emissions_12_in_metric_tons  \\\n","0                            37907.936721   \n","1                            58225.196089   \n","2                                     NaN   \n","3                            63647.340038   \n","4                            77391.157768   \n","\n","   GHG_Direct_Emissions_13_in_metric_tons  \\\n","0                            45598.125851   \n","1                            76376.547318   \n","2                                     NaN   \n","3                            53799.011225   \n","4                            17662.966241   \n","\n","   GHG_Direct_Emissions_14_in_metric_tons  \n","0                            52973.139946  \n","1                            55910.066617  \n","2                            55679.543214  \n","3                            61411.902782  \n","4                            43100.469774  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-06a3c16a-c731-4227-af51-f955787e7680\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FacilityName</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>LocationAddress</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>ZIP</th>\n","      <th>County</th>\n","      <th>FIPScode</th>\n","      <th>PrimaryNAICS</th>\n","      <th>...</th>\n","      <th>IndustryType</th>\n","      <th>TRI_Air_Emissions_10_in_lbs</th>\n","      <th>TRI_Air_Emissions_11_in_lbs</th>\n","      <th>TRI_Air_Emissions_12_in_lbs</th>\n","      <th>TRI_Air_Emissions_13_in_lbs</th>\n","      <th>GHG_Direct_Emissions_10_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_11_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_12_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_13_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_14_in_metric_tons</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>VISCOFAN USA INC</td>\n","      <td>40.141389</td>\n","      <td>-87.581111</td>\n","      <td>915 N MICHIGAN AVE</td>\n","      <td>DANVILLE</td>\n","      <td>IL</td>\n","      <td>61832</td>\n","      <td>VERMILION</td>\n","      <td>17183.0</td>\n","      <td>326121</td>\n","      <td>...</td>\n","      <td>Other</td>\n","      <td>31566.709644</td>\n","      <td>26644.986107</td>\n","      <td>23410.379903</td>\n","      <td>31809.857564</td>\n","      <td>64816.958901</td>\n","      <td>36588.744606</td>\n","      <td>37907.936721</td>\n","      <td>45598.125851</td>\n","      <td>52973.139946</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CORNWELL STATION - DOMINION TRANSMISSION, INC</td>\n","      <td>38.475305</td>\n","      <td>-81.278957</td>\n","      <td>200 RIVER HAVEN ROAD</td>\n","      <td>CLENDENIN</td>\n","      <td>WV</td>\n","      <td>25045-9304</td>\n","      <td>KANAWHA</td>\n","      <td>54039.0</td>\n","      <td>486210</td>\n","      <td>...</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>55507.543666</td>\n","      <td>72387.334115</td>\n","      <td>58225.196089</td>\n","      <td>76376.547318</td>\n","      <td>55910.066617</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>WEST UNION COMPRESSOR STATION</td>\n","      <td>39.299820</td>\n","      <td>-80.857170</td>\n","      <td>3041 LONG RUN RD.</td>\n","      <td>GREENWOOD</td>\n","      <td>WV</td>\n","      <td>26415</td>\n","      <td>RITCHIE</td>\n","      <td>54085.0</td>\n","      <td>211112</td>\n","      <td>...</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>55679.543214</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>DOUBLE \"C\" LIMITED</td>\n","      <td>35.490363</td>\n","      <td>-119.042957</td>\n","      <td>10245 OILFIELD ROAD</td>\n","      <td>BAKERSFIELD</td>\n","      <td>CA</td>\n","      <td>93308</td>\n","      <td>KERN</td>\n","      <td>6029.0</td>\n","      <td>221112</td>\n","      <td>...</td>\n","      <td>Power Plants</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>54811.222708</td>\n","      <td>69339.923002</td>\n","      <td>63647.340038</td>\n","      <td>53799.011225</td>\n","      <td>61411.902782</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>LAKESHORE PLANT</td>\n","      <td>41.532802</td>\n","      <td>-81.636448</td>\n","      <td>6800 S MARGINAL RD</td>\n","      <td>CLEVELAND</td>\n","      <td>OH</td>\n","      <td>441031047</td>\n","      <td>CUYAHOGA</td>\n","      <td>39035.0</td>\n","      <td>221112</td>\n","      <td>...</td>\n","      <td>Power Plants</td>\n","      <td>29553.796627</td>\n","      <td>28337.832145</td>\n","      <td>30840.825454</td>\n","      <td>25153.901905</td>\n","      <td>81812.306362</td>\n","      <td>53823.561587</td>\n","      <td>77391.157768</td>\n","      <td>17662.966241</td>\n","      <td>43100.469774</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06a3c16a-c731-4227-af51-f955787e7680')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-06a3c16a-c731-4227-af51-f955787e7680 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-06a3c16a-c731-4227-af51-f955787e7680');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d7266bef-bd6d-4da6-8417-1643260b0533\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7266bef-bd6d-4da6-8417-1643260b0533')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d7266bef-bd6d-4da6-8417-1643260b0533 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["train_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6jFlC7ZcOaCu","executionInfo":{"status":"ok","timestamp":1731513552690,"user_tz":-540,"elapsed":15,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"e1508fcf-fef7-4296-c922-113034b3a276"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 4655 entries, 0 to 4654\n","Data columns (total 21 columns):\n"," #   Column                                  Non-Null Count  Dtype  \n","---  ------                                  --------------  -----  \n"," 0   FacilityName                            4655 non-null   object \n"," 1   Latitude                                4553 non-null   float64\n"," 2   Longitude                               4553 non-null   float64\n"," 3   LocationAddress                         4476 non-null   object \n"," 4   City                                    4655 non-null   object \n"," 5   State                                   4655 non-null   object \n"," 6   ZIP                                     4655 non-null   object \n"," 7   County                                  4585 non-null   object \n"," 8   FIPScode                                4582 non-null   float64\n"," 9   PrimaryNAICS                            4655 non-null   int64  \n"," 10  SecondPrimaryNAICS                      379 non-null    float64\n"," 11  IndustryType                            4654 non-null   object \n"," 12  TRI_Air_Emissions_10_in_lbs             1635 non-null   float64\n"," 13  TRI_Air_Emissions_11_in_lbs             1635 non-null   float64\n"," 14  TRI_Air_Emissions_12_in_lbs             1635 non-null   float64\n"," 15  TRI_Air_Emissions_13_in_lbs             1635 non-null   float64\n"," 16  GHG_Direct_Emissions_10_in_metric_tons  3953 non-null   float64\n"," 17  GHG_Direct_Emissions_11_in_metric_tons  4284 non-null   float64\n"," 18  GHG_Direct_Emissions_12_in_metric_tons  4395 non-null   float64\n"," 19  GHG_Direct_Emissions_13_in_metric_tons  4507 non-null   float64\n"," 20  GHG_Direct_Emissions_14_in_metric_tons  4655 non-null   float64\n","dtypes: float64(13), int64(1), object(7)\n","memory usage: 800.1+ KB\n"]}]},{"cell_type":"code","source":["\n","# 特徴量とターゲットの分離\n","X_train = train_df[[\"Latitude\", \"Longitude\"]]\n","y_train = train_df[\"GHG_Direct_Emissions_14_in_metric_tons\"]\n","X_test = test_df[[\"Latitude\", \"Longitude\"]]\n","\n","# データの前処理（欠損値の処理）\n","# 欠損値がある場合は適切に補完します（例：中央値で補完）\n","X_train = X_train.fillna(X_train.median())\n","X_test = X_test.fillna(X_train.median())  # 訓練データの中央値で補完\n","\n","# 特徴量のスケーリング（オプション）\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# KNeighborsRegressor のインスタンス作成\n","knn_regressor = KNeighborsRegressor(\n","    n_neighbors=5,       # 近傍点の数（適宜調整）\n","    weights='uniform',   # 重み付け方法（'uniform' または 'distance'）\n","    algorithm='auto',    # 使用するアルゴリズム（'auto', 'ball_tree', 'kd_tree', 'brute'）\n","    metric='euclidean'   # 距離の測定方法\n",")\n","\n","# モデルの訓練\n","knn_regressor.fit(X_train_scaled, y_train)\n","\n","# 訓練データでの予測（オプション、モデルの性能確認用）\n","train_predictions = knn_regressor.predict(X_train_scaled)\n","train_mse = mean_squared_error(y_train, train_predictions)\n","print(f\"Train Mean Squared Error: {train_mse:.2f}\")\n","\n","# テストデータでの予測\n","test_predictions = knn_regressor.predict(X_test_scaled)\n","\n","# 予測結果の保存\n","key = \"Estimation by location\"\n","train_df[key] = knn_regressor.predict(X_train_scaled)\n","test_df[key] = test_predictions\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k-fHPztgKqG-","executionInfo":{"status":"ok","timestamp":1731513709927,"user_tz":-540,"elapsed":291,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"3badfa79-2893-4371-dbed-4793ee683160"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Mean Squared Error: 189137734061.13\n"]}]},{"cell_type":"code","source":["numerical_columns = [\n","                    'TRI_Air_Emissions_10_in_lbs', 'TRI_Air_Emissions_11_in_lbs',\n","                    'TRI_Air_Emissions_12_in_lbs', 'TRI_Air_Emissions_13_in_lbs',\n","                    'GHG_Direct_Emissions_10_in_metric_tons', 'GHG_Direct_Emissions_11_in_metric_tons',\n","                    'GHG_Direct_Emissions_12_in_metric_tons', 'GHG_Direct_Emissions_13_in_metric_tons',\n","                    ]\n","lat_lon_columns   = ['Latitude','Longitude']\n","target_columns    = ['GHG_Direct_Emissions_14_in_metric_tons']\n","categorical_columns = list(set(train_df.columns)-((set(numerical_columns) | set(lat_lon_columns) | set(target_columns))))"],"metadata":{"id":"hJBv0scBXLBG","executionInfo":{"status":"ok","timestamp":1731513725859,"user_tz":-540,"elapsed":291,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["\n","def overlapping_values(colname,train_df,test_df):\n","    '''\n","        Returns the overlapping values in train data for the values present in test data.\n","    '''\n","    train_unique = set(train_df[colname].unique())\n","    test_unique  = set(test_df[colname].unique())\n","    intersection = test_unique & train_unique\n","    return len(intersection)/test_df.shape[0]"],"metadata":{"id":"XbJqPe3-XXH3","executionInfo":{"status":"ok","timestamp":1731513726228,"user_tz":-540,"elapsed":3,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["\n","for colname in categorical_columns:\n","    overlap = overlapping_values(colname,train_df,test_df)\n","    print(f'column - {colname} has {overlap*100}% values in train data')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ut5iTlGwXZLc","executionInfo":{"status":"ok","timestamp":1731513726919,"user_tz":-540,"elapsed":3,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"8723ca47-d6ae-482b-b1b6-985e7093587b"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["column - FIPScode has 35.24720893141946% values in train data\n","column - IndustryType has 1.5151515151515151% values in train data\n","column - ZIP has 21.251993620414673% values in train data\n","column - FacilityName has 3.5486443381180224% values in train data\n","column - Estimation by location has 34.250398724082935% values in train data\n","column - SecondPrimaryNAICS has 2.0334928229665072% values in train data\n","column - LocationAddress has 1.036682615629984% values in train data\n","column - City has 34.05103668261563% values in train data\n","column - County has 28.78787878787879% values in train data\n","column - State has 2.15311004784689% values in train data\n","column - PrimaryNAICS has 6.180223285486443% values in train data\n"]}]},{"cell_type":"code","source":["def create_features1(df):\n","\n","\n","    # Year-over-year difference\n","    df['TRI_Air_Emissions_YoY_Change_11'] = df['TRI_Air_Emissions_11_in_lbs'] - df['TRI_Air_Emissions_10_in_lbs']\n","    df['TRI_Air_Emissions_YoY_Change_12'] = df['TRI_Air_Emissions_12_in_lbs'] - df['TRI_Air_Emissions_11_in_lbs']\n","    df['TRI_Air_Emissions_YoY_Change_13'] = df['TRI_Air_Emissions_13_in_lbs'] - df['TRI_Air_Emissions_12_in_lbs']\n","\n","    # Year-over-year growth rate\n","    df['TRI_Air_Emissions_Growth_Rate_11'] = (df['TRI_Air_Emissions_11_in_lbs'] - df['TRI_Air_Emissions_10_in_lbs']) / df['TRI_Air_Emissions_10_in_lbs']\n","    df['TRI_Air_Emissions_Growth_Rate_12'] = (df['TRI_Air_Emissions_12_in_lbs'] - df['TRI_Air_Emissions_11_in_lbs']) / df['TRI_Air_Emissions_11_in_lbs']\n","    df['TRI_Air_Emissions_Growth_Rate_13'] = (df['TRI_Air_Emissions_13_in_lbs'] - df['TRI_Air_Emissions_12_in_lbs']) / df['TRI_Air_Emissions_12_in_lbs']\n","\n","    return df\n","\n","\n","def create_features2(df):\n","    df['TRI_to_GHG_Ratio_10'] = df['TRI_Air_Emissions_10_in_lbs'] / (df['GHG_Direct_Emissions_10_in_metric_tons'] + 1e-6)  # Avoid division by zero\n","    df['TRI_to_GHG_Ratio_11'] = df['TRI_Air_Emissions_11_in_lbs'] / (df['GHG_Direct_Emissions_11_in_metric_tons'] + 1e-6)\n","    df['TRI_to_GHG_Ratio_12'] = df['TRI_Air_Emissions_12_in_lbs'] / (df['GHG_Direct_Emissions_12_in_metric_tons'] + 1e-6)\n","    df['TRI_to_GHG_Ratio_13'] = df['TRI_Air_Emissions_13_in_lbs'] / (df['GHG_Direct_Emissions_13_in_metric_tons'] + 1e-6)\n","    return df"],"metadata":{"id":"mUzVwySPXbTJ","executionInfo":{"status":"ok","timestamp":1731513727236,"user_tz":-540,"elapsed":4,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["train_df      = create_features1(train_df)\n","test_df       = create_features1(test_df)\n","new_features1 = ['TRI_Air_Emissions_YoY_Change_11','TRI_Air_Emissions_YoY_Change_12','TRI_Air_Emissions_YoY_Change_13',\n","                     'TRI_Air_Emissions_Growth_Rate_11','TRI_Air_Emissions_Growth_Rate_12','TRI_Air_Emissions_Growth_Rate_13']\n","\n","\n","train_df      = create_features2(train_df)\n","test_df       = create_features2(test_df)\n","new_features2 = ['TRI_to_GHG_Ratio_10','TRI_to_GHG_Ratio_11','TRI_to_GHG_Ratio_12','TRI_to_GHG_Ratio_13']"],"metadata":{"id":"QuOR7Ll_XdNh","executionInfo":{"status":"ok","timestamp":1731513727236,"user_tz":-540,"elapsed":3,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["train = train_df[numerical_columns+lat_lon_columns+new_features1].values\n","test  = test_df[numerical_columns+lat_lon_columns+new_features1].values\n","target = train_df[target_columns].values"],"metadata":{"id":"HjbtM4RLXfG6","executionInfo":{"status":"ok","timestamp":1731513727651,"user_tz":-540,"elapsed":2,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["\n","def get_models_trained(train,test,target, num_folds):\n","    kf               = KFold(n_splits=num_folds, shuffle=True, random_state=13)\n","\n","    oof_predictions  = np.zeros(len(train))\n","    test_predictions = np.zeros(len(test))\n","\n","\n","    for fold, (train_index, valid_index) in enumerate(kf.split(train,target)):\n","\n","        X_train, X_valid             = train[train_index], train[valid_index]\n","        y_train, y_valid             = target[train_index], target[valid_index]\n","\n","        params                       = {\"n_estimators\": 100,  'verbose':-1,\"random_state\":13}\n","        model1                       = LGBMRegressor(**params)\n","\n","        params                       = { 'random_state':13,}\n","        model2                       = HistGradientBoostingRegressor(**params)\n","\n","        params                       = { 'random_state':13,}\n","        model3                       = XGBRegressor(**params)\n","\n","        params                       = { 'random_state':13,}\n","        model4                       = CatBoostRegressor(**params)\n","\n","        _                             = model1.fit(X_train,np.log1p(y_train))\n","        valid_preds1                  = np.expm1(model1.predict(X_valid))\n","        rmsle1                        = root_mean_squared_log_error(y_valid, valid_preds1)\n","        print(f\"Fold {fold+1} RMSLE for model1 = {rmsle1}\")\n","\n","        _                             = model2.fit(X_train,np.log1p(y_train))\n","        valid_preds2                  = np.expm1(model2.predict(X_valid))\n","        rmsle2                        = root_mean_squared_log_error(y_valid, valid_preds2)\n","        print(f\"Fold {fold+1} RMSLE for model2 = {rmsle2}\")\n","\n","        _                             = model3.fit(X_train,np.log1p(y_train))\n","        valid_preds3                  = np.expm1(model3.predict(X_valid))\n","        rmsle3                        = root_mean_squared_log_error(y_valid, valid_preds3)\n","        print(f\"Fold {fold+1} RMSLE for model3 = {rmsle3}\")\n","\n","        # if rmsle1>=rmsle2:\n","        #     valid_preds = valid_preds2.copy()\n","        #     test_preds  = model2.predict(test)\n","        # else:\n","        #     valid_preds = valid_preds1.copy()\n","        #     test_preds  = model1.predict(test)\n","\n","        valid_preds = (valid_preds1+valid_preds2+valid_preds3)/3\n","        test_preds  = (model1.predict(test)+model2.predict(test)+model3.predict(test))/3\n","\n","        oof_predictions[valid_index]  = valid_preds\n","        test_predictions += (test_preds) / kf.n_splits\n","\n","        gc.collect()\n","\n","        print('---------------\\n')\n","\n","    RMSLE = root_mean_squared_log_error(target, oof_predictions)\n","    print(f\"OOF RMSLE = {RMSLE}\")\n","\n","    return oof_predictions,np.expm1(test_predictions)"],"metadata":{"id":"fVAdEyG2Xhlf","executionInfo":{"status":"ok","timestamp":1731513727651,"user_tz":-540,"elapsed":2,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["oof_predictions,test_predictions = get_models_trained(train,test,target,15)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MxrgQVhoXjiz","executionInfo":{"status":"ok","timestamp":1731513771147,"user_tz":-540,"elapsed":43035,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"77ac5323-5aad-4ca9-dba3-02349099ae41"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Fold 1 RMSLE for model1 = 0.7417893005883758\n","Fold 1 RMSLE for model2 = 0.7352106539815669\n","Fold 1 RMSLE for model3 = 0.7617366013528979\n","---------------\n","\n","Fold 2 RMSLE for model1 = 0.6954720093992365\n","Fold 2 RMSLE for model2 = 0.699486587503212\n","Fold 2 RMSLE for model3 = 0.7427199531246456\n","---------------\n","\n","Fold 3 RMSLE for model1 = 0.8247512877973194\n","Fold 3 RMSLE for model2 = 0.8278031998010354\n","Fold 3 RMSLE for model3 = 0.8851619603749947\n","---------------\n","\n","Fold 4 RMSLE for model1 = 0.740818758016879\n","Fold 4 RMSLE for model2 = 0.7476601542919311\n","Fold 4 RMSLE for model3 = 0.7615346361514593\n","---------------\n","\n","Fold 5 RMSLE for model1 = 0.8379784228304813\n","Fold 5 RMSLE for model2 = 0.848985357228054\n","Fold 5 RMSLE for model3 = 0.8909215391483688\n","---------------\n","\n","Fold 6 RMSLE for model1 = 0.8175389905419561\n","Fold 6 RMSLE for model2 = 0.8231440571031123\n","Fold 6 RMSLE for model3 = 0.8703085769403263\n","---------------\n","\n","Fold 7 RMSLE for model1 = 0.7857878668244939\n","Fold 7 RMSLE for model2 = 0.7735239600469591\n","Fold 7 RMSLE for model3 = 0.8338201648961768\n","---------------\n","\n","Fold 8 RMSLE for model1 = 0.6897454741524095\n","Fold 8 RMSLE for model2 = 0.6833109692216972\n","Fold 8 RMSLE for model3 = 0.7370821800608306\n","---------------\n","\n","Fold 9 RMSLE for model1 = 0.7859944711178499\n","Fold 9 RMSLE for model2 = 0.767444844826274\n","Fold 9 RMSLE for model3 = 0.8285753392302934\n","---------------\n","\n","Fold 10 RMSLE for model1 = 0.7963040672020408\n","Fold 10 RMSLE for model2 = 0.7962539858967971\n","Fold 10 RMSLE for model3 = 0.8577128464381096\n","---------------\n","\n","Fold 11 RMSLE for model1 = 0.7672221514539632\n","Fold 11 RMSLE for model2 = 0.7707140765391922\n","Fold 11 RMSLE for model3 = 0.8302614457233698\n","---------------\n","\n","Fold 12 RMSLE for model1 = 0.7863332676676066\n","Fold 12 RMSLE for model2 = 0.7830814592208711\n","Fold 12 RMSLE for model3 = 0.8400812347048067\n","---------------\n","\n","Fold 13 RMSLE for model1 = 0.7905834740887915\n","Fold 13 RMSLE for model2 = 0.7984088839186514\n","Fold 13 RMSLE for model3 = 0.8519561167351202\n","---------------\n","\n","Fold 14 RMSLE for model1 = 0.7644537757696653\n","Fold 14 RMSLE for model2 = 0.775338737574654\n","Fold 14 RMSLE for model3 = 0.7978044141914378\n","---------------\n","\n","Fold 15 RMSLE for model1 = 0.801032112033069\n","Fold 15 RMSLE for model2 = 0.803239542441998\n","Fold 15 RMSLE for model3 = 0.8237087334393098\n","---------------\n","\n","OOF RMSLE = 0.779816501253026\n"]}]},{"cell_type":"code","source":["file_name = \"006_SMBC.csv\"\n","# 投稿ファイル作成\n","submit = pd.read_csv(path+\"sample_submission.csv\", header=None)\n","submit[1] = test_predictions\n","submit.to_csv(file_name, header=None, index=False)"],"metadata":{"id":"-JXYI2TjXn_i","executionInfo":{"status":"ok","timestamp":1731513771580,"user_tz":-540,"elapsed":438,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ayCJO8UiXy2-","executionInfo":{"status":"ok","timestamp":1731513771580,"user_tz":-540,"elapsed":5,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":26,"outputs":[]}]}