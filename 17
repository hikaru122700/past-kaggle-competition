{"cells":[{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2118,"status":"ok","timestamp":1732034721350,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"1PbtAG4aODsy","outputId":"800daec4-6d0f-4463-bcbd-6738fb0f67da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15658,"status":"ok","timestamp":1732034737006,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"CgU8KzAiP47t","outputId":"124cc7c7-163c-4f2c-8630-5846ccff2346"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pygeohash in /usr/local/lib/python3.10/dist-packages (1.2.0)\n","Requirement already satisfied: catboost in /usr/local/lib/python3.10/dist-packages (1.2.7)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.8.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.26.4)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.13.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.24.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.54.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (11.0.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.2.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n","Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.5.0)\n","Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.13.1)\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.26.4)\n","Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost) (2.23.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.13.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (1.4.2)\n","Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (4.1.0)\n","Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (1.14.0)\n","Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna) (6.9.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.2)\n","Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.36)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.6)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.2)\n","Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (1.3.6)\n","Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.12.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.1.1)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (3.0.2)\n"]}],"source":["!pip install pygeohash\n","!pip install catboost\n","!pip install lightgbm\n","!pip install xgboost\n","!pip install joblib\n","!pip install optuna"]},{"cell_type":"code","execution_count":52,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1732034737327,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"rgYfzA2kOMC5"},"outputs":[],"source":["import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","import numpy as np\n","import pandas as pd\n","from tqdm import tqdm\n","import joblib\n","import math\n","\n","# import pygeohash as pgh\n","\n","from concurrent.futures import ThreadPoolExecutor\n","\n","from lightgbm import LGBMRegressor\n","from catboost import CatBoostRegressor\n","from xgboost import XGBRegressor\n","from sklearn.ensemble import HistGradientBoostingRegressor\n","from sklearn.linear_model import LinearRegression\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import *\n","from sklearn.preprocessing import LabelEncoder\n","\n","import gc\n","gc.collect()\n","import optuna\n","import matplotlib.pyplot as plt\n","\n","\n","import os"]},{"cell_type":"code","execution_count":53,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1732034737327,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"HmJ_Z08LOOst"},"outputs":[],"source":["path  = \"/content/drive/My Drive/signate/SMBC Group GREEN×DATA Challenge 2024/\"\n","# 予測モデルを訓練するためのデータセット\n","train_df = pd.read_csv(path+'train.csv', index_col=0)\n","\n","# 予測モデルに推論（予測)させるデータセット\n","test_df = pd.read_csv(path+'test.csv', index_col=0)"]},{"cell_type":"code","source":["test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":860},"id":"Z5Kxgwoh6x06","executionInfo":{"status":"ok","timestamp":1732034737327,"user_tz":-540,"elapsed":14,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"cea0256c-ffd9-4bf8-df17-49f741545728"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                     FacilityName   Latitude   Longitude  \\\n","4655                           ROGER AOTSCHEGAROW  38.033040  -97.973170   \n","4656                  EPNG STATION 6543 LORDSBURG  32.316030 -108.606800   \n","4657  OWENS-BROCKWAY GLASS CONTAINER INC PLANT 19  41.251500  -78.742440   \n","4658                  WALDORF CORP (DBA ROCKTENN)  44.959660  -93.193410   \n","4659               SOLAR TURBINES INC KEARNY MESA  32.818720 -117.125800   \n","...                                           ...        ...         ...   \n","7158                     BEULAH SANITARY LANDFILL  38.651945  -75.914445   \n","7159                             SONORA GAS PLANT  31.361795 -101.776403   \n","7160                          ASH GROVE CEMENT CO  41.005565  -96.154917   \n","7161                          SHOW ME ETHANOL LLC  39.364417  -93.449361   \n","7162                       XTO - NEW TEAGUE PLANT  31.591369  -96.216360   \n","\n","                        LocationAddress        City State        ZIP  \\\n","4655         1910 SOUTH BROADACRES ROAD  HUTCHINSON    KS      67501   \n","4656                                NaN   LORDSBURG    NM      88045   \n","4657                     3831 ROUTE 219   BROCKPORT    PA      15823   \n","4658                    2250 WABASH AVE  SAINT PAUL    MN  551141895   \n","4659              4200 RUFFIN RD MZ T-2   SAN DIEGO    CA      92123   \n","...                                 ...         ...   ...        ...   \n","7158  ROUTE 331 & ROUTE 16- BEULAH ROAD     HURLOCK    MD      21643   \n","7159                                NaN      RANKIN    TX      79778   \n","7160                       16215 HWY 50  LOUISVILLE    NE  680372881   \n","7161                     26530 E HWY 24  CARROLLTON    MO      64633   \n","7162                        230 FCR 640      TEAGUE    TX      75860   \n","\n","          County  FIPScode  PrimaryNAICS  SecondPrimaryNAICS  \\\n","4655        RENO   20155.0        211112                 NaN   \n","4656     HIDALGO   35023.0        486210                 NaN   \n","4657   JEFFERSON   42065.0        327213                 NaN   \n","4658      RAMSEY   27123.0        322130                 NaN   \n","4659   SAN DIEGO    6073.0        333611                 NaN   \n","...          ...       ...           ...                 ...   \n","7158  DORCHESTER   24019.0        562212                 NaN   \n","7159       UPTON   48461.0        211112                 NaN   \n","7160        CASS   31025.0        327310                 NaN   \n","7161     CARROLL   29033.0        325193                 NaN   \n","7162   FREESTONE   48161.0        211111                 NaN   \n","\n","                                           IndustryType  \\\n","4655  Natural Gas and Natural Gas Liquids Suppliers,...   \n","4656                  Petroleum and Natural Gas Systems   \n","4657                                           Minerals   \n","4658                                     Pulp and Paper   \n","4659                                              Other   \n","...                                                 ...   \n","7158                                              Waste   \n","7159                  Petroleum and Natural Gas Systems   \n","7160                                           Minerals   \n","7161                                        Other,Waste   \n","7162                  Petroleum and Natural Gas Systems   \n","\n","      TRI_Air_Emissions_10_in_lbs  TRI_Air_Emissions_11_in_lbs  \\\n","4655                          NaN                          NaN   \n","4656                          NaN                          NaN   \n","4657                 28275.061385                 32075.140635   \n","4658                 37330.205714                 42503.897432   \n","4659                 45310.722699                 39897.800897   \n","...                           ...                          ...   \n","7158                          NaN                          NaN   \n","7159                          NaN                          NaN   \n","7160                 22956.125554                 23592.402994   \n","7161                124460.895022                140816.449347   \n","7162                          NaN                          NaN   \n","\n","      TRI_Air_Emissions_12_in_lbs  TRI_Air_Emissions_13_in_lbs  \\\n","4655                          NaN                          NaN   \n","4656                          NaN                          NaN   \n","4657                 26445.792090                 23385.161510   \n","4658                 43906.102080                 42958.306538   \n","4659                 40203.428231                 39437.099224   \n","...                           ...                          ...   \n","7158                          NaN                          NaN   \n","7159                          NaN                          NaN   \n","7160                 25069.498286                 24560.172725   \n","7161                 93118.705227                130326.946431   \n","7162                          NaN                          NaN   \n","\n","      GHG_Direct_Emissions_10_in_metric_tons  \\\n","4655                            88951.390376   \n","4656                                     NaN   \n","4657                            84908.372871   \n","4658                            49004.603631   \n","4659                            84959.769922   \n","...                                      ...   \n","7158                           110523.066755   \n","7159                                     NaN   \n","7160                           166520.232511   \n","7161                            71773.803649   \n","7162                                     NaN   \n","\n","      GHG_Direct_Emissions_11_in_metric_tons  \\\n","4655                            65803.021457   \n","4656                                     NaN   \n","4657                             6212.899604   \n","4658                               52.038452   \n","4659                            15351.359676   \n","...                                      ...   \n","7158                            98954.793233   \n","7159                                     NaN   \n","7160                           469732.826538   \n","7161                           936031.894142   \n","7162                           841773.060989   \n","\n","      GHG_Direct_Emissions_12_in_metric_tons  \\\n","4655                            2.899329e+04   \n","4656                            3.119260e+05   \n","4657                            3.473291e+04   \n","4658                            1.426237e+04   \n","4659                            4.000654e+04   \n","...                                      ...   \n","7158                            3.467008e+06   \n","7159                                     NaN   \n","7160                            8.255855e+04   \n","7161                            3.369613e+05   \n","7162                            4.082144e+06   \n","\n","      GHG_Direct_Emissions_13_in_metric_tons  \n","4655                            32965.487915  \n","4656                           268668.069110  \n","4657                            39045.247387  \n","4658                            20204.924986  \n","4659                            63935.249120  \n","...                                      ...  \n","7158                           147802.356027  \n","7159                                     NaN  \n","7160                            85775.307153  \n","7161                           156640.371706  \n","7162                           350096.803939  \n","\n","[2508 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-7ea14b81-ad32-4fd2-97ce-1bbf86dc12da\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FacilityName</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>LocationAddress</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>ZIP</th>\n","      <th>County</th>\n","      <th>FIPScode</th>\n","      <th>PrimaryNAICS</th>\n","      <th>SecondPrimaryNAICS</th>\n","      <th>IndustryType</th>\n","      <th>TRI_Air_Emissions_10_in_lbs</th>\n","      <th>TRI_Air_Emissions_11_in_lbs</th>\n","      <th>TRI_Air_Emissions_12_in_lbs</th>\n","      <th>TRI_Air_Emissions_13_in_lbs</th>\n","      <th>GHG_Direct_Emissions_10_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_11_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_12_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_13_in_metric_tons</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4655</th>\n","      <td>ROGER AOTSCHEGAROW</td>\n","      <td>38.033040</td>\n","      <td>-97.973170</td>\n","      <td>1910 SOUTH BROADACRES ROAD</td>\n","      <td>HUTCHINSON</td>\n","      <td>KS</td>\n","      <td>67501</td>\n","      <td>RENO</td>\n","      <td>20155.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>Natural Gas and Natural Gas Liquids Suppliers,...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>88951.390376</td>\n","      <td>65803.021457</td>\n","      <td>2.899329e+04</td>\n","      <td>32965.487915</td>\n","    </tr>\n","    <tr>\n","      <th>4656</th>\n","      <td>EPNG STATION 6543 LORDSBURG</td>\n","      <td>32.316030</td>\n","      <td>-108.606800</td>\n","      <td>NaN</td>\n","      <td>LORDSBURG</td>\n","      <td>NM</td>\n","      <td>88045</td>\n","      <td>HIDALGO</td>\n","      <td>35023.0</td>\n","      <td>486210</td>\n","      <td>NaN</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.119260e+05</td>\n","      <td>268668.069110</td>\n","    </tr>\n","    <tr>\n","      <th>4657</th>\n","      <td>OWENS-BROCKWAY GLASS CONTAINER INC PLANT 19</td>\n","      <td>41.251500</td>\n","      <td>-78.742440</td>\n","      <td>3831 ROUTE 219</td>\n","      <td>BROCKPORT</td>\n","      <td>PA</td>\n","      <td>15823</td>\n","      <td>JEFFERSON</td>\n","      <td>42065.0</td>\n","      <td>327213</td>\n","      <td>NaN</td>\n","      <td>Minerals</td>\n","      <td>28275.061385</td>\n","      <td>32075.140635</td>\n","      <td>26445.792090</td>\n","      <td>23385.161510</td>\n","      <td>84908.372871</td>\n","      <td>6212.899604</td>\n","      <td>3.473291e+04</td>\n","      <td>39045.247387</td>\n","    </tr>\n","    <tr>\n","      <th>4658</th>\n","      <td>WALDORF CORP (DBA ROCKTENN)</td>\n","      <td>44.959660</td>\n","      <td>-93.193410</td>\n","      <td>2250 WABASH AVE</td>\n","      <td>SAINT PAUL</td>\n","      <td>MN</td>\n","      <td>551141895</td>\n","      <td>RAMSEY</td>\n","      <td>27123.0</td>\n","      <td>322130</td>\n","      <td>NaN</td>\n","      <td>Pulp and Paper</td>\n","      <td>37330.205714</td>\n","      <td>42503.897432</td>\n","      <td>43906.102080</td>\n","      <td>42958.306538</td>\n","      <td>49004.603631</td>\n","      <td>52.038452</td>\n","      <td>1.426237e+04</td>\n","      <td>20204.924986</td>\n","    </tr>\n","    <tr>\n","      <th>4659</th>\n","      <td>SOLAR TURBINES INC KEARNY MESA</td>\n","      <td>32.818720</td>\n","      <td>-117.125800</td>\n","      <td>4200 RUFFIN RD MZ T-2</td>\n","      <td>SAN DIEGO</td>\n","      <td>CA</td>\n","      <td>92123</td>\n","      <td>SAN DIEGO</td>\n","      <td>6073.0</td>\n","      <td>333611</td>\n","      <td>NaN</td>\n","      <td>Other</td>\n","      <td>45310.722699</td>\n","      <td>39897.800897</td>\n","      <td>40203.428231</td>\n","      <td>39437.099224</td>\n","      <td>84959.769922</td>\n","      <td>15351.359676</td>\n","      <td>4.000654e+04</td>\n","      <td>63935.249120</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7158</th>\n","      <td>BEULAH SANITARY LANDFILL</td>\n","      <td>38.651945</td>\n","      <td>-75.914445</td>\n","      <td>ROUTE 331 &amp; ROUTE 16- BEULAH ROAD</td>\n","      <td>HURLOCK</td>\n","      <td>MD</td>\n","      <td>21643</td>\n","      <td>DORCHESTER</td>\n","      <td>24019.0</td>\n","      <td>562212</td>\n","      <td>NaN</td>\n","      <td>Waste</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>110523.066755</td>\n","      <td>98954.793233</td>\n","      <td>3.467008e+06</td>\n","      <td>147802.356027</td>\n","    </tr>\n","    <tr>\n","      <th>7159</th>\n","      <td>SONORA GAS PLANT</td>\n","      <td>31.361795</td>\n","      <td>-101.776403</td>\n","      <td>NaN</td>\n","      <td>RANKIN</td>\n","      <td>TX</td>\n","      <td>79778</td>\n","      <td>UPTON</td>\n","      <td>48461.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7160</th>\n","      <td>ASH GROVE CEMENT CO</td>\n","      <td>41.005565</td>\n","      <td>-96.154917</td>\n","      <td>16215 HWY 50</td>\n","      <td>LOUISVILLE</td>\n","      <td>NE</td>\n","      <td>680372881</td>\n","      <td>CASS</td>\n","      <td>31025.0</td>\n","      <td>327310</td>\n","      <td>NaN</td>\n","      <td>Minerals</td>\n","      <td>22956.125554</td>\n","      <td>23592.402994</td>\n","      <td>25069.498286</td>\n","      <td>24560.172725</td>\n","      <td>166520.232511</td>\n","      <td>469732.826538</td>\n","      <td>8.255855e+04</td>\n","      <td>85775.307153</td>\n","    </tr>\n","    <tr>\n","      <th>7161</th>\n","      <td>SHOW ME ETHANOL LLC</td>\n","      <td>39.364417</td>\n","      <td>-93.449361</td>\n","      <td>26530 E HWY 24</td>\n","      <td>CARROLLTON</td>\n","      <td>MO</td>\n","      <td>64633</td>\n","      <td>CARROLL</td>\n","      <td>29033.0</td>\n","      <td>325193</td>\n","      <td>NaN</td>\n","      <td>Other,Waste</td>\n","      <td>124460.895022</td>\n","      <td>140816.449347</td>\n","      <td>93118.705227</td>\n","      <td>130326.946431</td>\n","      <td>71773.803649</td>\n","      <td>936031.894142</td>\n","      <td>3.369613e+05</td>\n","      <td>156640.371706</td>\n","    </tr>\n","    <tr>\n","      <th>7162</th>\n","      <td>XTO - NEW TEAGUE PLANT</td>\n","      <td>31.591369</td>\n","      <td>-96.216360</td>\n","      <td>230 FCR 640</td>\n","      <td>TEAGUE</td>\n","      <td>TX</td>\n","      <td>75860</td>\n","      <td>FREESTONE</td>\n","      <td>48161.0</td>\n","      <td>211111</td>\n","      <td>NaN</td>\n","      <td>Petroleum and Natural Gas Systems</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>841773.060989</td>\n","      <td>4.082144e+06</td>\n","      <td>350096.803939</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ea14b81-ad32-4fd2-97ce-1bbf86dc12da')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7ea14b81-ad32-4fd2-97ce-1bbf86dc12da button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7ea14b81-ad32-4fd2-97ce-1bbf86dc12da');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81979c44-7b7e-4a92-8383-52f35a36ed50\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81979c44-7b7e-4a92-8383-52f35a36ed50')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81979c44-7b7e-4a92-8383-52f35a36ed50 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5f755c2f-b2a2-4cf7-8450-9831385654ed\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5f755c2f-b2a2-4cf7-8450-9831385654ed button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_df","summary":"{\n  \"name\": \"test_df\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"FacilityName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2462,\n        \"samples\": [\n          \"CD MCINTOSH JR POWER PLANT\",\n          \"MODERN LANDFILL INC\",\n          \"NICOR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.758664967537397,\n        \"min\": 13.463579,\n        \"max\": 71.292071,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          36.1491,\n          29.682045,\n          25.85784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.263441645665505,\n        \"min\": -158.125764,\n        \"max\": 144.678216,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          -96.96397,\n          -84.483991,\n          -98.31008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LocationAddress\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2386,\n        \"samples\": [\n          \"3901 DONNA STREET\",\n          \"1134 MANOR ST\",\n          \"2090 SOUTH CR 280 EAST\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1647,\n        \"samples\": [\n          \"GALVESTON\",\n          \"BOISE\",\n          \"SAN ARDO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"GA\",\n          \"DE\",\n          \"SD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZIP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2152,\n        \"samples\": [\n          \"827188202\",\n          \"82431\",\n          \"1801\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"County\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 865,\n        \"samples\": [\n          \"KANAWHA\",\n          \"HANCOCK\",\n          \"MAYAGUEZ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FIPScode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16241.454601706124,\n        \"min\": 1001.0,\n        \"max\": 78030.0,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          39173.0,\n          26163.0,\n          27127.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147092,\n        \"min\": 211111,\n        \"max\": 928110,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          213112,\n          311611,\n          331210\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SecondPrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48626.377424967715,\n        \"min\": 115114.0,\n        \"max\": 562910.0,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          325211.0,\n          331111.0,\n          331423.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IndustryType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"Chemicals,Power Plants,Waste\",\n          \"Petroleum and Natural Gas Systems,Power Plants\",\n          \"Injection of CO2,Natural Gas and Natural Gas Liquids Suppliers,Petroleum and Natural Gas Systems\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_10_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153260.8934282091,\n        \"min\": 4405.828910812044,\n        \"max\": 1374502.9266120757,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          15151.19740345126,\n          46183.68918687044,\n          21078.80697763863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_11_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50742.80939795908,\n        \"min\": 5343.548841848329,\n        \"max\": 481505.852809956,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          21461.32437823258,\n          48995.95349964959,\n          24962.37197178924\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_12_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96607.92544572477,\n        \"min\": 3144.5571408761243,\n        \"max\": 898432.732338988,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          17311.855440674823,\n          44777.45490159112,\n          16595.45802089126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_13_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109221.25710756132,\n        \"min\": 1221.4376824539213,\n        \"max\": 1010901.828389014,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          11371.572489848208,\n          40829.582779592645,\n          23703.26616989767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_10_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 523900.6905247671,\n        \"min\": 134.22630653291708,\n        \"max\": 3927869.397368078,\n        \"num_unique_values\": 2130,\n        \"samples\": [\n          68182.52126620257,\n          882894.9220059533,\n          278999.1032526391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_11_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275363.2669497924,\n        \"min\": 52.03845177487528,\n        \"max\": 2120410.8562870584,\n        \"num_unique_values\": 2297,\n        \"samples\": [\n          100899.59307034814,\n          36649.895737462415,\n          21552.90524045979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_12_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 744804.5468121156,\n        \"min\": 3003.9516055817003,\n        \"max\": 6112087.345974441,\n        \"num_unique_values\": 2371,\n        \"samples\": [\n          285044.4940147917,\n          101373.609689835,\n          1410650.0982454163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_13_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 428452.149925799,\n        \"min\": 222.6384210366596,\n        \"max\": 4292471.519790898,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          68263.16109033479,\n          4316.304107072552,\n          48128.59588285932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":54}]},{"cell_type":"code","execution_count":55,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1732034737327,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"QQ5sKJOROQZf","outputId":"f80c7f0a-5a08-4a1f-fe49-df76eae1e7db"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['FacilityName', 'Latitude', 'Longitude', 'LocationAddress', 'City',\n","       'State', 'ZIP', 'County', 'FIPScode', 'PrimaryNAICS',\n","       'SecondPrimaryNAICS', 'IndustryType', 'TRI_Air_Emissions_10_in_lbs',\n","       'TRI_Air_Emissions_11_in_lbs', 'TRI_Air_Emissions_12_in_lbs',\n","       'TRI_Air_Emissions_13_in_lbs', 'GHG_Direct_Emissions_10_in_metric_tons',\n","       'GHG_Direct_Emissions_11_in_metric_tons',\n","       'GHG_Direct_Emissions_12_in_metric_tons',\n","       'GHG_Direct_Emissions_13_in_metric_tons',\n","       'GHG_Direct_Emissions_14_in_metric_tons'],\n","      dtype='object')"]},"metadata":{},"execution_count":55}],"source":["# すべての列を表示するように設定\n","pd.set_option('display.max_columns', None)\n","train_df.columns"]},{"cell_type":"code","source":["train_df = train_df.reset_index(drop=True)\n","test_df  = test_df.reset_index(drop=True)"],"metadata":{"id":"tB_P3XnDDNaY","executionInfo":{"status":"ok","timestamp":1732034737327,"user_tz":-540,"elapsed":9,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","execution_count":57,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1732034737327,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"km3M9TFVOcE4"},"outputs":[],"source":["# del train_df['Unnamed: 0'], test_df['Unnamed: 0']\n","del train_df['FacilityName'], test_df['FacilityName']\n","del train_df['LocationAddress'], test_df['LocationAddress']\n","del train_df['ZIP'], test_df['ZIP']\n","del train_df['IndustryType'], test_df['IndustryType']\n","del train_df['SecondPrimaryNAICS'], test_df['SecondPrimaryNAICS']"]},{"cell_type":"code","execution_count":58,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1732034737327,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"xVTTGCKTOf7p"},"outputs":[],"source":["\n","two_digit_map     = {11: 'Agriculture, Forestry, Fishing and Hunting',\n","                    21: 'Mining, Quarrying, and Oil and Gas Extraction',\n","                    22: 'Utilities',\n","                    23: 'Construction',\n","                    31: 'Manufacturing',\n","                    32: 'Manufacturing',\n","                    33: 'Manufacturing',\n","                    42: 'Wholesale Trade',\n","                    44: 'Retail Trade',\n","                    45: 'Retail Trade',\n","                    48: 'Transportation and Warehousing',\n","                    49: 'Transportation and Warehousing',\n","                    51: 'Information',\n","                    52: 'Finance and Insurance',\n","                    53: 'Real Estate and Rental and Leasing',\n","                    54: 'Professional, Scientific, and Technical Services',\n","                    55: 'Management of Companies and Enterprises',\n","                    56: 'Administrative and Support and Waste Management and Remediation Services',\n","                    61: 'Educational Services',\n","                    62: 'Health Care and Social Assistance',\n","                    71: 'Arts, Entertainment, and Recreation',\n","                    72: 'Accommodation and Food Services',\n","                    81: 'Other Services (except Public Administration)',\n","                    92: 'Public Administration'}"]},{"cell_type":"code","execution_count":59,"metadata":{"executionInfo":{"elapsed":333,"status":"ok","timestamp":1732034737652,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"1ssTu5yPOgeu"},"outputs":[],"source":["train_df['first_two_digit_primary_naics'] = train_df['PrimaryNAICS'].apply(lambda z: str(z)[:2]).astype(int)\n","test_df['first_two_digit_primary_naics']  = test_df['PrimaryNAICS'].apply(lambda z: str(z)[:2]).astype(int)\n","\n","train_df['Economic_Sector']               = train_df['first_two_digit_primary_naics'].map(two_digit_map)\n","test_df['Economic_Sector']                = test_df['first_two_digit_primary_naics'].map(two_digit_map)\n","\n","del train_df['first_two_digit_primary_naics'], test_df['first_two_digit_primary_naics']\n","\n","econ_sector_train                         = train_df['Economic_Sector'].values\n","econ_sector_test                          = test_df['Economic_Sector'].values"]},{"cell_type":"code","source":["test_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5arkcc74UQYH","executionInfo":{"status":"ok","timestamp":1732034737653,"user_tz":-540,"elapsed":10,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"4fc1dda1-a0e9-4863-dea6-4b1de0eb5485"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2508, 16)"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","execution_count":61,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1732034737653,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"fMLlNdnHOmBz"},"outputs":[],"source":["\n","\n","\n","def haversine(lat1, lon1, lat2, lon2):\n","    # Convert latitude and longitude from degrees to radians\n","    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n","\n","    # Haversine formula\n","    dlat = lat2 - lat1\n","    dlon = lon2 - lon1\n","    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n","    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n","\n","    # Radius of Earth in kilometers (mean radius)\n","    R = 6371.0\n","\n","    # Calculate the distance\n","    distance = R * c\n","    return distance"]},{"cell_type":"code","execution_count":62,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1732034737653,"user":{"displayName":"ねこ","userId":"00794682924380388788"},"user_tz":-540},"id":"63GeF6dqOoq6"},"outputs":[],"source":["def calculate_distance(lat1, lon1, lat2, lon2):\n","    return haversine(lat1, lon1, lat2, lon2)\n","\n","def get_nearest_distance(lat1, lon1, econ_sector_ref, neighbours=5, train_point=False):\n","    # Extract the required columns once to NumPy arrays\n","    latitudes = train_df['Latitude'].values\n","    longitudes = train_df['Longitude'].values\n","    ghg_emissions = train_df['GHG_Direct_Emissions_14_in_metric_tons'].values\n","    econ_sectors = train_df['Economic_Sector'].values\n","\n","    # Filter NaN emissions directly\n","    valid_indices = ~np.isnan(ghg_emissions)\n","\n","    latitudes = latitudes[valid_indices]\n","    longitudes = longitudes[valid_indices]\n","    ghg_emissions = ghg_emissions[valid_indices]\n","    econ_sectors = econ_sectors[valid_indices]\n","\n","    # Parallelize distance calculation using ThreadPoolExecutor\n","    with ThreadPoolExecutor() as executor:\n","        distances = list(executor.map(calculate_distance,\n","                                     [lat1]*len(latitudes),\n","                                     [lon1]*len(longitudes),\n","                                     latitudes,\n","                                     longitudes))\n","\n","    # Combine the results into a DataFrame\n","    near_df = pd.DataFrame({\n","        'Distance': distances,\n","        'GHG_emission_14': ghg_emissions,\n","        'Economic_Sector': econ_sectors\n","    })\n","\n","\n","    if train_point:\n","        near_df.sort_values(by='Distance', inplace=True)\n","        near_df = near_df.dropna()\n","        near_df = near_df.iloc[1:].reset_index(drop=True)\n","    else:\n","        # Sort distances by 'Distance'\n","        near_df.sort_values(by='Distance', inplace=True)\n","        near_df = near_df.dropna()\n","\n","    # Filter by economic sector\n","    nearest_locations_econ_sector = near_df[near_df['Economic_Sector'] == econ_sector_ref]\n","\n","    # Get the top N nearest for both economic sector and overall\n","    sub_near_econ = nearest_locations_econ_sector.head(neighbours)\n","    sub_nearest_locations = near_df.head(neighbours)\n","\n","    # Compute weighted averages\n","    econ_weighted_average = (sub_near_econ['GHG_emission_14'] / np.where(sub_near_econ['Distance'] == 0, 1, sub_near_econ['Distance']) ).sum()\n","    near_weighted_average = (sub_nearest_locations['GHG_emission_14'] / np.where(sub_nearest_locations['Distance']==0,1,sub_nearest_locations['Distance'])).sum()\n","\n","    # Compute regular averages\n","    econ_average = sub_near_econ['GHG_emission_14'].mean()\n","    near_average = sub_nearest_locations['GHG_emission_14'].mean()\n","\n","    return [econ_weighted_average, econ_average, near_weighted_average, near_average]"]},{"cell_type":"code","execution_count":63,"metadata":{"id":"B-BewDlQOq8R","executionInfo":{"status":"ok","timestamp":1732034737653,"user_tz":-540,"elapsed":7,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["# neighbours = 5\n","\n","# # テストデータの距離計算または読み込み\n","# file_path = f\"test_distance_{neighbours}nbrs.csv\"\n","# if os.path.exists(file_path):\n","#     print(f\"{file_path} exists.\")\n","#     test_distance = pd.read_csv(file_path)\n","# else:\n","#     output = []\n","#     for index in tqdm(range(test_df.shape[0])):\n","#         lat1 = test_df.iloc[index]['Latitude']\n","#         lon1 = test_df.iloc[index]['Longitude']\n","#         econ_sector_ref = test_df.iloc[index]['Economic_Sector']\n","#         x = get_nearest_distance(lat1, lon1, econ_sector_ref, neighbours=neighbours, train_point=False)\n","#         output.append(x)\n","\n","#     test_distance = pd.DataFrame(output, columns=['Economy_Sector_Weighted_Avg', 'Economic_Sector_Average', 'Nearest_Weighted_Average', 'Nearest_Average'])\n","#     test_distance.to_csv(file_path, index=False)\n","\n","# # トレーニングデータの距離計算または読み込み\n","# file_path = f\"train_distance_{neighbours}nbrs.csv\"  # f-string を正しく使用\n","# if os.path.exists(file_path):\n","#     print(f\"{file_path} exists.\")\n","#     train_distance = pd.read_csv(file_path)\n","# else:\n","#     output = []\n","#     for index in tqdm(range(train_df.shape[0])):\n","#         lat1 = train_df.iloc[index]['Latitude']\n","#         lon1 = train_df.iloc[index]['Longitude']\n","#         econ_sector_ref = train_df.iloc[index]['Economic_Sector']\n","#         x = get_nearest_distance(lat1, lon1, econ_sector_ref, neighbours=neighbours, train_point=True)\n","#         output.append(x)\n","\n","#     train_distance = pd.DataFrame(output, columns=['Economy_Sector_Weighted_Avg', 'Economic_Sector_Average', 'Nearest_Weighted_Average', 'Nearest_Average'])\n","#     train_distance.to_csv(file_path, index=False)\n","\n","train_distance = pd.read_csv(path+\"train_distance_5nbrs.csv\")\n","test_distance  = pd.read_csv(path+\"test_distance_5nbrs.csv\")"]},{"cell_type":"code","source":[],"metadata":{"id":"A21xdE0MriS3","executionInfo":{"status":"ok","timestamp":1732034737653,"user_tz":-540,"elapsed":6,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"dz7oAHi9BzbO","executionInfo":{"status":"ok","timestamp":1732034737653,"user_tz":-540,"elapsed":6,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"ae72934a-e55c-472e-fea4-f15fcdbbb043"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Latitude   Longitude        City State      County  FIPScode  \\\n","0     38.033040  -97.973170  HUTCHINSON    KS        RENO   20155.0   \n","1     32.316030 -108.606800   LORDSBURG    NM     HIDALGO   35023.0   \n","2     41.251500  -78.742440   BROCKPORT    PA   JEFFERSON   42065.0   \n","3     44.959660  -93.193410  SAINT PAUL    MN      RAMSEY   27123.0   \n","4     32.818720 -117.125800   SAN DIEGO    CA   SAN DIEGO    6073.0   \n","...         ...         ...         ...   ...         ...       ...   \n","2503  38.651945  -75.914445     HURLOCK    MD  DORCHESTER   24019.0   \n","2504  31.361795 -101.776403      RANKIN    TX       UPTON   48461.0   \n","2505  41.005565  -96.154917  LOUISVILLE    NE        CASS   31025.0   \n","2506  39.364417  -93.449361  CARROLLTON    MO     CARROLL   29033.0   \n","2507  31.591369  -96.216360      TEAGUE    TX   FREESTONE   48161.0   \n","\n","      PrimaryNAICS  TRI_Air_Emissions_10_in_lbs  TRI_Air_Emissions_11_in_lbs  \\\n","0           211112                          NaN                          NaN   \n","1           486210                          NaN                          NaN   \n","2           327213                 28275.061385                 32075.140635   \n","3           322130                 37330.205714                 42503.897432   \n","4           333611                 45310.722699                 39897.800897   \n","...            ...                          ...                          ...   \n","2503        562212                          NaN                          NaN   \n","2504        211112                          NaN                          NaN   \n","2505        327310                 22956.125554                 23592.402994   \n","2506        325193                124460.895022                140816.449347   \n","2507        211111                          NaN                          NaN   \n","\n","      TRI_Air_Emissions_12_in_lbs  TRI_Air_Emissions_13_in_lbs  \\\n","0                             NaN                          NaN   \n","1                             NaN                          NaN   \n","2                    26445.792090                 23385.161510   \n","3                    43906.102080                 42958.306538   \n","4                    40203.428231                 39437.099224   \n","...                           ...                          ...   \n","2503                          NaN                          NaN   \n","2504                          NaN                          NaN   \n","2505                 25069.498286                 24560.172725   \n","2506                 93118.705227                130326.946431   \n","2507                          NaN                          NaN   \n","\n","      GHG_Direct_Emissions_10_in_metric_tons  \\\n","0                               88951.390376   \n","1                                        NaN   \n","2                               84908.372871   \n","3                               49004.603631   \n","4                               84959.769922   \n","...                                      ...   \n","2503                           110523.066755   \n","2504                                     NaN   \n","2505                           166520.232511   \n","2506                            71773.803649   \n","2507                                     NaN   \n","\n","      GHG_Direct_Emissions_11_in_metric_tons  \\\n","0                               65803.021457   \n","1                                        NaN   \n","2                                6212.899604   \n","3                                  52.038452   \n","4                               15351.359676   \n","...                                      ...   \n","2503                            98954.793233   \n","2504                                     NaN   \n","2505                           469732.826538   \n","2506                           936031.894142   \n","2507                           841773.060989   \n","\n","      GHG_Direct_Emissions_12_in_metric_tons  \\\n","0                               2.899329e+04   \n","1                               3.119260e+05   \n","2                               3.473291e+04   \n","3                               1.426237e+04   \n","4                               4.000654e+04   \n","...                                      ...   \n","2503                            3.467008e+06   \n","2504                                     NaN   \n","2505                            8.255855e+04   \n","2506                            3.369613e+05   \n","2507                            4.082144e+06   \n","\n","      GHG_Direct_Emissions_13_in_metric_tons  \\\n","0                               32965.487915   \n","1                              268668.069110   \n","2                               39045.247387   \n","3                               20204.924986   \n","4                               63935.249120   \n","...                                      ...   \n","2503                           147802.356027   \n","2504                                     NaN   \n","2505                            85775.307153   \n","2506                           156640.371706   \n","2507                           350096.803939   \n","\n","                                        Economic_Sector  \n","0         Mining, Quarrying, and Oil and Gas Extraction  \n","1                        Transportation and Warehousing  \n","2                                         Manufacturing  \n","3                                         Manufacturing  \n","4                                         Manufacturing  \n","...                                                 ...  \n","2503  Administrative and Support and Waste Managemen...  \n","2504      Mining, Quarrying, and Oil and Gas Extraction  \n","2505                                      Manufacturing  \n","2506                                      Manufacturing  \n","2507      Mining, Quarrying, and Oil and Gas Extraction  \n","\n","[2508 rows x 16 columns]"],"text/html":["\n","  <div id=\"df-35dcdab3-52a0-4a15-bbbf-663eced229e0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>County</th>\n","      <th>FIPScode</th>\n","      <th>PrimaryNAICS</th>\n","      <th>TRI_Air_Emissions_10_in_lbs</th>\n","      <th>TRI_Air_Emissions_11_in_lbs</th>\n","      <th>TRI_Air_Emissions_12_in_lbs</th>\n","      <th>TRI_Air_Emissions_13_in_lbs</th>\n","      <th>GHG_Direct_Emissions_10_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_11_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_12_in_metric_tons</th>\n","      <th>GHG_Direct_Emissions_13_in_metric_tons</th>\n","      <th>Economic_Sector</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>38.033040</td>\n","      <td>-97.973170</td>\n","      <td>HUTCHINSON</td>\n","      <td>KS</td>\n","      <td>RENO</td>\n","      <td>20155.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>88951.390376</td>\n","      <td>65803.021457</td>\n","      <td>2.899329e+04</td>\n","      <td>32965.487915</td>\n","      <td>Mining, Quarrying, and Oil and Gas Extraction</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>32.316030</td>\n","      <td>-108.606800</td>\n","      <td>LORDSBURG</td>\n","      <td>NM</td>\n","      <td>HIDALGO</td>\n","      <td>35023.0</td>\n","      <td>486210</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.119260e+05</td>\n","      <td>268668.069110</td>\n","      <td>Transportation and Warehousing</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>41.251500</td>\n","      <td>-78.742440</td>\n","      <td>BROCKPORT</td>\n","      <td>PA</td>\n","      <td>JEFFERSON</td>\n","      <td>42065.0</td>\n","      <td>327213</td>\n","      <td>28275.061385</td>\n","      <td>32075.140635</td>\n","      <td>26445.792090</td>\n","      <td>23385.161510</td>\n","      <td>84908.372871</td>\n","      <td>6212.899604</td>\n","      <td>3.473291e+04</td>\n","      <td>39045.247387</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>44.959660</td>\n","      <td>-93.193410</td>\n","      <td>SAINT PAUL</td>\n","      <td>MN</td>\n","      <td>RAMSEY</td>\n","      <td>27123.0</td>\n","      <td>322130</td>\n","      <td>37330.205714</td>\n","      <td>42503.897432</td>\n","      <td>43906.102080</td>\n","      <td>42958.306538</td>\n","      <td>49004.603631</td>\n","      <td>52.038452</td>\n","      <td>1.426237e+04</td>\n","      <td>20204.924986</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32.818720</td>\n","      <td>-117.125800</td>\n","      <td>SAN DIEGO</td>\n","      <td>CA</td>\n","      <td>SAN DIEGO</td>\n","      <td>6073.0</td>\n","      <td>333611</td>\n","      <td>45310.722699</td>\n","      <td>39897.800897</td>\n","      <td>40203.428231</td>\n","      <td>39437.099224</td>\n","      <td>84959.769922</td>\n","      <td>15351.359676</td>\n","      <td>4.000654e+04</td>\n","      <td>63935.249120</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>38.651945</td>\n","      <td>-75.914445</td>\n","      <td>HURLOCK</td>\n","      <td>MD</td>\n","      <td>DORCHESTER</td>\n","      <td>24019.0</td>\n","      <td>562212</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>110523.066755</td>\n","      <td>98954.793233</td>\n","      <td>3.467008e+06</td>\n","      <td>147802.356027</td>\n","      <td>Administrative and Support and Waste Managemen...</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>31.361795</td>\n","      <td>-101.776403</td>\n","      <td>RANKIN</td>\n","      <td>TX</td>\n","      <td>UPTON</td>\n","      <td>48461.0</td>\n","      <td>211112</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Mining, Quarrying, and Oil and Gas Extraction</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>41.005565</td>\n","      <td>-96.154917</td>\n","      <td>LOUISVILLE</td>\n","      <td>NE</td>\n","      <td>CASS</td>\n","      <td>31025.0</td>\n","      <td>327310</td>\n","      <td>22956.125554</td>\n","      <td>23592.402994</td>\n","      <td>25069.498286</td>\n","      <td>24560.172725</td>\n","      <td>166520.232511</td>\n","      <td>469732.826538</td>\n","      <td>8.255855e+04</td>\n","      <td>85775.307153</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>39.364417</td>\n","      <td>-93.449361</td>\n","      <td>CARROLLTON</td>\n","      <td>MO</td>\n","      <td>CARROLL</td>\n","      <td>29033.0</td>\n","      <td>325193</td>\n","      <td>124460.895022</td>\n","      <td>140816.449347</td>\n","      <td>93118.705227</td>\n","      <td>130326.946431</td>\n","      <td>71773.803649</td>\n","      <td>936031.894142</td>\n","      <td>3.369613e+05</td>\n","      <td>156640.371706</td>\n","      <td>Manufacturing</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>31.591369</td>\n","      <td>-96.216360</td>\n","      <td>TEAGUE</td>\n","      <td>TX</td>\n","      <td>FREESTONE</td>\n","      <td>48161.0</td>\n","      <td>211111</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>841773.060989</td>\n","      <td>4.082144e+06</td>\n","      <td>350096.803939</td>\n","      <td>Mining, Quarrying, and Oil and Gas Extraction</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 16 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35dcdab3-52a0-4a15-bbbf-663eced229e0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-35dcdab3-52a0-4a15-bbbf-663eced229e0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-35dcdab3-52a0-4a15-bbbf-663eced229e0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-97cc637a-6358-41b5-8632-929308513dfe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97cc637a-6358-41b5-8632-929308513dfe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-97cc637a-6358-41b5-8632-929308513dfe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_14558a9c-45d7-4df2-9f69-a7a2f30a20aa\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_14558a9c-45d7-4df2-9f69-a7a2f30a20aa button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_df","summary":"{\n  \"name\": \"test_df\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.758664967537397,\n        \"min\": 13.463579,\n        \"max\": 71.292071,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          36.1491,\n          29.682045,\n          25.85784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.263441645665505,\n        \"min\": -158.125764,\n        \"max\": 144.678216,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          -96.96397,\n          -84.483991,\n          -98.31008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1647,\n        \"samples\": [\n          \"GALVESTON\",\n          \"BOISE\",\n          \"SAN ARDO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"GA\",\n          \"DE\",\n          \"SD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"County\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 865,\n        \"samples\": [\n          \"KANAWHA\",\n          \"HANCOCK\",\n          \"MAYAGUEZ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FIPScode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16241.454601706124,\n        \"min\": 1001.0,\n        \"max\": 78030.0,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          39173.0,\n          26163.0,\n          27127.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PrimaryNAICS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147092,\n        \"min\": 211111,\n        \"max\": 928110,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          213112,\n          311611,\n          331210\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_10_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153260.8934282091,\n        \"min\": 4405.828910812044,\n        \"max\": 1374502.9266120757,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          15151.19740345126,\n          46183.68918687044,\n          21078.80697763863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_11_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50742.80939795908,\n        \"min\": 5343.548841848329,\n        \"max\": 481505.852809956,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          21461.32437823258,\n          48995.95349964959,\n          24962.37197178924\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_12_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96607.92544572477,\n        \"min\": 3144.5571408761243,\n        \"max\": 898432.732338988,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          17311.855440674823,\n          44777.45490159112,\n          16595.45802089126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRI_Air_Emissions_13_in_lbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109221.25710756132,\n        \"min\": 1221.4376824539213,\n        \"max\": 1010901.828389014,\n        \"num_unique_values\": 874,\n        \"samples\": [\n          11371.572489848208,\n          40829.582779592645,\n          23703.26616989767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_10_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 523900.6905247671,\n        \"min\": 134.22630653291708,\n        \"max\": 3927869.397368078,\n        \"num_unique_values\": 2130,\n        \"samples\": [\n          68182.52126620257,\n          882894.9220059533,\n          278999.1032526391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_11_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275363.2669497924,\n        \"min\": 52.03845177487528,\n        \"max\": 2120410.8562870584,\n        \"num_unique_values\": 2297,\n        \"samples\": [\n          100899.59307034814,\n          36649.895737462415,\n          21552.90524045979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_12_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 744804.5468121156,\n        \"min\": 3003.9516055817003,\n        \"max\": 6112087.345974441,\n        \"num_unique_values\": 2371,\n        \"samples\": [\n          285044.4940147917,\n          101373.609689835,\n          1410650.0982454163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GHG_Direct_Emissions_13_in_metric_tons\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 428452.149925799,\n        \"min\": 222.6384210366596,\n        \"max\": 4292471.519790898,\n        \"num_unique_values\": 2435,\n        \"samples\": [\n          68263.16109033479,\n          4316.304107072552,\n          48128.59588285932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Economic_Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"Professional, Scientific, and Technical Services\",\n          \"Other Services (except Public Administration)\",\n          \"Mining, Quarrying, and Oil and Gas Extraction\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["test_distance"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"cFQijI-T7Hz-","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":451,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"6c6c2af2-499d-47a7-c9f3-42f97afe4e9a"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Economy_Sector_Weighted_Avg  Economic_Sector_Average  \\\n","0                    28019.568906            369614.866259   \n","1                     1296.575343             75372.922188   \n","2                    59857.420688             44340.597367   \n","3                    45265.635701            127292.222361   \n","4                     8838.742950             70847.235694   \n","...                           ...                      ...   \n","2503                 46677.018970            344616.752313   \n","2504                290186.877822            544751.143291   \n","2505                102525.917615            658668.333532   \n","2506                  3259.275220             58047.779667   \n","2507                109681.299454             48269.136655   \n","\n","      Nearest_Weighted_Average  Nearest_Average  \n","0                454847.563793    606222.120889  \n","1                 26392.933789    299096.231937  \n","2                 81533.914173    203831.976280  \n","3                297072.418525    405635.394345  \n","4                617665.034364    290001.288780  \n","...                        ...              ...  \n","2503              45282.942220    309317.094507  \n","2504             290186.877822    544751.143291  \n","2505             100759.314574    598531.117832  \n","2506               8262.408868     91773.030660  \n","2507             119664.619667     72463.524436  \n","\n","[2508 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-a4fa6a88-14fb-497f-80c9-47c4be260708\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Economy_Sector_Weighted_Avg</th>\n","      <th>Economic_Sector_Average</th>\n","      <th>Nearest_Weighted_Average</th>\n","      <th>Nearest_Average</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>28019.568906</td>\n","      <td>369614.866259</td>\n","      <td>454847.563793</td>\n","      <td>606222.120889</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1296.575343</td>\n","      <td>75372.922188</td>\n","      <td>26392.933789</td>\n","      <td>299096.231937</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>59857.420688</td>\n","      <td>44340.597367</td>\n","      <td>81533.914173</td>\n","      <td>203831.976280</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>45265.635701</td>\n","      <td>127292.222361</td>\n","      <td>297072.418525</td>\n","      <td>405635.394345</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8838.742950</td>\n","      <td>70847.235694</td>\n","      <td>617665.034364</td>\n","      <td>290001.288780</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>46677.018970</td>\n","      <td>344616.752313</td>\n","      <td>45282.942220</td>\n","      <td>309317.094507</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>290186.877822</td>\n","      <td>544751.143291</td>\n","      <td>290186.877822</td>\n","      <td>544751.143291</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>102525.917615</td>\n","      <td>658668.333532</td>\n","      <td>100759.314574</td>\n","      <td>598531.117832</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>3259.275220</td>\n","      <td>58047.779667</td>\n","      <td>8262.408868</td>\n","      <td>91773.030660</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>109681.299454</td>\n","      <td>48269.136655</td>\n","      <td>119664.619667</td>\n","      <td>72463.524436</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4fa6a88-14fb-497f-80c9-47c4be260708')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a4fa6a88-14fb-497f-80c9-47c4be260708 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a4fa6a88-14fb-497f-80c9-47c4be260708');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-857e1a5b-ae08-448e-87ba-dcfede05bfa0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-857e1a5b-ae08-448e-87ba-dcfede05bfa0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-857e1a5b-ae08-448e-87ba-dcfede05bfa0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_214c8be5-82a6-4fec-b2f2-8bb231aa5b1d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_distance')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_214c8be5-82a6-4fec-b2f2-8bb231aa5b1d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_distance');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_distance","summary":"{\n  \"name\": \"test_distance\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": \"Economy_Sector_Weighted_Avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 747743.4007737286,\n        \"min\": 0.0,\n        \"max\": 28798681.499843683,\n        \"num_unique_values\": 2440,\n        \"samples\": [\n          9241.699412577524,\n          53953.32286908812,\n          73060.86380770168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Economic_Sector_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 220654.0847202713,\n        \"min\": 21511.937733780047,\n        \"max\": 1497479.6523419195,\n        \"num_unique_values\": 1942,\n        \"samples\": [\n          66700.71621416649,\n          110183.04314309386,\n          150909.70651325549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nearest_Weighted_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 897491.7777571155,\n        \"min\": 0.0,\n        \"max\": 28826451.48041248,\n        \"num_unique_values\": 2438,\n        \"samples\": [\n          19779.95805247306,\n          1628122.6416674675,\n          19059.37945828492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nearest_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 217658.4362816865,\n        \"min\": 23179.279306972345,\n        \"max\": 1445969.2834505166,\n        \"num_unique_values\": 1925,\n        \"samples\": [\n          142198.1623205142,\n          75915.38534270627,\n          793511.7266328961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["train_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"loGZ5kF2H0TJ","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":18,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"14d5c933-edba-4e3e-9cae-4203f2adfd49"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4655, 17)"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["train_df = pd.concat([train_df, train_distance], axis=1)\n","test_df = pd.concat([test_df, test_distance], axis=1)\n"],"metadata":{"id":"anllSwP8CVY3","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":16,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","execution_count":68,"metadata":{"id":"QlqCT2oYOtW5","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":16,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["def create_features1(df):\n","\n","\n","    # Year-over-year difference\n","    df['TRI_Air_Emissions_YoY_Change_11'] = df['TRI_Air_Emissions_11_in_lbs'] - df['TRI_Air_Emissions_10_in_lbs']\n","    df['TRI_Air_Emissions_YoY_Change_12'] = df['TRI_Air_Emissions_12_in_lbs'] - df['TRI_Air_Emissions_11_in_lbs']\n","    df['TRI_Air_Emissions_YoY_Change_13'] = df['TRI_Air_Emissions_13_in_lbs'] - df['TRI_Air_Emissions_12_in_lbs']\n","\n","   # Year-over-year growth rate with NaN protection\n","    df['TRI_Air_Emissions_Growth_Rate_11'] = np.where(\n","        df['TRI_Air_Emissions_10_in_lbs'].notna() & (df['TRI_Air_Emissions_10_in_lbs'] != 0),\n","        (df['TRI_Air_Emissions_11_in_lbs'] - df['TRI_Air_Emissions_10_in_lbs']) / df['TRI_Air_Emissions_10_in_lbs'],\n","        np.nan\n","    )\n","\n","    df['TRI_Air_Emissions_Growth_Rate_12'] = np.where(\n","        df['TRI_Air_Emissions_11_in_lbs'].notna() & (df['TRI_Air_Emissions_11_in_lbs'] != 0),\n","        (df['TRI_Air_Emissions_12_in_lbs'] - df['TRI_Air_Emissions_11_in_lbs']) / df['TRI_Air_Emissions_11_in_lbs'],\n","        np.nan\n","    )\n","\n","    df['TRI_Air_Emissions_Growth_Rate_13'] = np.where(\n","        df['TRI_Air_Emissions_12_in_lbs'].notna() & (df['TRI_Air_Emissions_12_in_lbs'] != 0),\n","        (df['TRI_Air_Emissions_13_in_lbs'] - df['TRI_Air_Emissions_12_in_lbs']) / df['TRI_Air_Emissions_12_in_lbs'],\n","        np.nan\n","    )\n","\n","    return df\n","\n","train_df      = create_features1(train_df)\n","test_df       = create_features1(test_df)\n","new_features1 = ['TRI_Air_Emissions_YoY_Change_11','TRI_Air_Emissions_YoY_Change_12','TRI_Air_Emissions_YoY_Change_13',\n","                 'TRI_Air_Emissions_Growth_Rate_11','TRI_Air_Emissions_Growth_Rate_12','TRI_Air_Emissions_Growth_Rate_13']"]},{"cell_type":"code","execution_count":69,"metadata":{"id":"h6ZgQHqQOv4x","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":15,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["def create_features2(df):\n","\n","\n","    # Year-over-year difference\n","    df['GHG_Direct_Emissions_YoY_Change_11'] = df['GHG_Direct_Emissions_11_in_metric_tons'] - df['GHG_Direct_Emissions_10_in_metric_tons']\n","    df['GHG_Direct_Emissions_YoY_Change_12'] = df['GHG_Direct_Emissions_12_in_metric_tons'] - df['GHG_Direct_Emissions_11_in_metric_tons']\n","    df['GHG_Direct_Emissions_YoY_Change_13'] = df['GHG_Direct_Emissions_13_in_metric_tons'] - df['GHG_Direct_Emissions_12_in_metric_tons']\n","\n","    # Year-over-year growth rate for GHG Direct Emissions with NaN protection\n","    df['GHG_Direct_Emissions_Growth_Rate_11'] = np.where(\n","        df['GHG_Direct_Emissions_10_in_metric_tons'].notna() & (df['GHG_Direct_Emissions_10_in_metric_tons'] != 0),\n","        (df['GHG_Direct_Emissions_11_in_metric_tons'] - df['GHG_Direct_Emissions_10_in_metric_tons']) / df['GHG_Direct_Emissions_10_in_metric_tons'],\n","        np.nan\n","    )\n","\n","    df['GHG_Direct_Emissions_Growth_Rate_12'] = np.where(\n","        df['GHG_Direct_Emissions_11_in_metric_tons'].notna() & (df['GHG_Direct_Emissions_11_in_metric_tons'] != 0),\n","        (df['GHG_Direct_Emissions_12_in_metric_tons'] - df['GHG_Direct_Emissions_11_in_metric_tons']) / df['GHG_Direct_Emissions_11_in_metric_tons'],\n","        np.nan\n","    )\n","\n","    df['GHG_Direct_Emissions_Growth_Rate_13'] = np.where(\n","        df['GHG_Direct_Emissions_12_in_metric_tons'].notna() & (df['GHG_Direct_Emissions_12_in_metric_tons'] != 0),\n","        (df['GHG_Direct_Emissions_13_in_metric_tons'] - df['GHG_Direct_Emissions_12_in_metric_tons']) / df['GHG_Direct_Emissions_12_in_metric_tons'],\n","        np.nan\n","    )\n","\n","    return df\n","\n","\n","new_features2 = ['GHG_Direct_Emissions_YoY_Change_11','GHG_Direct_Emissions_YoY_Change_12','GHG_Direct_Emissions_YoY_Change_13',\n","                 'GHG_Direct_Emissions_Growth_Rate_11','GHG_Direct_Emissions_Growth_Rate_12','GHG_Direct_Emissions_Growth_Rate_13'\n","                 ]\n","train_df      = create_features2(train_df)\n","test_df       = create_features2(test_df)"]},{"cell_type":"code","execution_count":70,"metadata":{"id":"c-zhP_P2OyLx","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":15,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["def create_features3(df):\n","    df['TRI_to_GHG_Ratio_10'] = np.where(df['GHG_Direct_Emissions_10_in_metric_tons'].notna(),\n","                                     df['TRI_Air_Emissions_10_in_lbs'] / df['GHG_Direct_Emissions_10_in_metric_tons'],\n","                                     np.nan)\n","\n","    df['TRI_to_GHG_Ratio_11'] = np.where(df['GHG_Direct_Emissions_11_in_metric_tons'].notna(),\n","                                        df['TRI_Air_Emissions_11_in_lbs'] / df['GHG_Direct_Emissions_11_in_metric_tons'],\n","                                        np.nan)\n","\n","    df['TRI_to_GHG_Ratio_12'] = np.where(df['GHG_Direct_Emissions_12_in_metric_tons'].notna(),\n","                                        df['TRI_Air_Emissions_12_in_lbs'] / df['GHG_Direct_Emissions_12_in_metric_tons'],\n","                                        np.nan)\n","\n","    df['TRI_to_GHG_Ratio_13'] = np.where(df['GHG_Direct_Emissions_13_in_metric_tons'].notna(),\n","                                        df['TRI_Air_Emissions_13_in_lbs'] / df['GHG_Direct_Emissions_13_in_metric_tons'],\n","                                        np.nan)\n","    return df\n","\n","\n","\n","train_df      = create_features3(train_df)\n","test_df       = create_features3(test_df)\n","new_features3 = ['TRI_to_GHG_Ratio_10','TRI_to_GHG_Ratio_11','TRI_to_GHG_Ratio_12','TRI_to_GHG_Ratio_13']"]},{"cell_type":"code","execution_count":71,"metadata":{"id":"AxttPGFgO0xh","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":15,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["summary_df = train_df.groupby(['Economic_Sector', 'State']).agg({'GHG_Direct_Emissions_14_in_metric_tons': ['mean', 'median', 'max', 'min','count']})\n","\n","summary_df.columns = [\n","                        'GHG_Direct_Emissions_14_in_metric_tons_mean',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_median',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_max',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_min',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_count'\n","                     ]\n","\n","summary_df = summary_df.reset_index()\n","\n","train_df = train_df.merge(summary_df, on=['Economic_Sector', 'State'], how='left')\n","test_df  = test_df.merge(summary_df,  on=['Economic_Sector', 'State'], how='left')"]},{"cell_type":"code","source":["test_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dh8UdsT2MPP3","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":15,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"1276da1d-7339-4c6c-c801-84042c9cf788"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2508, 41)"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["train_df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QLLrWBh795MU","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":13,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"9fd5cfd6-0bbc-48ef-e1f6-af7439c9ff1a"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4655, 42)"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","execution_count":74,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LotXamPyO3Ve","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":12,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"e7c318f2-b073-4479-ef8b-e37fedecd753"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((4655, 42), (2508, 42))"]},"metadata":{},"execution_count":74}],"source":["merged_df = pd.concat((train_df,test_df),axis=0)\n","for cols in ['City','State','County','FIPScode','PrimaryNAICS','Economic_Sector']:\n","    le              = LabelEncoder()\n","    merged_df[cols] = le.fit_transform(merged_df[cols].values.reshape(-1,1))\n","\n","train_df = merged_df.iloc[:train_df.shape[0],:]\n","test_df  = merged_df.iloc[train_df.shape[0]:,:]\n","train_df.shape,test_df.shape"]},{"cell_type":"markdown","source":["### ここでもうtest_dfの形が違う"],"metadata":{"id":"hIWfVg98LXaY"}},{"cell_type":"code","execution_count":75,"metadata":{"id":"iANX4YJaO58C","executionInfo":{"status":"ok","timestamp":1732034738099,"user_tz":-540,"elapsed":10,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["numerical_columns = [\n","                    'TRI_Air_Emissions_10_in_lbs', 'TRI_Air_Emissions_11_in_lbs',\n","                    'TRI_Air_Emissions_12_in_lbs', 'TRI_Air_Emissions_13_in_lbs','PrimaryNAICS',\n","                    'GHG_Direct_Emissions_10_in_metric_tons', 'GHG_Direct_Emissions_11_in_metric_tons',\n","                    'GHG_Direct_Emissions_12_in_metric_tons', 'GHG_Direct_Emissions_13_in_metric_tons',\n","                    ]\n","lat_lon_columns   = ['Latitude','Longitude']\n","target_columns    = ['GHG_Direct_Emissions_14_in_metric_tons']\n","categorical_columns = ['City','State','County','FIPScode','PrimaryNAICS','Economic_Sector']\n","train_aggregations  =  [\n","                        'GHG_Direct_Emissions_14_in_metric_tons_mean',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_median',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_max',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_min',\n","                        'GHG_Direct_Emissions_14_in_metric_tons_count'\n","                     ]\n","new_features1  = ['TRI_Air_Emissions_YoY_Change_11','TRI_Air_Emissions_YoY_Change_12','TRI_Air_Emissions_YoY_Change_13',\n","                    'TRI_Air_Emissions_Growth_Rate_11','TRI_Air_Emissions_Growth_Rate_12','TRI_Air_Emissions_Growth_Rate_13']\n","\n","new_features2   = ['GHG_Direct_Emissions_YoY_Change_11','GHG_Direct_Emissions_YoY_Change_12','GHG_Direct_Emissions_YoY_Change_13',\n","                  'GHG_Direct_Emissions_Growth_Rate_11','GHG_Direct_Emissions_Growth_Rate_12','GHG_Direct_Emissions_Growth_Rate_13'\n","                  ]\n","new_features3   = ['TRI_to_GHG_Ratio_10','TRI_to_GHG_Ratio_11','TRI_to_GHG_Ratio_12','TRI_to_GHG_Ratio_13']\n","neighbour_feats = ['Economy_Sector_Weighted_Avg','Economic_Sector_Average','Nearest_Weighted_Average','Nearest_Average']\n","\n","\n","train = train_df[numerical_columns+\n","                 lat_lon_columns+\n","                #  categorical_columns+\n","                 new_features1+['Economic_Sector']\n","                #  new_features2\n","               #   new_features3+\n","                #  train_aggregations+\n","               #   neighbour_feats\n","                 ].values\n","test  = test_df[numerical_columns+\n","                 lat_lon_columns+\n","                #  categorical_columns+\n","                 new_features1+['Economic_Sector']\n","                #  new_features2\n","               #   new_features3+\n","                #  train_aggregations+\n","               #   neighbour_feats\n","                 ].values\n","target = train_df[target_columns].values\n"]},{"cell_type":"code","source":["len(target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DvfqDMIDtaxI","executionInfo":{"status":"ok","timestamp":1732034738100,"user_tz":-540,"elapsed":11,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"49d6b59d-4096-41c1-e54d-3efe7f5227e2"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4655"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["train_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9pU2gHjDFUTz","executionInfo":{"status":"ok","timestamp":1732034738100,"user_tz":-540,"elapsed":9,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"93d128de-02da-45ac-82b4-63dc47b579dc"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 4655 entries, 0 to 4654\n","Data columns (total 42 columns):\n"," #   Column                                         Non-Null Count  Dtype  \n","---  ------                                         --------------  -----  \n"," 0   Latitude                                       4553 non-null   float64\n"," 1   Longitude                                      4553 non-null   float64\n"," 2   City                                           4655 non-null   int64  \n"," 3   State                                          4655 non-null   int64  \n"," 4   County                                         4655 non-null   int64  \n"," 5   FIPScode                                       4655 non-null   int64  \n"," 6   PrimaryNAICS                                   4655 non-null   int64  \n"," 7   TRI_Air_Emissions_10_in_lbs                    1635 non-null   float64\n"," 8   TRI_Air_Emissions_11_in_lbs                    1635 non-null   float64\n"," 9   TRI_Air_Emissions_12_in_lbs                    1635 non-null   float64\n"," 10  TRI_Air_Emissions_13_in_lbs                    1635 non-null   float64\n"," 11  GHG_Direct_Emissions_10_in_metric_tons         3953 non-null   float64\n"," 12  GHG_Direct_Emissions_11_in_metric_tons         4284 non-null   float64\n"," 13  GHG_Direct_Emissions_12_in_metric_tons         4395 non-null   float64\n"," 14  GHG_Direct_Emissions_13_in_metric_tons         4507 non-null   float64\n"," 15  GHG_Direct_Emissions_14_in_metric_tons         4655 non-null   float64\n"," 16  Economic_Sector                                4655 non-null   int64  \n"," 17  Economy_Sector_Weighted_Avg                    4655 non-null   float64\n"," 18  Economic_Sector_Average                        4550 non-null   float64\n"," 19  Nearest_Weighted_Average                       4655 non-null   float64\n"," 20  Nearest_Average                                4553 non-null   float64\n"," 21  TRI_Air_Emissions_YoY_Change_11                1635 non-null   float64\n"," 22  TRI_Air_Emissions_YoY_Change_12                1635 non-null   float64\n"," 23  TRI_Air_Emissions_YoY_Change_13                1635 non-null   float64\n"," 24  TRI_Air_Emissions_Growth_Rate_11               1635 non-null   float64\n"," 25  TRI_Air_Emissions_Growth_Rate_12               1635 non-null   float64\n"," 26  TRI_Air_Emissions_Growth_Rate_13               1635 non-null   float64\n"," 27  GHG_Direct_Emissions_YoY_Change_11             3953 non-null   float64\n"," 28  GHG_Direct_Emissions_YoY_Change_12             4284 non-null   float64\n"," 29  GHG_Direct_Emissions_YoY_Change_13             4395 non-null   float64\n"," 30  GHG_Direct_Emissions_Growth_Rate_11            3953 non-null   float64\n"," 31  GHG_Direct_Emissions_Growth_Rate_12            4284 non-null   float64\n"," 32  GHG_Direct_Emissions_Growth_Rate_13            4395 non-null   float64\n"," 33  TRI_to_GHG_Ratio_10                            1635 non-null   float64\n"," 34  TRI_to_GHG_Ratio_11                            1635 non-null   float64\n"," 35  TRI_to_GHG_Ratio_12                            1635 non-null   float64\n"," 36  TRI_to_GHG_Ratio_13                            1635 non-null   float64\n"," 37  GHG_Direct_Emissions_14_in_metric_tons_mean    4655 non-null   float64\n"," 38  GHG_Direct_Emissions_14_in_metric_tons_median  4655 non-null   float64\n"," 39  GHG_Direct_Emissions_14_in_metric_tons_max     4655 non-null   float64\n"," 40  GHG_Direct_Emissions_14_in_metric_tons_min     4655 non-null   float64\n"," 41  GHG_Direct_Emissions_14_in_metric_tons_count   4655 non-null   float64\n","dtypes: float64(36), int64(6)\n","memory usage: 1.5 MB\n"]}]},{"cell_type":"markdown","source":["{'iterations': 864, 'depth': 4, 'learning_rate': 0.02896173229206305, 'l2_leaf_reg': 1.2322248317139508, 'border_count': 254, 'bagging_temperature': 0.14851401382294827, 'random_strength': 0.9638662135548094}"],"metadata":{"id":"Dj74duRUvcsN"}},{"cell_type":"code","execution_count":103,"metadata":{"id":"uMBZvRoDO8EX","executionInfo":{"status":"ok","timestamp":1732035454161,"user_tz":-540,"elapsed":293,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["\n","def get_models_trained(train, test, target, num_folds):\n","    kf = KFold(n_splits=num_folds, shuffle=True, random_state=13)\n","\n","    oof_predictions = np.zeros(len(train))\n","    test_predictions = np.zeros(len(test))\n","    sum_model1_error = 0\n","    sum_model2_error = 0\n","    sum_model3_error = 0\n","    sum_model4_error = 0\n","\n","    for fold, (train_index, valid_index) in enumerate(kf.split(train, target)):\n","        print(f\"Starting Fold {fold + 1}\")\n","        X_train, X_valid = train[train_index], train[valid_index]\n","        y_train, y_valid = target[train_index], target[valid_index]\n","\n","        # モデルと損失の初期化\n","        model_dict = {}\n","        loss_dict = {}\n","        valid_pred_dict = {}\n","\n","        # モデル1: XGBRegressor\n","        params1 = {\n","            \"n_estimators\": 626,\n","            \"max_depth\": 3,\n","            \"random_state\": 13,\n","            \"min_child_weight\": 0.001190123543553736,\n","            \"learning_rate\": 0.010519736270936835,\n","            \"subsample\": 0.7304788478701394,\n","            \"colsample_bylevel\": 0.604447278915981,\n","            \"colsample_bytree\": 0.7616852136157319,\n","            \"reg_alpha\": 0.115175569924065,\n","            \"reg_lambda\": 0.07155347824929895\n","        }\n","        model1 = XGBRegressor(**params1)\n","\n","        # モデル2: catboost\n","        params2 = {'iterations': 864,\n","                   'depth': 4,\n","                   'learning_rate': 0.02896173229206305,\n","                   'l2_leaf_reg': 1.2322248317139508,\n","                   'border_count': 254,\n","                   'bagging_temperature': 0.14851401382294827,\n","                   'random_strength': 0.9638662135548094,\n","                   'random_state': 42}\n","        model2 = CatBoostRegressor(**params2)\n","\n","        # モデル3: LGBMRegressor\n","        # params3 = {\n","        #     \"n_estimators\": 56,\n","        #     \"random_state\": 13,\n","        #     \"verbose\": -1,\n","        # }\n","        params3 ={\n","            \"n_estimators\": 897,\n","            \"max_depth\": 4,\n","            \"min_child_weight\": 1.9636282677053687,\n","            \"learning_rate\": 0.006151391207761763,\n","            \"subsample\": 0.8251910979922186,\n","            \"colsample_bylevel\": 0.6454805596196158,\n","            \"colsample_bytree\": 0.598042694363472,\n","            \"reg_alpha\": 2.1719824223479005,\n","            \"reg_lambda\": 0.009192236594241635,\n","        }\n","        model3 = XGBRegressor(**params3)\n","\n","        params4 = {\n","            \"iterations\": 940,\n","            \"depth\": 3,\n","            \"learning_rate\": 0.019908189422344794,\n","            \"l2_leaf_reg\": 1,\n","            \"bagging_temperature\": 0.5063893392618839,\n","            \"min_data_in_leaf\": 1,\n","        }\n","        model4 = CatBoostRegressor(**params4)\n","        # モデル1の訓練と予測\n","        model1.fit(X_train, np.log1p(y_train), verbose=0)\n","        valid_preds1 = np.expm1(model1.predict(X_valid))\n","        rmsle1 = np.sqrt(mean_squared_log_error(y_valid, valid_preds1))\n","        print(f\"Fold {fold + 1} RMSLE for model1 = {rmsle1}\")\n","\n","        # モデル2の訓練と予測\n","        model2.fit(X_train, np.log1p(y_train), verbose=0)\n","        valid_preds2 = np.expm1(model2.predict(X_valid))\n","        rmsle2 = np.sqrt(mean_squared_log_error(y_valid, valid_preds2))\n","        print(f\"Fold {fold + 1} RMSLE for model2 = {rmsle2}\")\n","\n","        # モデル3の訓練と予測\n","        model3.fit(X_train, np.log1p(y_train), verbose=0)\n","        valid_preds3 = np.expm1(model3.predict(X_valid))\n","        rmsle3 = np.sqrt(mean_squared_log_error(y_valid, valid_preds3))\n","        print(f\"Fold {fold + 1} RMSLE for model3 = {rmsle3}\")\n","\n","        # モデル４\n","        model4.fit(X_train, np.log1p(y_train), verbose=0)\n","        valid_preds4 = np.expm1(model4.predict(X_valid))\n","        rmsle4 = np.sqrt(mean_squared_log_error(y_valid, valid_preds4))\n","        print(f\"Fold {fold + 1} RMSLE for model4 = {rmsle4}\")\n","\n","\n","        # 損失とモデルの保存\n","        loss_dict['model1'] = rmsle1\n","        loss_dict['model2'] = rmsle2\n","        loss_dict['model3'] = rmsle3\n","        loss_dict['model4'] = rmsle4\n","\n","        sum_model1_error += rmsle1\n","        sum_model2_error += rmsle2\n","        sum_model3_error += rmsle3\n","        sum_model4_error += rmsle4\n","\n","        model_dict['model1'] = model1\n","        model_dict['model2'] = model2\n","        model_dict['model3'] = model3\n","        model_dict['model4'] = model4\n","\n","        # バリデーション予測の保存\n","        valid_pred_dict['model1'] = valid_preds1\n","        valid_pred_dict['model2'] = valid_preds2\n","        valid_pred_dict['model3'] = valid_preds3\n","        valid_pred_dict['model4'] = valid_preds4\n","\n","        # 平均予測と損失の計算\n","        valid_preds_mean = np.mean(list(valid_pred_dict.values()), axis=0)\n","        rmsle_mean = np.sqrt(mean_squared_log_error(y_valid, valid_preds_mean))\n","        print(f\"Fold {fold + 1} Average RMSLE = {rmsle_mean}\")\n","\n","        # 最も損失が小さいモデルの選択\n","        min_loss_model = min(loss_dict, key=loss_dict.get)\n","        best_model = model_dict[min_loss_model]\n","        valid_preds_best_model = np.expm1(best_model.predict(X_valid))\n","        rmsle_best = np.sqrt(mean_squared_log_error(y_valid, valid_preds_best_model))\n","\n","\n","        # 平均損失と最良損失の比較\n","        if rmsle_mean > rmsle_best:\n","            print(f\"The average RMSLE is {rmsle_mean} while the best RMSLE is {rmsle_best} and we proceed with the model with best RMSLE\")\n","            oof_predictions[valid_index] = valid_preds_best_model\n","            test_preds = best_model.predict(test)\n","            test_predictions += (test_preds) / kf.n_splits\n","        else:\n","            print(f\"The average RMSLE is {rmsle_mean} while the best RMSLE is {rmsle_best} and we proceed with averaging of all models\")\n","            output_predictions = [model.predict(test) for model in model_dict.values()]\n","            output_preds = np.mean(output_predictions, axis=0)\n","            test_predictions += output_preds / kf.n_splits\n","            oof_predictions[valid_index] = valid_preds_mean\n","\n","        # メモリの解放\n","        del X_train, X_valid, y_train, y_valid, model1, model2, model3, model4\n","        gc.collect()\n","\n","        print('---------------\\n')\n","\n","    # 最終的なOOF RMSLEの計算\n","    final_RMSLE = np.sqrt(mean_squared_log_error(target, oof_predictions))\n","    print(f\"OOF RMSLE = {final_RMSLE}\")\n","\n","    # テスト予測の逆変換\n","    final_test_predictions = np.expm1(test_predictions)\n","\n","    print(f\"sum_model1_error: {sum_model1_error}\")\n","    print(f\"sum_model2_error: {sum_model2_error}\")\n","    print(f\"sum_model3_error: {sum_model3_error}\")\n","    print(f\"sum_model4_error: {sum_model4_error}\")\n","    return oof_predictions, final_test_predictions"]},{"cell_type":"code","source":["oof_predictions,test_preds = get_models_trained(train,test,target,30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CX_-2Jn2uocX","executionInfo":{"status":"ok","timestamp":1732035636668,"user_tz":-540,"elapsed":181601,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"d5e8f549-bc43-4688-e26b-f254187b802b"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting Fold 1\n","Fold 1 RMSLE for model1 = 0.6784038334722061\n","Fold 1 RMSLE for model2 = 0.6767784754194875\n","Fold 1 RMSLE for model3 = 0.6715262552466449\n","Fold 1 RMSLE for model4 = 0.6798561042516599\n","Fold 1 Average RMSLE = 0.6744073398035267\n","The average RMSLE is 0.6744073398035267 while the best RMSLE is 0.6715262552466449 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 2\n","Fold 2 RMSLE for model1 = 0.7420926269029038\n","Fold 2 RMSLE for model2 = 0.7534279379669989\n","Fold 2 RMSLE for model3 = 0.746758951797034\n","Fold 2 RMSLE for model4 = 0.747447412114908\n","Fold 2 Average RMSLE = 0.745189415034829\n","The average RMSLE is 0.745189415034829 while the best RMSLE is 0.7420926269029038 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 3\n","Fold 3 RMSLE for model1 = 0.621770042843018\n","Fold 3 RMSLE for model2 = 0.6350182084465013\n","Fold 3 RMSLE for model3 = 0.6252502891650868\n","Fold 3 RMSLE for model4 = 0.6324036785251174\n","Fold 3 Average RMSLE = 0.6257052559339488\n","The average RMSLE is 0.6257052559339488 while the best RMSLE is 0.621770042843018 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 4\n","Fold 4 RMSLE for model1 = 0.7216578366377243\n","Fold 4 RMSLE for model2 = 0.7287943379688201\n","Fold 4 RMSLE for model3 = 0.7237829051313501\n","Fold 4 RMSLE for model4 = 0.7298980577132043\n","Fold 4 Average RMSLE = 0.7240883034427569\n","The average RMSLE is 0.7240883034427569 while the best RMSLE is 0.7216578366377243 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 5\n","Fold 5 RMSLE for model1 = 0.8362554007920471\n","Fold 5 RMSLE for model2 = 0.8312495303846146\n","Fold 5 RMSLE for model3 = 0.8306862727069091\n","Fold 5 RMSLE for model4 = 0.8268627610962639\n","Fold 5 Average RMSLE = 0.8297283244615032\n","The average RMSLE is 0.8297283244615032 while the best RMSLE is 0.8268627610962639 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 6\n","Fold 6 RMSLE for model1 = 0.7974768186521537\n","Fold 6 RMSLE for model2 = 0.8125807469175039\n","Fold 6 RMSLE for model3 = 0.7919462044203496\n","Fold 6 RMSLE for model4 = 0.7978340554563493\n","Fold 6 Average RMSLE = 0.7975813593982223\n","The average RMSLE is 0.7975813593982223 while the best RMSLE is 0.7919462044203496 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 7\n","Fold 7 RMSLE for model1 = 0.7372797043150328\n","Fold 7 RMSLE for model2 = 0.7393063246810462\n","Fold 7 RMSLE for model3 = 0.7349761251054828\n","Fold 7 RMSLE for model4 = 0.7324783005313499\n","Fold 7 Average RMSLE = 0.7345922737695312\n","The average RMSLE is 0.7345922737695312 while the best RMSLE is 0.7324783005313499 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 8\n","Fold 8 RMSLE for model1 = 0.7198559883796454\n","Fold 8 RMSLE for model2 = 0.7371628373067364\n","Fold 8 RMSLE for model3 = 0.730435559769375\n","Fold 8 RMSLE for model4 = 0.7298226989215706\n","Fold 8 Average RMSLE = 0.7269965102485291\n","The average RMSLE is 0.7269965102485291 while the best RMSLE is 0.7198559883796454 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 9\n","Fold 9 RMSLE for model1 = 0.8187851493347977\n","Fold 9 RMSLE for model2 = 0.8333912261783811\n","Fold 9 RMSLE for model3 = 0.8145620509847936\n","Fold 9 RMSLE for model4 = 0.8262358688057279\n","Fold 9 Average RMSLE = 0.8216243940137746\n","The average RMSLE is 0.8216243940137746 while the best RMSLE is 0.8145620509847936 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 10\n","Fold 10 RMSLE for model1 = 0.8544164163004332\n","Fold 10 RMSLE for model2 = 0.8547586053229296\n","Fold 10 RMSLE for model3 = 0.8461976952144079\n","Fold 10 RMSLE for model4 = 0.8459438497960121\n","Fold 10 Average RMSLE = 0.8488568414546424\n","The average RMSLE is 0.8488568414546424 while the best RMSLE is 0.8459438497960121 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 11\n","Fold 11 RMSLE for model1 = 0.7286782888318745\n","Fold 11 RMSLE for model2 = 0.7426047854680201\n","Fold 11 RMSLE for model3 = 0.7359569394694737\n","Fold 11 RMSLE for model4 = 0.7320804480337155\n","Fold 11 Average RMSLE = 0.7319526205236631\n","The average RMSLE is 0.7319526205236631 while the best RMSLE is 0.7286782888318745 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 12\n","Fold 12 RMSLE for model1 = 0.8472367867945148\n","Fold 12 RMSLE for model2 = 0.8455053528899659\n","Fold 12 RMSLE for model3 = 0.8434514336918321\n","Fold 12 RMSLE for model4 = 0.8339558288753541\n","Fold 12 Average RMSLE = 0.840795220370683\n","The average RMSLE is 0.840795220370683 while the best RMSLE is 0.8339558288753541 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 13\n","Fold 13 RMSLE for model1 = 0.7014934991701399\n","Fold 13 RMSLE for model2 = 0.7094987275144542\n","Fold 13 RMSLE for model3 = 0.6990876391913358\n","Fold 13 RMSLE for model4 = 0.7005893050833337\n","Fold 13 Average RMSLE = 0.6994150033818599\n","The average RMSLE is 0.6994150033818599 while the best RMSLE is 0.6990876391913358 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 14\n","Fold 14 RMSLE for model1 = 0.8560263347426316\n","Fold 14 RMSLE for model2 = 0.8529430342666775\n","Fold 14 RMSLE for model3 = 0.858670796372206\n","Fold 14 RMSLE for model4 = 0.8504153970753371\n","Fold 14 Average RMSLE = 0.852005436502571\n","The average RMSLE is 0.852005436502571 while the best RMSLE is 0.8504153970753371 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 15\n","Fold 15 RMSLE for model1 = 0.6568057269157318\n","Fold 15 RMSLE for model2 = 0.6711071930959135\n","Fold 15 RMSLE for model3 = 0.6565127940055163\n","Fold 15 RMSLE for model4 = 0.6610314982546874\n","Fold 15 Average RMSLE = 0.6593626372459873\n","The average RMSLE is 0.6593626372459873 while the best RMSLE is 0.6565127940055163 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 16\n","Fold 16 RMSLE for model1 = 0.6619282735483076\n","Fold 16 RMSLE for model2 = 0.6566436126954652\n","Fold 16 RMSLE for model3 = 0.6678112987146456\n","Fold 16 RMSLE for model4 = 0.642086624410164\n","Fold 16 Average RMSLE = 0.6535737355496521\n","The average RMSLE is 0.6535737355496521 while the best RMSLE is 0.642086624410164 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 17\n","Fold 17 RMSLE for model1 = 0.7973855904752328\n","Fold 17 RMSLE for model2 = 0.797139345788401\n","Fold 17 RMSLE for model3 = 0.7896219482928327\n","Fold 17 RMSLE for model4 = 0.8087069326156989\n","Fold 17 Average RMSLE = 0.7963555091680335\n","The average RMSLE is 0.7963555091680335 while the best RMSLE is 0.7896219482928327 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 18\n","Fold 18 RMSLE for model1 = 0.7319668741593235\n","Fold 18 RMSLE for model2 = 0.7369668703492951\n","Fold 18 RMSLE for model3 = 0.7366144605027689\n","Fold 18 RMSLE for model4 = 0.7360844043392432\n","Fold 18 Average RMSLE = 0.734177402066329\n","The average RMSLE is 0.734177402066329 while the best RMSLE is 0.7319668741593235 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 19\n","Fold 19 RMSLE for model1 = 0.7714686343188604\n","Fold 19 RMSLE for model2 = 0.7608831509426386\n","Fold 19 RMSLE for model3 = 0.7547393461595393\n","Fold 19 RMSLE for model4 = 0.756168265451562\n","Fold 19 Average RMSLE = 0.7578715918760234\n","The average RMSLE is 0.7578715918760234 while the best RMSLE is 0.7547393461595393 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 20\n","Fold 20 RMSLE for model1 = 0.7824571707328865\n","Fold 20 RMSLE for model2 = 0.8135790539382284\n","Fold 20 RMSLE for model3 = 0.7918137825275753\n","Fold 20 RMSLE for model4 = 0.8000184300870494\n","Fold 20 Average RMSLE = 0.7941805381057683\n","The average RMSLE is 0.7941805381057683 while the best RMSLE is 0.7824571707328865 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 21\n","Fold 21 RMSLE for model1 = 0.7872602061111746\n","Fold 21 RMSLE for model2 = 0.7857433537488595\n","Fold 21 RMSLE for model3 = 0.7887734562952505\n","Fold 21 RMSLE for model4 = 0.7851495922395216\n","Fold 21 Average RMSLE = 0.7842503118206968\n","The average RMSLE is 0.7842503118206968 while the best RMSLE is 0.7851495922395216 and we proceed with averaging of all models\n","---------------\n","\n","Starting Fold 22\n","Fold 22 RMSLE for model1 = 0.7326934444444053\n","Fold 22 RMSLE for model2 = 0.7301864634058549\n","Fold 22 RMSLE for model3 = 0.7358079189134165\n","Fold 22 RMSLE for model4 = 0.7356480684057063\n","Fold 22 Average RMSLE = 0.731378985131548\n","The average RMSLE is 0.731378985131548 while the best RMSLE is 0.7301864634058549 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 23\n","Fold 23 RMSLE for model1 = 0.8285707968458688\n","Fold 23 RMSLE for model2 = 0.8215349525899763\n","Fold 23 RMSLE for model3 = 0.8258312679888865\n","Fold 23 RMSLE for model4 = 0.8184390330600441\n","Fold 23 Average RMSLE = 0.8205825040325054\n","The average RMSLE is 0.8205825040325054 while the best RMSLE is 0.8184390330600441 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 24\n","Fold 24 RMSLE for model1 = 0.6736014556451715\n","Fold 24 RMSLE for model2 = 0.692502110415362\n","Fold 24 RMSLE for model3 = 0.6757405534020672\n","Fold 24 RMSLE for model4 = 0.6806168431430228\n","Fold 24 Average RMSLE = 0.6782216038974817\n","The average RMSLE is 0.6782216038974817 while the best RMSLE is 0.6736014556451715 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 25\n","Fold 25 RMSLE for model1 = 0.7625274323478481\n","Fold 25 RMSLE for model2 = 0.7722325973747145\n","Fold 25 RMSLE for model3 = 0.7607553109138309\n","Fold 25 RMSLE for model4 = 0.7725634276152725\n","Fold 25 Average RMSLE = 0.7646831168245551\n","The average RMSLE is 0.7646831168245551 while the best RMSLE is 0.7607553109138309 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 26\n","Fold 26 RMSLE for model1 = 0.786477244036003\n","Fold 26 RMSLE for model2 = 0.8023292707270294\n","Fold 26 RMSLE for model3 = 0.7853939463871736\n","Fold 26 RMSLE for model4 = 0.7861974620330768\n","Fold 26 Average RMSLE = 0.7890395929940679\n","The average RMSLE is 0.7890395929940679 while the best RMSLE is 0.7853939463871736 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 27\n","Fold 27 RMSLE for model1 = 0.7352666480278904\n","Fold 27 RMSLE for model2 = 0.7306442197217334\n","Fold 27 RMSLE for model3 = 0.7392158657291732\n","Fold 27 RMSLE for model4 = 0.7340263949101892\n","Fold 27 Average RMSLE = 0.7331265249406799\n","The average RMSLE is 0.7331265249406799 while the best RMSLE is 0.7306442197217334 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 28\n","Fold 28 RMSLE for model1 = 0.7396797208817563\n","Fold 28 RMSLE for model2 = 0.7461310576781267\n","Fold 28 RMSLE for model3 = 0.7369400880270104\n","Fold 28 RMSLE for model4 = 0.7421066648338634\n","Fold 28 Average RMSLE = 0.738488422322345\n","The average RMSLE is 0.738488422322345 while the best RMSLE is 0.7369400880270104 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 29\n","Fold 29 RMSLE for model1 = 0.7772006850377814\n","Fold 29 RMSLE for model2 = 0.7825554391919949\n","Fold 29 RMSLE for model3 = 0.7686716132731531\n","Fold 29 RMSLE for model4 = 0.7776042111512603\n","Fold 29 Average RMSLE = 0.7737839361027194\n","The average RMSLE is 0.7737839361027194 while the best RMSLE is 0.7686716132731531 and we proceed with the model with best RMSLE\n","---------------\n","\n","Starting Fold 30\n","Fold 30 RMSLE for model1 = 0.764510328180829\n","Fold 30 RMSLE for model2 = 0.7743971931091794\n","Fold 30 RMSLE for model3 = 0.7651904233367176\n","Fold 30 RMSLE for model4 = 0.7776561301596686\n","Fold 30 Average RMSLE = 0.7679268324294578\n","The average RMSLE is 0.7679268324294578 while the best RMSLE is 0.764510328180829 and we proceed with the model with best RMSLE\n","---------------\n","\n","OOF RMSLE = 0.7526550018838091\n","sum_model1_error: 22.651228958878196\n","sum_model2_error: 22.82759601550491\n","sum_model3_error: 22.632723192735842\n","sum_model4_error: 22.679927748989936\n"]}]},{"cell_type":"markdown","source":["このパラメータがいいかもしれない\n","試してみる価値はある。\n","Params:\n","    iterations: 524\n","    depth: 3\n","    learning_rate: 0.03722226226421239\n","    l2_leaf_reg: 2\n","    bagging_temperature: 0.07655159384792513\n","    min_data_in_leaf: 14"],"metadata":{"id":"pGwvQU9Mdr2v"}},{"cell_type":"code","source":["\n","# Step 1: Optuna の Objective 関数\n","def objective(trial, X, y, num_folds):\n","    params = {\n","        'iterations': trial.suggest_int('iterations', 100, 1000),\n","        'depth': trial.suggest_int('depth', 3, 10),\n","        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),\n","        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 1e-3, 10.0, log=True),\n","        'border_count': trial.suggest_int('border_count', 32, 255),\n","        'bagging_temperature': trial.suggest_float('bagging_temperature', 0.0, 1.0),\n","        'random_strength': trial.suggest_float('random_strength', 0.0, 1.0),\n","        'od_type': 'Iter',\n","        'od_wait': 20,\n","        'verbose': 0,\n","        'random_state': 13\n","    }\n","\n","    kf = KFold(n_splits=num_folds, shuffle=True, random_state=13)\n","    oof_preds = np.zeros(len(X))\n","\n","    for train_idx, valid_idx in kf.split(X, y):\n","        X_train, X_valid = X[train_idx], X[valid_idx]\n","        y_train, y_valid = y[train_idx], y[valid_idx]\n","\n","        model = CatBoostRegressor(**params)\n","        model.fit(X_train, np.log1p(y_train), eval_set=(X_valid, y_valid), early_stopping_rounds=50, verbose=False)\n","\n","        preds = np.expm1(model.predict(X_valid))\n","        rmsle = np.sqrt(mean_squared_log_error(y_valid, preds))\n","        oof_preds[valid_idx] = preds\n","\n","    final_rmsle = np.sqrt(mean_squared_log_error(y, oof_preds))\n","    return final_rmsle\n"],"metadata":{"id":"f0XoRvn2B6Ek","executionInfo":{"status":"ok","timestamp":1732035661943,"user_tz":-540,"elapsed":419,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":105,"outputs":[]},{"cell_type":"code","source":["\n","# Step 2: Optuna を用いたハイパーパラメータチューニング\n","def tune_catboost(X, y, num_folds=5, n_trials=200):\n","    study = optuna.create_study(direction='minimize')\n","    study.optimize(lambda trial: objective(trial, X, y, num_folds), n_trials=n_trials)\n","    print(\"Best trial:\")\n","    trial = study.best_trial\n","    print(f\"  Value: {trial.value}\")\n","    print(\"  Params: \")\n","    for key, value in trial.params.items():\n","        print(f\"    {key}: {value}\")\n","    return trial.params"],"metadata":{"id":"UsS2ibBVB-ke","executionInfo":{"status":"ok","timestamp":1732035662313,"user_tz":-540,"elapsed":4,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":106,"outputs":[]},{"cell_type":"code","source":["\n","# Step 3: K-Fold Cross-Validation を用いたモデル訓練と予測\n","def get_models_trained(train, test, target, num_folds, catboost_params):\n","    kf = KFold(n_splits=num_folds, shuffle=True, random_state=13)\n","\n","    oof_predictions = np.zeros(len(train))\n","    test_predictions = np.zeros(len(test))\n","\n","    for fold, (train_index, valid_index) in enumerate(kf.split(train, target)):\n","        print(f\"Starting Fold {fold + 1}\")\n","        X_train, X_valid = train[train_index], train[valid_index]\n","        y_train, y_valid = target[train_index], target[valid_index]\n","\n","        # CatBoostRegressor のインスタンス作成\n","        model = CatBoostRegressor(**catboost_params, random_state=13, verbose=0)\n","\n","        # モデルの訓練\n","        model.fit(X_train, np.log1p(y_train), eval_set=(X_valid, y_valid), early_stopping_rounds=50, verbose=False)\n","\n","        # バリデーションデータに対する予測\n","        valid_preds = np.expm1(model.predict(X_valid))\n","        rmsle = np.sqrt(mean_squared_log_error(y_valid, valid_preds))\n","        print(f\"Fold {fold + 1} RMSLE = {rmsle}\")\n","\n","        # OOF 予測の保存\n","        oof_predictions[valid_index] = valid_preds\n","\n","        # テストデータに対する予測の蓄積\n","        test_preds = np.expm1(model.predict(test))\n","        test_predictions += test_preds / num_folds\n","\n","        # メモリの解放\n","        del X_train, X_valid, y_train, y_valid, model\n","        gc.collect()\n","\n","        print('---------------\\n')\n","\n","    # 最終的な OOF RMSLE の計算\n","    final_RMSLE = np.sqrt(mean_squared_log_error(target, oof_predictions))\n","    print(f\"OOF RMSLE = {final_RMSLE}\")\n","\n","    return oof_predictions, test_predictions\n"],"metadata":{"id":"TV02D18CCC1q","executionInfo":{"status":"ok","timestamp":1732035662313,"user_tz":-540,"elapsed":3,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":107,"outputs":[]},{"cell_type":"code","execution_count":108,"metadata":{"id":"0RGHgcLqO-CO","executionInfo":{"status":"ok","timestamp":1732035662633,"user_tz":-540,"elapsed":10,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["    # # Step 1: ハイパーパラメータの最適化\n","    # best_params = tune_catboost(train, target, num_folds=30, n_trials=200)\n","\n","    # # Step 2: モデルの訓練と予測\n","    # oof_preds, test_preds = get_models_trained(train, test, target, num_folds=30, catboost_params=best_params)\n"]},{"cell_type":"code","source":["submit = pd.read_csv(path+'sample_submission.csv',  header = None)\n","submit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"d9vHuaYL4Sla","executionInfo":{"status":"ok","timestamp":1732035662633,"user_tz":-540,"elapsed":9,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"2e5b73b4-f038-4e6a-f678-7009b6ec46ca"},"execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0              1\n","0     4655  249574.303827\n","1     4656  249574.303827\n","2     4657  249574.303827\n","3     4658  249574.303827\n","4     4659  249574.303827\n","...    ...            ...\n","2503  7158  249574.303827\n","2504  7159  249574.303827\n","2505  7160  249574.303827\n","2506  7161  249574.303827\n","2507  7162  249574.303827\n","\n","[2508 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-87f390e3-ce18-4c78-bc9f-4143a62316e9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4655</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4656</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4657</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4658</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4659</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>7158</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>7159</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>7160</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>7161</td>\n","      <td>249574.303827</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>7162</td>\n","      <td>249574.303827</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87f390e3-ce18-4c78-bc9f-4143a62316e9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-87f390e3-ce18-4c78-bc9f-4143a62316e9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-87f390e3-ce18-4c78-bc9f-4143a62316e9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cf625188-588f-42a4-8be4-d88021670e3f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf625188-588f-42a4-8be4-d88021670e3f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cf625188-588f-42a4-8be4-d88021670e3f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_16630cd6-e4c6-43fa-8fcb-c704e9faba5e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('submit')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_16630cd6-e4c6-43fa-8fcb-c704e9faba5e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('submit');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submit","summary":"{\n  \"name\": \"submit\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 724,\n        \"min\": 4655,\n        \"max\": 7162,\n        \"num_unique_values\": 2508,\n        \"samples\": [\n          6776,\n          4711,\n          7135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0274019767131063e-09,\n        \"min\": 249574.30382740172,\n        \"max\": 249574.30382740172,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          249574.30382740172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["test_preds.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1rRnsQRJVVxi","executionInfo":{"status":"ok","timestamp":1732035662633,"user_tz":-540,"elapsed":7,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"a2738ac4-c570-4788-ee9c-1fdd72228765"},"execution_count":110,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2508,)"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","execution_count":117,"metadata":{"id":"KqRqr73vPA0j","executionInfo":{"status":"ok","timestamp":1732035862782,"user_tz":-540,"elapsed":451,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"outputs":[],"source":["submit [ 1 ]  =  test_preds\n","submit.to_csv('SMBC_17.csv', index = False)\n"]},{"cell_type":"code","execution_count":118,"metadata":{"id":"2PjeOxAhPE04","executionInfo":{"status":"ok","timestamp":1732035862782,"user_tz":-540,"elapsed":13,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"colab":{"base_uri":"https://localhost:8080/","height":423},"outputId":"23fd6b1a-f45a-4b3a-aae0-9bf9e421557f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0             1\n","0     4655  4.381203e+04\n","1     4656  3.231816e+05\n","2     4657  3.986648e+04\n","3     4658  2.760234e+04\n","4     4659  4.685092e+04\n","...    ...           ...\n","2503  7158  5.164296e+05\n","2504  7159  1.029580e+05\n","2505  7160  1.420805e+05\n","2506  7161  2.563382e+05\n","2507  7162  1.266697e+06\n","\n","[2508 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-bac32103-63c0-4410-bac6-042600d57c15\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4655</td>\n","      <td>4.381203e+04</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4656</td>\n","      <td>3.231816e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4657</td>\n","      <td>3.986648e+04</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4658</td>\n","      <td>2.760234e+04</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4659</td>\n","      <td>4.685092e+04</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>7158</td>\n","      <td>5.164296e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2504</th>\n","      <td>7159</td>\n","      <td>1.029580e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2505</th>\n","      <td>7160</td>\n","      <td>1.420805e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2506</th>\n","      <td>7161</td>\n","      <td>2.563382e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2507</th>\n","      <td>7162</td>\n","      <td>1.266697e+06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2508 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bac32103-63c0-4410-bac6-042600d57c15')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bac32103-63c0-4410-bac6-042600d57c15 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bac32103-63c0-4410-bac6-042600d57c15');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a3588eb1-af21-480e-9945-5b92cab39731\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3588eb1-af21-480e-9945-5b92cab39731')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a3588eb1-af21-480e-9945-5b92cab39731 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_551e57ba-b3d8-4437-86e0-a5a9ca8e2427\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('submit')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_551e57ba-b3d8-4437-86e0-a5a9ca8e2427 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('submit');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submit","summary":"{\n  \"name\": \"submit\",\n  \"rows\": 2508,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 724,\n        \"min\": 4655,\n        \"max\": 7162,\n        \"num_unique_values\": 2508,\n        \"samples\": [\n          6776,\n          4711,\n          7135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 333311.7948387506,\n        \"min\": 18001.22343009862,\n        \"max\": 2330031.94340571,\n        \"num_unique_values\": 2501,\n        \"samples\": [\n          30029.995992591997,\n          627143.8710501348,\n          26416.130550556627\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":118}],"source":["submit"]},{"cell_type":"code","source":["target = target.flatten()"],"metadata":{"id":"PL4s8ACIUX4t","executionInfo":{"status":"ok","timestamp":1732035863118,"user_tz":-540,"elapsed":3,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":119,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","# 実測値と予測値を対数スケールでプロット\n","plt.figure(figsize=(8, 6))\n","sns.scatterplot(x=target, y=oof_predictions, alpha=0.5)\n","plt.xscale('log')\n","plt.yscale('log')\n","plt.xlabel('Actual Values (y_test) [Log Scale]')\n","plt.ylabel('Predicted Values (test_preds) [Log Scale]')\n","plt.title('Actual vs Predicted Values (Log-Log Scale)')\n","plt.plot([target.min(), target.max()], [target.min(), target.max()], 'r--')  # 45度線\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"_ifM6b64R92a","executionInfo":{"status":"ok","timestamp":1732035864497,"user_tz":-540,"elapsed":1381,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"ab6ade7a-34f7-4b64-c630-b03ee64be876"},"execution_count":120,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 予測値の対数ヒストグラム\n","plt.figure(figsize=(8, 6))\n","sns.histplot(test_preds, bins=1000, kde=True)\n","plt.xscale('log')\n","plt.xlabel('Predicted Values (test_preds) [Log Scale]')\n","plt.ylabel('Frequency')\n","plt.title('test_data (Log Scale)')\n","plt.show()\n","\n","plt.figure(figsize=(8, 6))\n","sns.histplot(target, bins=5000, kde=True)\n","plt.xscale('log')\n","plt.xlabel('Predicted Values (test_preds) [Log Scale]')\n","plt.ylabel('Frequency')\n","plt.title('train_data (Log Scale)')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"p4ZMc92JRYSD","executionInfo":{"status":"ok","timestamp":1732035873932,"user_tz":-540,"elapsed":9438,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"251baf00-2882-4393-c368-00f135b649af"},"execution_count":121,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAq4AAAIoCAYAAACoFmnDAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABmaklEQVR4nO3dd3hUdd7+8fvMTGbS6XXpHSlSbOgigiCgsiDY9RFc1F1FRBALj79HsaxYMIAK6lpAd3VFLKxYKKIC0kQQUCSRDkovSUhC2sz390eYIZPeZya8X9c1F5lTPzM5CXe+c87nWMYYIwAAACDI2QJdAAAAAFASBFcAAACEBIIrAAAAQgLBFQAAACGB4AoAAICQQHAFAABASCC4AgAAICQQXAEAABASCK4AAAAICQRXACGlRYsWGjVqVJXuc/LkybIsq0r3WRIpKSmqX7++3nvvvUCXElTKeowcO3ZMUVFR+vLLLyu+KAAVguAKoEKtWrVKkydPVmJiYqBLCQqzZs3SnDlzKmXbM2bMUExMjG688UbfNG/IPnr0aKXss7QWLFigPn36qH79+oqMjFSrVq10/fXXa+HChYEuLZ86derojjvu0P/93/8FuhQAhSC4AqhQq1at0hNPPFFpwTUhIUFvvPFGpWy7MlRWcM3KytKMGTN0xx13yG63V/j2K8LUqVP1l7/8RZZladKkSZo2bZpGjBihbdu26YMPPgh0eQX6+9//rg0bNuibb74JdCkACuAIdAEAzl4ej0eZmZkKDw8v8Toul6sSKwodn3/+uY4cOaLrr78+0KUUKDs7W0899ZQGDBigxYsX55t/+PDhAFRVvI4dO6pz586aM2eO+vXrF+hyAOTBiCuACjN58mQ9+OCDkqSWLVvKsixZlqXdu3dLkizL0r333qv33ntPnTp1ksvl8n1kPHXqVF188cWqU6eOIiIi1LNnT3300Uf59pH3/MU5c+bIsiytXLlSEyZMUL169RQVFaVrrrlGR44cKfVr+P7773X++ecrPDxcrVu31uuvv17gcrNnz1a/fv1Uv359uVwunXPOOXr11Vfz1bplyxYtW7bM915cdtllkqTjx49r4sSJ6tKli6KjoxUbG6vBgwdr06ZNJapz/vz5atGihVq3bl3q1yhJ33zzjXr37q2oqCjVrFlTQ4cO1datW/Mt99133+m8887zez9Kcs7v0aNHlZycrEsuuaTA+fXr1/d7np6ersmTJ6tdu3YKDw9Xo0aNNHz4cO3YscO3TEmPkYIkJibq/vvvV9OmTeVyudSmTRs999xz8ng8+ZYdMGCAFixYIGNMibYNoOow4gqgwgwfPly//fab/vOf/2jatGmqW7euJKlevXq+Zb755ht9+OGHuvfee1W3bl21aNFCUs75mn/5y190yy23KDMzUx988IGuu+46ff7557rqqquK3ffYsWNVq1YtPf7449q9e7emT5+ue++9V3Pnzi1x/T///LOuuOIK1atXT5MnT1Z2drYef/xxNWjQIN+yr776qjp16qS//OUvcjgcWrBgge655x55PB6NGTNGkjR9+nSNHTtW0dHRevTRRyXJt62dO3dq/vz5uu6669SyZUsdOnRIr7/+uvr06aNff/1VjRs3LrLWVatWqUePHiV+bbl9/fXXGjx4sFq1aqXJkyfr1KlTevnll3XJJZdow4YNvu/JTz/9pEGDBqlRo0Z64okn5Ha79eSTT/p9PwtTv359RUREaMGCBRo7dqxq165d6LJut1tXX321li5dqhtvvFHjxo3TyZMntWTJEv3yyy++cF7WYyQtLU19+vTRH3/8ob/97W9q1qyZVq1apUmTJunAgQOaPn263/I9e/bUtGnTtGXLFnXu3Ln4NxRA1TEAUIFeeOEFI8ns2rUr3zxJxmazmS1btuSbl5aW5vc8MzPTdO7c2fTr189vevPmzc3IkSN9z2fPnm0kmf79+xuPx+ObPn78eGO3201iYmKJax82bJgJDw83e/bs8U379ddfjd1uN3l/Xeat1xhjBg4caFq1auU3rVOnTqZPnz75lk1PTzdut9tv2q5du4zL5TJPPvlkkXVmZWUZy7LMAw88kG/e448/biSZI0eOFLp+t27dTP369c2xY8d80zZt2mRsNpu57bbbfNOGDBliIiMjzR9//OGbtm3bNuNwOPK9HwV57LHHjCQTFRVlBg8ebP7xj3+Y9evX51vu7bffNpJMXFxcvnm5v6dlPUaeeuopExUVZX777Te/5R555BFjt9vN3r17/aavWrXKSDJz584t9jUCqFqcKgCgSvXp00fnnHNOvukRERG+r0+cOKGkpCT17t1bGzZsKNF277rrLr+Pr3v37i232609e/aUaH23261FixZp2LBhatasmW96x44dNXDgwCLrTUpK0tGjR9WnTx/t3LlTSUlJxe7P5XLJZrP59n3s2DFFR0erffv2xb7m48ePyxijWrVqlei15XbgwAFt3LhRo0aN8hsF7dq1qwYMGOBrBeV2u/X1119r2LBhfqO/bdq00eDBg0u0ryeeeELvv/++unfvrkWLFunRRx9Vz5491aNHD7/TEj7++GPVrVtXY8eOzbeN3N/Tsh4j8+bNU+/evVWrVi0dPXrU9+jfv7/cbreWL1/ut7z3fQ2WzgwAzuBUAQBVqmXLlgVO//zzz/X0009r48aNysjI8E0vaf/U3GFTOhM+Tpw4UaL1jxw5olOnTqlt27b55rVv3z5fb8+VK1fq8ccf1+rVq5WWluY3LykpSTVq1Chyfx6PRzNmzNCsWbO0a9cuud1u37w6deqUqGZThnMwvUG+ffv2+eZ17NhRixYtUmpqqpKTk3Xq1Cm1adMm33IFTSvMTTfdpJtuuknJyclau3at5syZo/fff19DhgzRL7/8ovDwcO3YsUPt27eXw1H0f0llPUa2bdumzZs3F3qKQ94LxbzvazD27gXOdgRXAFUq96iZ14oVK/SXv/xFl156qWbNmqVGjRopLCxMs2fP1vvvv1+i7RbWEqos4a44O3bs0OWXX64OHTooLi5OTZs2ldPp1Jdffqlp06YVeMFPXs8884z+7//+T3/961/11FNPqXbt2rLZbLr//vuLXb927dqyLKvEoTwYxMbGasCAARowYIDCwsL0zjvvaO3aterTp0+J1i/PMeLxeDRgwAA99NBDBc5v166d33Pv++o9RxtA8CC4AqhQZRml+vjjjxUeHq5Fixb5tbuaPXt2RZZWpHr16ikiIkLbtm3LNy8hIcHv+YIFC5SRkaHPPvvMb6T322+/zbduYe/HRx99pL59++qtt97ym56YmFhsYHI4HGrdurV27dpV5HIFad68uaT8r0mS4uPjVbduXUVFRSk8PFzh4eHavn17vuUKmlYa5513nt555x0dOHBAktS6dWutXbtWWVlZCgsLK3Cd8hwjrVu3VkpKivr371+i+rzva8eOHUu0PICqwzmuACpUVFSUJJXqBgR2u12WZfl9XL57927Nnz+/gqsruoaBAwdq/vz52rt3r2/61q1btWjRonzLSv6juUlJSQWGqKioqALfC7vdnm80eN68efrjjz9KVG+vXr30448/lmjZ3Bo1aqRu3brpnXfe8avrl19+0eLFi3XllVf66uvfv7/mz5+v/fv3+5bbvn27vvrqq2L3k5aWptWrVxc4z7u+93SFESNG6OjRo3rllVfyLet9j8pzjFx//fVavXp1vu+jlHOcZmdn+01bv369atSooU6dOhW7bQBVixFXABWqZ8+ekqRHH31UN954o8LCwjRkyBBfoC3IVVddpbi4OA0aNEg333yzDh8+rJkzZ6pNmzbavHlzVZWuJ554QgsXLlTv3r11zz33KDs7Wy+//LI6derkV8cVV1whp9OpIUOG6G9/+5tSUlL0xhtvqH79+r5RRK+ePXvq1Vdf1dNPP602bdqofv366tevn66++mo9+eSTuv3223XxxRfr559/1nvvvadWrVqVqNahQ4fqX//6l3777bd8H3VLUlxcnCIjI/2m2Ww2/e///q9eeOEFDR48WL169dLo0aN97bBq1KihyZMn+5afPHmyFi9erEsuuUR333233G63XnnlFXXu3FkbN24ssr60tDRdfPHFuuiiizRo0CA1bdpUiYmJmj9/vlasWKFhw4ape/fukqTbbrtN7777riZMmKAffvhBvXv3Vmpqqr7++mvdc889Gjp0aLmOkQcffFCfffaZrr76ao0aNUo9e/ZUamqqfv75Z3300UfavXu33yj3kiVLNGTIEM5xBYJRADsaAKimnnrqKfOnP/3J2Gw2v9ZYksyYMWMKXOett94ybdu2NS6Xy3To0MHMnj3b19opt8LaYa1bt85vuW+//dZIMt9++22pal+2bJnp2bOncTqdplWrVua1114rsI7PPvvMdO3a1YSHh5sWLVqY5557ztfWKXcrsIMHD5qrrrrKxMTEGEm+1ljp6enmgQceMI0aNTIRERHmkksuMatXrzZ9+vQpsH1WXhkZGaZu3brmqaee8pvurbWgh91u9y339ddfm0suucRERESY2NhYM2TIEPPrr7/m28/SpUtN9+7djdPpNK1btzZvvvmmeeCBB0x4eHiR9WVlZZk33njDDBs2zDRv3ty4XC4TGRlpunfvbl544QWTkZHht3xaWpp59NFHTcuWLU1YWJhp2LChufbaa82OHTt8y5T1GDHGmJMnT5pJkyaZNm3aGKfTaerWrWsuvvhiM3XqVJOZmelbbuvWrUaS+frrr4t8fQACwzKGW4MAQCh66qmnNHv2bG3btq3Q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ffnll7rvvvt800obQEoiUH+EVIZBgwYpLCxM7733XomWPXDggAYPHuybFoggu2vXLt18881q3LixwsPD1aRJEw0dOlTx8fFVWkduN9xwgw4cOKBevXoFrAagIhFcgSDh/c9327ZteuCBBzR58mS98MILBS6bmZlZYfutXbu2YmJiKmx7FcHpdOrWW2/V7Nmz880zxmjOnDm67bbbFBYWFoDqSu/ll1/Wddddp+jo6ECXUm5ut7vYUdCKMmrUKL300kvFLudyudSwYUO5XK4qqKpgWVlZGjBggJKSkvTJJ58oISFBc+fOVZcuXSr9D72iREREqGHDhnI6nQGrAahIBFcgSHj/823evLnuvvtu9e/fX5999pmkMx/v/+Mf/1Djxo3Vvn17SdK+fft0/fXXq2bNmqpdu7aGDh2q3bt3+7bpdrs1YcIE1axZU3Xq1NFDDz0kY4zffvOO0mVkZOjhhx9W06ZN5XK51KZNG7311lvavXu3+vbtK0mqVauWLMvSqFGjJEkej0dTpkxRy5YtFRERoXPPPVcfffSR336+/PJLtWvXThEREerbt69fnQUZPXq0fvvtN33//fd+05ctW6adO3dq9OjRWrdunQYMGKC6deuqRo0a6tOnjzZs2FDoNgsaMd64caMsy/Kr5/vvv1fv3r0VERGhpk2b6r777lNqaqpv/qxZs9S2bVuFh4erQYMGuvbaawvdp9vt1kcffaQhQ4b4pl122WXas2ePxo8f7xtpL+++R40apWXLlmnGjBm+bRb3Hnvfjy+++EJdu3ZVeHi4LrroIv3yyy++Zbwf73/22Wc655xz5HK5tHfvXmVkZGjixIn605/+pKioKF144YX67rvv/LY/Z84cNWvWTJGRkbrmmmt07Ngxv/mbNm1S3759FRMTo9jYWPXs2VM//vijb/6QIUP0448/aseOHUW+jtLyeDx68skn1aRJE7lcLnXr1k0LFy70W2bVqlXq1q2bwsPDdd5552n+/PmyLEsbN24scJtbtmzRjh07NGvWLF100UVq3ry5LrnkEj399NO66KKLfMv9/vvvuummm1S7dm1FRUXpvPPO09q1ayVJO3bs0NChQ9WgQQNFR0fr/PPP19dff13ka0lMTNQdd9yhevXqKTY2Vv369dOmTZvK9wYBQYzgCgSpiIgIv5HVpUuXKiEhQUuWLNHnn3+urKwsDRw4UDExMVqxYoVWrlyp6OhoDRo0yLfeiy++qDlz5ujtt9/W999/r+PHj+vTTz8tcr+33Xab/vOf/+ill17S1q1b9frrrys6OlpNmzbVxx9/LElKSEjQgQMHNGPGDEnSlClT9O677+q1117Tli1bNH78eN16661atmyZpJyAPXz4cA0ZMkQbN27UHXfcoUceeaTIOrp06aLzzz9fb7/9tt/02bNn6+KLL1aHDh108uRJjRw5Ut9//73WrFmjtm3b6sorr9TJkydL92bnsmPHDg0aNEgjRozQ5s2bNXfuXH3//fe69957JUk//vij7rvvPj355JNKSEjQwoULdemllxa6vc2bNyspKUnnnXeeb9onn3yiJk2a6Mknn9SBAwd04MCBcu97xowZ6tWrl+68807fNps2bVqi1/zggw/qxRdf1Lp161SvXj0NGTLE7zSMtLQ0Pffcc3rzzTe1ZcsW1a9fX/fee69Wr16tDz74QJs3b9Z1112nQYMGadu2bZKktWvXavTo0br33nu1ceNG9e3bV08//bTffm+55RY1adJE69at0/r16/XII4/4jaI3a9ZMDRo00IoVK0r0OkpqxowZevHFFzV16lRt3rxZAwcO1F/+8hdf7cnJyRoyZIi6dOmiDRs26KmnntLDDz9c5Dbr1asnm82mjz76SG63u8BlUlJS1KdPH/3xxx/67LPPtGnTJj300EO+EeyUlBRdeeWVWrp0qX766ScNGjRIQ4YM0d69ewvd73XXXafDhw/rq6++0vr169WjRw9dfvnlOn78eBnfHSDIGQABN3LkSDN06FBjjDEej8csWbLEuFwuM3HiRN/8Bg0amIyMDN86//rXv0z79u2Nx+PxTcvIyDARERFm0aJFxhhjGjVqZJ5//nnf/KysLNOkSRPfvowxpk+fPmbcuHHGGGMSEhKMJLNkyZIC6/z222+NJHPixAnftPT0dBMZGWlWrVrlt+zo0aPNTTfdZIwxZtKkSeacc87xm//www/n21Zer732momOjjYnT540xhiTnJxsIiMjzZtvvlng8m6328TExJgFCxb4pkkyn376aaH1//TTT0aS2bVrl6/uu+66y2+7K1asMDabzZw6dcp8/PHHJjY21iQnJxdad26ffvqpsdvtft8nY4xp3ry5mTZtmt+08u479/eyJLzvxwcffOCbduzYMRMREWHmzp1rjDFm9uzZRpLZuHGjb5k9e/YYu91u/vjjD7/tXX755WbSpEnGGGNuuukmc+WVV/rNv+GGG0yNGjV8z2NiYsycOXOKrLF79+5m8uTJhc7P/bOTW+7ve16NGzc2//jHP/ymnX/++eaee+4xxhjz6quvmjp16phTp0755r/xxhtGkvnpp58KreWVV14xkZGRJiYmxvTt29c8+eSTZseOHb75r7/+uomJiTHHjh0rdBt5derUybz88su+57mPmxUrVpjY2FiTnp7ut07r1q3N66+/7jettMcGEKwYcQWCxOeff67o6GiFh4dr8ODBuuGGGzR58mTf/C5duvidp7Zp0yZt375dMTExio6OVnR0tGrXrq309HTt2LFDSUlJOnDggC688ELfOg6Hw2/kL6+NGzfKbrerT58+Ja57+/btSktL04ABA3x1REdH69133/V9xLt161a/OiSV6GKRm266SW63Wx9++KEkae7cubLZbLrhhhskSYcOHdKdd96ptm3bqkaNGoqNjVVKSkqRI1TF2bRpk+bMmeP3WgYOHCiPx6Ndu3ZpwIABat68uVq1aqX/+Z//0Xvvvae0tLRCt3fq1Cm5XC6/0wGqat8llft7Ubt2bbVv315bt271TXM6neratavv+c8//yy326127dr51bps2bJSfc8nTJigO+64Q/3799ezzz5b4CkBERERFfIavZKTk7V//35dcsklftMvueQS32tOSEjwnTrhdcEFFxS77TFjxujgwYN677331KtXL82bN0+dOnXSkiVLJOX8fHXv3l21a9cucP2UlBRNnDhRHTt2VM2aNRUdHa2tW7cWejxv2rRJKSkpqlOnjt/3YdeuXRV+egUQLByBLgBAjr59++rVV1+V0+lU48aN5XD4/3hGRUX5PU9JSVHPnj0LvOq6Xr16ZaohIiKi1OukpKRIkr744gv96U9/8ptX3otlYmNjde2112r27Nn661//qtmzZ+v666/3XeQ0cuRIHTt2TDNmzFDz5s3lcrnUq1evQi9es9ly/lY3uc7zzduZICUlRX/729/8OgB4NWvWTE6nUxs2bNB3332nxYsX67HHHtPkyZO1bt26Als91a1bV2lpacrMzCz2ApmK3ndFiYiI8AveKSkpstvtWr9+vex2u9+ypbkAbfLkybr55pv1xRdf6KuvvtLjjz+uDz74QNdcc41vmePHj5f5eA6EmJgYDRkyREOGDNHTTz+tgQMH6umnn9aAAQOK/fmaOHGilixZoqlTp6pNmzaKiIjQtddeW+jxnJKSokaNGuU7t1hSpR4PQCARXIEgERUVpTZt2pR4+R49emju3LmqX7++YmNjC1ymUaNGWrt2re88yOzsbN95cAXp0qWLPB6Pli1bpv79++eb7w1euc/hy33BTmEjtR07dvRdaOa1Zs2a4l+kci7Suuyyy/T5559r1apVfp0WVq5cqVmzZunKK6+UlHMu7dGjRwvdljcAHThwQLVq1ZKkfBfb9OjRQ7/++muR3wuHw6H+/furf//+evzxx1WzZk198803Gj58eL5lu3XrJkn69ddffV9LOe9l3nMhy7vvgrZZEmvWrFGzZs0kSSdOnNBvv/2mjh07Frp89+7d5Xa7dfjwYfXu3bvAZTp27Oi76Cj3fvJq166d2rVrp/Hjx+umm27S7NmzfcHV++lB9+7dS/2aChMbG6vGjRtr5cqVfsfrypUrfaOq7du317///W9lZGT4/vhat25dqfdlWZY6dOigVatWSZK6du2qN998U8ePHy9w1HXlypUaNWqU7/WnpKQUeYFdjx49dPDgQTkcDrVo0aLU9QGhiFMFgBB1yy23qG7duho6dKhWrFihXbt26bvvvtN9992n33//XZI0btw4Pfvss5o/f77i4+N1zz33FNmap0WLFho5cqT++te/av78+b5tej+qb968uSzL0ueff64jR44oJSVFMTExmjhxosaPH6933nlHO3bs0IYNG/Tyyy/rnXfekST9/e9/17Zt2/Tggw8qISFB77//vubMmVOi13nppZeqTZs2uu2229ShQwddfPHFvnlt27bVv/71L23dulVr167VLbfcUuSoVps2bdS0aVNNnjxZ27Zt0xdffKEXX3zRb5mHH35Yq1at8l1UtG3bNv33v//1XSD1+eef66WXXtLGjRu1Z88evfvuu/J4PL5OD3nVq1dPPXr0yNcdoUWLFlq+fLn++OMPX9gu775btGihtWvXavfu3Tp69GiJ21Y9+eSTWrp0qX755ReNGjVKdevW9btJRV7t2rXTLbfcottuu02ffPKJdu3apR9++EFTpkzRF198IUm67777tHDhQk2dOlXbtm3TK6+84nfl/qlTp3Tvvffqu+++0549e7Ry5UqtW7fOLzCvWbPGN4peFrt27dLGjRv9HqmpqXrwwQf13HPPae7cuUpISNAjjzyijRs3aty4cZKkm2++WR6PR3fddZe2bt2qRYsWaerUqZJU6CkfGzdu1NChQ/XRRx/p119/1fbt2/XWW2/p7bff1tChQyXlnPrSsGFDDRs2TCtXrtTOnTv18ccfa/Xq1ZJyjudPPvlEGzdu1KZNm3x1FKZ///7q1auXhg0bpsWLF2v37t1atWqVHn30Ub/uDEC1EuiTbAEUfoFJcfMPHDhgbrvtNlO3bl3jcrlMq1atzJ133mmSkpKMMTkXY40bN87ExsaamjVrmgkTJpjbbrut0IuzjDHm1KlTZvz48aZRo0bG6XSaNm3amLfffts3/8knnzQNGzY0lmWZkSNHGmNyLiibPn26ad++vQkLCzP16tUzAwcONMuWLfOtt2DBAtOmTRvjcrlM7969zdtvv13sxVlezzzzjJHkd6GZMcZs2LDBnHfeeSY8PNy0bdvWzJs3L99FT8pzkc73339vunTpYsLDw03v3r3NvHnz/C7OMsaYH374wQwYMMBER0ebqKgo07VrV9/FPCtWrDB9+vQxtWrVMhEREaZr166+C5kKM2vWLHPRRRf5TVu9erXp2rWrcblcJvev4vLsOyEhwVx00UUmIiIi32sqiPfirAULFphOnToZp9NpLrjgArNp0ybfMrNnz/a7oMorMzPTPPbYY6ZFixYmLCzMNGrUyFxzzTVm8+bNvmXeeust06RJExMREWGGDBlipk6d6ttWRkaGufHGG03Tpk2N0+k0jRs3Nvfee6/fBVF33XWX+dvf/lbkayjq4qyCHitWrDBut9tMnjzZ/OlPfzJhYWHm3HPPNV999ZXf+itXrjRdu3Y1TqfT9OzZ07z//vtGkomPjy+wjiNHjpj77rvPdO7c2URHR5uYmBjTpUsXM3XqVON2u33L7d6924wYMcLExsaayMhIc95555m1a9caY4zZtWuX6du3r4mIiDBNmzY1r7zySr6fz7zHd3Jyshk7dqxp3LixCQsLM02bNjW33HKL2bt3r199XJyF6sIyJk9TRwBAhTp16pTat2+vuXPnBtUdjL777jv17dtXJ06cCLpzIo8ePar27dvrxx9/VMuWLQtdbtSoUUpMTKz0u2S99957uv3225WUlFSmc8ED7bLLLlO3bt0q/G5tQFXjVAEAqGQRERF69913izz/Fv52796tWbNmFRlavbwdOT7//PMK2/+7776r77//Xrt27dL8+fP18MMP6/rrrw+50Pree+8pOjq6wnvhAoHCiCsAVFN///vf9e9//7vAebfeeqtuvPHGoB1xLanDhw8rOTlZUs7FiHm7b5TV888/r1mzZungwYNq1KiR7851kZGRFbL9qnLy5EkdOnRIUk6ngbp16wa4IqB8CK4AUE3lDnV5xcbGqn79+lVcEQCUD8EVAAAAIYFzXAEAABASCK4AAAAICQRXAAAAhASCKwAAAEICwRUAAAAhgeAKAACAkEBwBQAAQEgguAIAACAk/H/yatR9Jdr8hQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["import time\n","print(time.ctime())"],"metadata":{"id":"FzTQLSzA7KBE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732035873932,"user_tz":-540,"elapsed":9,"user":{"displayName":"ねこ","userId":"00794682924380388788"}},"outputId":"c0154669-d4f9-4a50-f0e6-90bcc4ea2319"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Nov 19 17:04:33 2024\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_Q-_rhRDEbCF","executionInfo":{"status":"ok","timestamp":1732035873932,"user_tz":-540,"elapsed":5,"user":{"displayName":"ねこ","userId":"00794682924380388788"}}},"execution_count":122,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1IMQH9jO58TQU6prlFa8V5ka2zWp9ssVZ","timestamp":1732030813384},{"file_id":"1LLVIwYoieztpeAKj_JqJnMurCV3Y-hG9","timestamp":1732011760731},{"file_id":"1-tBvNyUYqRF5qgrNiVRPmD-ET-WsxGkP","timestamp":1732010292880}],"gpuType":"T4","authorship_tag":"ABX9TyPLHu0cNl/IuuPFrAzbKJxb"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}